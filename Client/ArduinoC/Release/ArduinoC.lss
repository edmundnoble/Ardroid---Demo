
ArduinoC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012e  00800200  00003888  0000391c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003888  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000047d  0080032e  0080032e  00003a4a  2**0
                  ALLOC
  3 .stab         00010c74  00000000  00000000  00003a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00017614  00000000  00000000  000146c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__ctors_end>
       4:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__vector_1>
       8:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__vector_2>
       c:	0c 94 27 03 	jmp	0x64e	; 0x64e <__vector_3>
      10:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__vector_4>
      14:	0c 94 89 03 	jmp	0x712	; 0x712 <__vector_5>
      18:	0c 94 ba 03 	jmp	0x774	; 0x774 <__vector_6>
      1c:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__vector_7>
      20:	0c 94 1c 04 	jmp	0x838	; 0x838 <__vector_8>
      24:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      28:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      2c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      30:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      34:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <__vector_13>
      38:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      3c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      40:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      44:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      48:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      4c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      50:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      54:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      58:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      5c:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__vector_23>
      60:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      64:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__vector_25>
      68:	0c 94 15 09 	jmp	0x122a	; 0x122a <__vector_26>
      6c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      70:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      74:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      78:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      7c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      80:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      84:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      88:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      8c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      90:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__vector_36>
      94:	0c 94 54 09 	jmp	0x12a8	; 0x12a8 <__vector_37>
      98:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      9c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      a0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      a4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      a8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      ac:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      b0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      b4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      b8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      bc:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      c0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      c4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      c8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      cc:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <__vector_51>
      d0:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__vector_52>
      d4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
      d8:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <__vector_54>
      dc:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <__vector_55>
      e0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>

000000e4 <_ZL21tone_pin_to_timer_PGM>:
      e4:	02                                                  .

000000e5 <port_to_mode_PGM>:
      e5:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
      f5:	01 01 00 00 04 01 07 01 0a 01                       ..........

000000ff <port_to_output_PGM>:
      ff:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     10f:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000119 <port_to_input_PGM>:
     119:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     129:	00 01 00 00 03 01 06 01 09 01                       ..........

00000133 <digital_pin_to_port_PGM>:
     133:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     143:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     153:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     163:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     173:	0b 0b 0b 0b 0b 0b                                   ......

00000179 <digital_pin_to_bit_mask_PGM>:
     179:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     189:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     199:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1a9:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1b9:	04 08 10 20 40 80                                   ... @.

000001bf <digital_pin_to_timer_PGM>:
     1bf:	00 00 09 0a 02 08 0b 0c 0d 07 06 03 04 01 00 00     ................
	...
     1eb:	11 10 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000205 <_ZZN16AndroidAccessory11isConnectedEvE3__c_4>:
     205:	64 69 73 63 6f 6e 6e 65 63 74 0a 00                 disconnect..

00000211 <_ZZN16AndroidAccessory11isConnectedEvE3__c_3>:
     211:	66 6f 75 6e 64 20 70 6f 73 73 69 62 6c 65 20 64     found possible d
     221:	65 76 69 63 65 2e 20 73 77 69 74 68 63 69 6e 67     evice. swithcing
     231:	20 74 6f 20 73 65 72 69 61 6c 20 6d 6f 64 65 0a      to serial mode.
	...

00000242 <_ZZN16AndroidAccessory11isConnectedEvE3__c_2>:
     242:	66 6f 75 6e 64 20 61 6e 64 72 6f 69 64 20 61 63     found android ac
     252:	65 73 73 6f 72 79 20 64 65 76 69 63 65 0a 00        essory device..

00000261 <_ZZN16AndroidAccessory11isConnectedEvE3__c_1>:
     261:	0a 44 65 76 69 63 65 20 64 65 73 63 72 69 70 74     .Device descript
     271:	6f 72 20 63 61 6e 6e 6f 74 20 62 65 20 72 65 74     or cannot be ret
     281:	72 69 65 76 65 64 2e 20 54 72 79 69 6e 67 20 61     rieved. Trying a
     291:	67 61 69 6e 0a 00                                   gain..

00000297 <_ZZN16AndroidAccessory11isConnectedEvE3__c_0>:
     297:	52 65 71 75 65 73 74 69 6e 67 20 64 65 76 69 63     Requesting devic
     2a7:	65 20 64 65 73 63 72 69 70 74 6f 72 2e 0a 00        e descriptor...

000002b6 <_ZZN16AndroidAccessory11isConnectedEvE3__c>:
     2b6:	0a 44 65 76 69 63 65 20 61 64 64 72 65 73 73 65     .Device addresse
     2c6:	64 2e 2e 2e 20 00                                   d... .

000002cc <_ZZN16AndroidAccessory16configureAndroidEvE3__c>:
     2cc:	43 61 6e 27 74 20 73 65 74 20 63 6f 6e 66 69 67     Can't set config
     2dc:	20 74 6f 20 31 0a 00                                 to 1..

000002e3 <_ZZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_E3__c_5>:
     2e3:	63 61 6e 27 74 20 66 69 6e 64 20 61 63 63 65 73     can't find acces
     2f3:	73 6f 72 79 20 65 6e 64 70 6f 69 6e 74 73 00        sory endpoints.

00000302 <_ZZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_E3__c_4>:
     302:	75 6e 6b 6f 77 6e 20 64 65 73 63 20 74 79 70 65     unkown desc type
     312:	20 00                                                .

00000314 <_ZZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_E3__c_3>:
     314:	69 6e 74 65 72 66 61 63 65 20 64 65 73 63 0a 00     interface desc..

00000324 <_ZZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_E3__c_2>:
     324:	63 6f 6e 66 69 67 20 64 65 73 63 0a 00              config desc..

00000331 <_ZZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_E3__c_1>:
     331:	43 61 6e 27 74 20 67 65 74 20 63 6f 6e 66 69 67     Can't get config
     341:	20 64 65 73 63 72 69 70 74 6f 72 0a 00               descriptor..

0000034e <_ZZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_E3__c_0>:
     34e:	63 6f 6e 66 69 67 20 64 65 73 63 72 69 70 74 6f     config descripto
     35e:	72 20 74 6f 6f 20 6c 61 72 67 65 0a 00              r too large..

0000036b <_ZZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_E3__c>:
     36b:	43 61 6e 27 74 20 67 65 74 20 63 6f 6e 66 69 67     Can't get config
     37b:	20 64 65 73 63 72 69 70 74 6f 72 20 6c 65 6e 67      descriptor leng
     38b:	74 68 0a 00                                         th..

0000038f <_ZZN16AndroidAccessory12switchDeviceEhE3__c_0>:
     38f:	63 6f 75 6c 64 20 6e 6f 74 20 72 65 61 64 20 64     could not read d
     39f:	65 76 69 63 65 20 70 72 6f 74 6f 63 6f 6c 20 76     evice protocol v
     3af:	65 72 73 69 6f 6e 0a 00                             ersion..

000003b7 <_ZZN16AndroidAccessory12switchDeviceEhE3__c>:
     3b7:	64 65 76 69 63 65 20 73 75 70 70 6f 72 74 73 20     device supports 
     3c7:	70 72 6f 74 63 6f 6c 20 31 0a 00                    protcol 1..

000003d2 <__ctors_start>:
     3d2:	8f 0a       	sbc	r8, r31
     3d4:	a8 0b       	sbc	r26, r24
     3d6:	86 1a       	sub	r8, r22

000003d8 <__ctors_end>:
     3d8:	11 24       	eor	r1, r1
     3da:	1f be       	out	0x3f, r1	; 63
     3dc:	cf ef       	ldi	r28, 0xFF	; 255
     3de:	d1 e2       	ldi	r29, 0x21	; 33
     3e0:	de bf       	out	0x3e, r29	; 62
     3e2:	cd bf       	out	0x3d, r28	; 61
     3e4:	00 e0       	ldi	r16, 0x00	; 0
     3e6:	0c bf       	out	0x3c, r16	; 60

000003e8 <__do_copy_data>:
     3e8:	13 e0       	ldi	r17, 0x03	; 3
     3ea:	a0 e0       	ldi	r26, 0x00	; 0
     3ec:	b2 e0       	ldi	r27, 0x02	; 2
     3ee:	e8 e8       	ldi	r30, 0x88	; 136
     3f0:	f8 e3       	ldi	r31, 0x38	; 56
     3f2:	00 e0       	ldi	r16, 0x00	; 0
     3f4:	0b bf       	out	0x3b, r16	; 59
     3f6:	02 c0       	rjmp	.+4      	; 0x3fc <__do_copy_data+0x14>
     3f8:	07 90       	elpm	r0, Z+
     3fa:	0d 92       	st	X+, r0
     3fc:	ae 32       	cpi	r26, 0x2E	; 46
     3fe:	b1 07       	cpc	r27, r17
     400:	d9 f7       	brne	.-10     	; 0x3f8 <__do_copy_data+0x10>

00000402 <__do_clear_bss>:
     402:	17 e0       	ldi	r17, 0x07	; 7
     404:	ae e2       	ldi	r26, 0x2E	; 46
     406:	b3 e0       	ldi	r27, 0x03	; 3
     408:	01 c0       	rjmp	.+2      	; 0x40c <.do_clear_bss_start>

0000040a <.do_clear_bss_loop>:
     40a:	1d 92       	st	X+, r1

0000040c <.do_clear_bss_start>:
     40c:	ab 3a       	cpi	r26, 0xAB	; 171
     40e:	b1 07       	cpc	r27, r17
     410:	e1 f7       	brne	.-8      	; 0x40a <.do_clear_bss_loop>

00000412 <__do_global_ctors>:
     412:	13 e0       	ldi	r17, 0x03	; 3
     414:	c8 ed       	ldi	r28, 0xD8	; 216
     416:	d3 e0       	ldi	r29, 0x03	; 3
     418:	00 e0       	ldi	r16, 0x00	; 0
     41a:	06 c0       	rjmp	.+12     	; 0x428 <__do_global_ctors+0x16>
     41c:	22 97       	sbiw	r28, 0x02	; 2
     41e:	01 09       	sbc	r16, r1
     420:	fe 01       	movw	r30, r28
     422:	0b bf       	out	0x3b, r16	; 59
     424:	0e 94 0b 1b 	call	0x3616	; 0x3616 <__tablejump_elpm__>
     428:	c2 3d       	cpi	r28, 0xD2	; 210
     42a:	d1 07       	cpc	r29, r17
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	08 07       	cpc	r16, r24
     430:	a9 f7       	brne	.-22     	; 0x41c <__do_global_ctors+0xa>
     432:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <main>
     436:	0c 94 42 1c 	jmp	0x3884	; 0x3884 <_exit>

0000043a <__bad_interrupt>:
     43a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000043e <attachInterrupt>:

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
     43e:	88 30       	cpi	r24, 0x08	; 8
     440:	08 f0       	brcs	.+2      	; 0x444 <attachInterrupt+0x6>
     442:	76 c0       	rjmp	.+236    	; 0x530 <attachInterrupt+0xf2>
    intFunc[interruptNum] = userFunc;
     444:	e8 2f       	mov	r30, r24
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	ee 0f       	add	r30, r30
     44a:	ff 1f       	adc	r31, r31
     44c:	e2 5d       	subi	r30, 0xD2	; 210
     44e:	fc 4f       	sbci	r31, 0xFC	; 252
     450:	71 83       	std	Z+1, r23	; 0x01
     452:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
     454:	84 30       	cpi	r24, 0x04	; 4
     456:	29 f1       	breq	.+74     	; 0x4a2 <attachInterrupt+0x64>
     458:	85 30       	cpi	r24, 0x05	; 5
     45a:	38 f4       	brcc	.+14     	; 0x46a <attachInterrupt+0x2c>
     45c:	82 30       	cpi	r24, 0x02	; 2
     45e:	69 f0       	breq	.+26     	; 0x47a <attachInterrupt+0x3c>
     460:	83 30       	cpi	r24, 0x03	; 3
     462:	98 f4       	brcc	.+38     	; 0x48a <attachInterrupt+0x4c>
     464:	81 30       	cpi	r24, 0x01	; 1
     466:	b9 f5       	brne	.+110    	; 0x4d6 <attachInterrupt+0x98>
     468:	3e c0       	rjmp	.+124    	; 0x4e6 <attachInterrupt+0xa8>
     46a:	86 30       	cpi	r24, 0x06	; 6
     46c:	09 f4       	brne	.+2      	; 0x470 <attachInterrupt+0x32>
     46e:	47 c0       	rjmp	.+142    	; 0x4fe <attachInterrupt+0xc0>
     470:	86 30       	cpi	r24, 0x06	; 6
     472:	20 f1       	brcs	.+72     	; 0x4bc <attachInterrupt+0x7e>
     474:	87 30       	cpi	r24, 0x07	; 7
     476:	79 f5       	brne	.+94     	; 0x4d6 <attachInterrupt+0x98>
     478:	4f c0       	rjmp	.+158    	; 0x518 <attachInterrupt+0xda>
		EICRA = (EICRA & ~((1<<ISC10) | (1<<ISC11))) | (mode << ISC10);
		EIMSK |= (1<<INT1);
		break;	
#elif defined(EICRA) && defined(EICRB) && defined(EIMSK)
    case 2:
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
     47a:	80 91 69 00 	lds	r24, 0x0069
     47e:	8c 7f       	andi	r24, 0xFC	; 252
     480:	84 2b       	or	r24, r20
     482:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT0);
     486:	e8 9a       	sbi	0x1d, 0	; 29
      break;
     488:	08 95       	ret
    case 3:
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
     48a:	80 91 69 00 	lds	r24, 0x0069
     48e:	44 0f       	add	r20, r20
     490:	55 1f       	adc	r21, r21
     492:	44 0f       	add	r20, r20
     494:	55 1f       	adc	r21, r21
     496:	83 7f       	andi	r24, 0xF3	; 243
     498:	84 2b       	or	r24, r20
     49a:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT1);
     49e:	e9 9a       	sbi	0x1d, 1	; 29
      break;
     4a0:	08 95       	ret
    case 4:
      EICRA = (EICRA & ~((1 << ISC20) | (1 << ISC21))) | (mode << ISC20);
     4a2:	80 91 69 00 	lds	r24, 0x0069
     4a6:	74 e0       	ldi	r23, 0x04	; 4
     4a8:	44 0f       	add	r20, r20
     4aa:	55 1f       	adc	r21, r21
     4ac:	7a 95       	dec	r23
     4ae:	e1 f7       	brne	.-8      	; 0x4a8 <attachInterrupt+0x6a>
     4b0:	8f 7c       	andi	r24, 0xCF	; 207
     4b2:	84 2b       	or	r24, r20
     4b4:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT2);
     4b8:	ea 9a       	sbi	0x1d, 2	; 29
      break;
     4ba:	08 95       	ret
    case 5:
      EICRA = (EICRA & ~((1 << ISC30) | (1 << ISC31))) | (mode << ISC30);
     4bc:	80 91 69 00 	lds	r24, 0x0069
     4c0:	66 e0       	ldi	r22, 0x06	; 6
     4c2:	44 0f       	add	r20, r20
     4c4:	55 1f       	adc	r21, r21
     4c6:	6a 95       	dec	r22
     4c8:	e1 f7       	brne	.-8      	; 0x4c2 <attachInterrupt+0x84>
     4ca:	8f 73       	andi	r24, 0x3F	; 63
     4cc:	84 2b       	or	r24, r20
     4ce:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT3);
     4d2:	eb 9a       	sbi	0x1d, 3	; 29
      break;
     4d4:	08 95       	ret
    case 0:
      EICRB = (EICRB & ~((1 << ISC40) | (1 << ISC41))) | (mode << ISC40);
     4d6:	80 91 6a 00 	lds	r24, 0x006A
     4da:	8c 7f       	andi	r24, 0xFC	; 252
     4dc:	84 2b       	or	r24, r20
     4de:	80 93 6a 00 	sts	0x006A, r24
      EIMSK |= (1 << INT4);
     4e2:	ec 9a       	sbi	0x1d, 4	; 29
      break;
     4e4:	08 95       	ret
    case 1:
      EICRB = (EICRB & ~((1 << ISC50) | (1 << ISC51))) | (mode << ISC50);
     4e6:	80 91 6a 00 	lds	r24, 0x006A
     4ea:	44 0f       	add	r20, r20
     4ec:	55 1f       	adc	r21, r21
     4ee:	44 0f       	add	r20, r20
     4f0:	55 1f       	adc	r21, r21
     4f2:	83 7f       	andi	r24, 0xF3	; 243
     4f4:	84 2b       	or	r24, r20
     4f6:	80 93 6a 00 	sts	0x006A, r24
      EIMSK |= (1 << INT5);
     4fa:	ed 9a       	sbi	0x1d, 5	; 29
      break;
     4fc:	08 95       	ret
    case 6:
      EICRB = (EICRB & ~((1 << ISC60) | (1 << ISC61))) | (mode << ISC60);
     4fe:	80 91 6a 00 	lds	r24, 0x006A
     502:	24 e0       	ldi	r18, 0x04	; 4
     504:	44 0f       	add	r20, r20
     506:	55 1f       	adc	r21, r21
     508:	2a 95       	dec	r18
     50a:	e1 f7       	brne	.-8      	; 0x504 <attachInterrupt+0xc6>
     50c:	8f 7c       	andi	r24, 0xCF	; 207
     50e:	84 2b       	or	r24, r20
     510:	80 93 6a 00 	sts	0x006A, r24
      EIMSK |= (1 << INT6);
     514:	ee 9a       	sbi	0x1d, 6	; 29
      break;
     516:	08 95       	ret
    case 7:
      EICRB = (EICRB & ~((1 << ISC70) | (1 << ISC71))) | (mode << ISC70);
     518:	80 91 6a 00 	lds	r24, 0x006A
     51c:	96 e0       	ldi	r25, 0x06	; 6
     51e:	44 0f       	add	r20, r20
     520:	55 1f       	adc	r21, r21
     522:	9a 95       	dec	r25
     524:	e1 f7       	brne	.-8      	; 0x51e <attachInterrupt+0xe0>
     526:	8f 73       	andi	r24, 0x3F	; 63
     528:	84 2b       	or	r24, r20
     52a:	80 93 6a 00 	sts	0x006A, r24
      EIMSK |= (1 << INT7);
     52e:	ef 9a       	sbi	0x1d, 7	; 29
     530:	08 95       	ret

00000532 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
     532:	88 30       	cpi	r24, 0x08	; 8
     534:	48 f5       	brcc	.+82     	; 0x588 <detachInterrupt+0x56>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
     536:	84 30       	cpi	r24, 0x04	; 4
     538:	a1 f0       	breq	.+40     	; 0x562 <detachInterrupt+0x30>
     53a:	85 30       	cpi	r24, 0x05	; 5
     53c:	38 f4       	brcc	.+14     	; 0x54c <detachInterrupt+0x1a>
     53e:	82 30       	cpi	r24, 0x02	; 2
     540:	61 f0       	breq	.+24     	; 0x55a <detachInterrupt+0x28>
     542:	83 30       	cpi	r24, 0x03	; 3
     544:	60 f4       	brcc	.+24     	; 0x55e <detachInterrupt+0x2c>
     546:	81 30       	cpi	r24, 0x01	; 1
     548:	81 f4       	brne	.+32     	; 0x56a <detachInterrupt+0x38>
     54a:	11 c0       	rjmp	.+34     	; 0x56e <detachInterrupt+0x3c>
     54c:	86 30       	cpi	r24, 0x06	; 6
     54e:	89 f0       	breq	.+34     	; 0x572 <detachInterrupt+0x40>
     550:	86 30       	cpi	r24, 0x06	; 6
     552:	48 f0       	brcs	.+18     	; 0x566 <detachInterrupt+0x34>
     554:	87 30       	cpi	r24, 0x07	; 7
     556:	49 f4       	brne	.+18     	; 0x56a <detachInterrupt+0x38>
     558:	0e c0       	rjmp	.+28     	; 0x576 <detachInterrupt+0x44>
	case 1:
		EIMSK &= ~(1<<INT1);
		break;		
#elif defined(EICRA) && defined(EICRB) && defined(EIMSK)
    case 2:
      EIMSK &= ~(1 << INT0);
     55a:	e8 98       	cbi	0x1d, 0	; 29
      break;
     55c:	0d c0       	rjmp	.+26     	; 0x578 <detachInterrupt+0x46>
    case 3:
      EIMSK &= ~(1 << INT1);
     55e:	e9 98       	cbi	0x1d, 1	; 29
      break;
     560:	0b c0       	rjmp	.+22     	; 0x578 <detachInterrupt+0x46>
    case 4:
      EIMSK &= ~(1 << INT2);
     562:	ea 98       	cbi	0x1d, 2	; 29
      break;
     564:	09 c0       	rjmp	.+18     	; 0x578 <detachInterrupt+0x46>
    case 5:
      EIMSK &= ~(1 << INT3);
     566:	eb 98       	cbi	0x1d, 3	; 29
      break;
     568:	07 c0       	rjmp	.+14     	; 0x578 <detachInterrupt+0x46>
    case 0:
      EIMSK &= ~(1 << INT4);
     56a:	ec 98       	cbi	0x1d, 4	; 29
      break;
     56c:	05 c0       	rjmp	.+10     	; 0x578 <detachInterrupt+0x46>
    case 1:
      EIMSK &= ~(1 << INT5);
     56e:	ed 98       	cbi	0x1d, 5	; 29
      break;
     570:	03 c0       	rjmp	.+6      	; 0x578 <detachInterrupt+0x46>
    case 6:
      EIMSK &= ~(1 << INT6);
     572:	ee 98       	cbi	0x1d, 6	; 29
      break;
     574:	01 c0       	rjmp	.+2      	; 0x578 <detachInterrupt+0x46>
    case 7:
      EIMSK &= ~(1 << INT7);
     576:	ef 98       	cbi	0x1d, 7	; 29
    #endif
      break;
#endif
    }
      
    intFunc[interruptNum] = 0;
     578:	e8 2f       	mov	r30, r24
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	ee 0f       	add	r30, r30
     57e:	ff 1f       	adc	r31, r31
     580:	e2 5d       	subi	r30, 0xD2	; 210
     582:	fc 4f       	sbci	r31, 0xFC	; 252
     584:	11 82       	std	Z+1, r1	; 0x01
     586:	10 82       	st	Z, r1
     588:	08 95       	ret

0000058a <__vector_1>:
		intFunc[EXTERNAL_INT_1]();
}

#elif defined(EICRA) && defined(EICRB)

SIGNAL(INT0_vect) {
     58a:	1f 92       	push	r1
     58c:	0f 92       	push	r0
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	0f 92       	push	r0
     592:	0b b6       	in	r0, 0x3b	; 59
     594:	0f 92       	push	r0
     596:	11 24       	eor	r1, r1
     598:	2f 93       	push	r18
     59a:	3f 93       	push	r19
     59c:	4f 93       	push	r20
     59e:	5f 93       	push	r21
     5a0:	6f 93       	push	r22
     5a2:	7f 93       	push	r23
     5a4:	8f 93       	push	r24
     5a6:	9f 93       	push	r25
     5a8:	af 93       	push	r26
     5aa:	bf 93       	push	r27
     5ac:	ef 93       	push	r30
     5ae:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_2])
     5b0:	80 91 32 03 	lds	r24, 0x0332
     5b4:	90 91 33 03 	lds	r25, 0x0333
     5b8:	00 97       	sbiw	r24, 0x00	; 0
     5ba:	29 f0       	breq	.+10     	; 0x5c6 <__vector_1+0x3c>
    intFunc[EXTERNAL_INT_2]();
     5bc:	e0 91 32 03 	lds	r30, 0x0332
     5c0:	f0 91 33 03 	lds	r31, 0x0333
     5c4:	19 95       	eicall
}
     5c6:	ff 91       	pop	r31
     5c8:	ef 91       	pop	r30
     5ca:	bf 91       	pop	r27
     5cc:	af 91       	pop	r26
     5ce:	9f 91       	pop	r25
     5d0:	8f 91       	pop	r24
     5d2:	7f 91       	pop	r23
     5d4:	6f 91       	pop	r22
     5d6:	5f 91       	pop	r21
     5d8:	4f 91       	pop	r20
     5da:	3f 91       	pop	r19
     5dc:	2f 91       	pop	r18
     5de:	0f 90       	pop	r0
     5e0:	0b be       	out	0x3b, r0	; 59
     5e2:	0f 90       	pop	r0
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	0f 90       	pop	r0
     5e8:	1f 90       	pop	r1
     5ea:	18 95       	reti

000005ec <__vector_2>:

SIGNAL(INT1_vect) {
     5ec:	1f 92       	push	r1
     5ee:	0f 92       	push	r0
     5f0:	0f b6       	in	r0, 0x3f	; 63
     5f2:	0f 92       	push	r0
     5f4:	0b b6       	in	r0, 0x3b	; 59
     5f6:	0f 92       	push	r0
     5f8:	11 24       	eor	r1, r1
     5fa:	2f 93       	push	r18
     5fc:	3f 93       	push	r19
     5fe:	4f 93       	push	r20
     600:	5f 93       	push	r21
     602:	6f 93       	push	r22
     604:	7f 93       	push	r23
     606:	8f 93       	push	r24
     608:	9f 93       	push	r25
     60a:	af 93       	push	r26
     60c:	bf 93       	push	r27
     60e:	ef 93       	push	r30
     610:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_3])
     612:	80 91 34 03 	lds	r24, 0x0334
     616:	90 91 35 03 	lds	r25, 0x0335
     61a:	00 97       	sbiw	r24, 0x00	; 0
     61c:	29 f0       	breq	.+10     	; 0x628 <__vector_2+0x3c>
    intFunc[EXTERNAL_INT_3]();
     61e:	e0 91 34 03 	lds	r30, 0x0334
     622:	f0 91 35 03 	lds	r31, 0x0335
     626:	19 95       	eicall
}
     628:	ff 91       	pop	r31
     62a:	ef 91       	pop	r30
     62c:	bf 91       	pop	r27
     62e:	af 91       	pop	r26
     630:	9f 91       	pop	r25
     632:	8f 91       	pop	r24
     634:	7f 91       	pop	r23
     636:	6f 91       	pop	r22
     638:	5f 91       	pop	r21
     63a:	4f 91       	pop	r20
     63c:	3f 91       	pop	r19
     63e:	2f 91       	pop	r18
     640:	0f 90       	pop	r0
     642:	0b be       	out	0x3b, r0	; 59
     644:	0f 90       	pop	r0
     646:	0f be       	out	0x3f, r0	; 63
     648:	0f 90       	pop	r0
     64a:	1f 90       	pop	r1
     64c:	18 95       	reti

0000064e <__vector_3>:

SIGNAL(INT2_vect) {
     64e:	1f 92       	push	r1
     650:	0f 92       	push	r0
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	0f 92       	push	r0
     656:	0b b6       	in	r0, 0x3b	; 59
     658:	0f 92       	push	r0
     65a:	11 24       	eor	r1, r1
     65c:	2f 93       	push	r18
     65e:	3f 93       	push	r19
     660:	4f 93       	push	r20
     662:	5f 93       	push	r21
     664:	6f 93       	push	r22
     666:	7f 93       	push	r23
     668:	8f 93       	push	r24
     66a:	9f 93       	push	r25
     66c:	af 93       	push	r26
     66e:	bf 93       	push	r27
     670:	ef 93       	push	r30
     672:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_4])
     674:	80 91 36 03 	lds	r24, 0x0336
     678:	90 91 37 03 	lds	r25, 0x0337
     67c:	00 97       	sbiw	r24, 0x00	; 0
     67e:	29 f0       	breq	.+10     	; 0x68a <__vector_3+0x3c>
    intFunc[EXTERNAL_INT_4]();
     680:	e0 91 36 03 	lds	r30, 0x0336
     684:	f0 91 37 03 	lds	r31, 0x0337
     688:	19 95       	eicall
}
     68a:	ff 91       	pop	r31
     68c:	ef 91       	pop	r30
     68e:	bf 91       	pop	r27
     690:	af 91       	pop	r26
     692:	9f 91       	pop	r25
     694:	8f 91       	pop	r24
     696:	7f 91       	pop	r23
     698:	6f 91       	pop	r22
     69a:	5f 91       	pop	r21
     69c:	4f 91       	pop	r20
     69e:	3f 91       	pop	r19
     6a0:	2f 91       	pop	r18
     6a2:	0f 90       	pop	r0
     6a4:	0b be       	out	0x3b, r0	; 59
     6a6:	0f 90       	pop	r0
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	0f 90       	pop	r0
     6ac:	1f 90       	pop	r1
     6ae:	18 95       	reti

000006b0 <__vector_4>:

SIGNAL(INT3_vect) {
     6b0:	1f 92       	push	r1
     6b2:	0f 92       	push	r0
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	0f 92       	push	r0
     6b8:	0b b6       	in	r0, 0x3b	; 59
     6ba:	0f 92       	push	r0
     6bc:	11 24       	eor	r1, r1
     6be:	2f 93       	push	r18
     6c0:	3f 93       	push	r19
     6c2:	4f 93       	push	r20
     6c4:	5f 93       	push	r21
     6c6:	6f 93       	push	r22
     6c8:	7f 93       	push	r23
     6ca:	8f 93       	push	r24
     6cc:	9f 93       	push	r25
     6ce:	af 93       	push	r26
     6d0:	bf 93       	push	r27
     6d2:	ef 93       	push	r30
     6d4:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_5])
     6d6:	80 91 38 03 	lds	r24, 0x0338
     6da:	90 91 39 03 	lds	r25, 0x0339
     6de:	00 97       	sbiw	r24, 0x00	; 0
     6e0:	29 f0       	breq	.+10     	; 0x6ec <__vector_4+0x3c>
    intFunc[EXTERNAL_INT_5]();
     6e2:	e0 91 38 03 	lds	r30, 0x0338
     6e6:	f0 91 39 03 	lds	r31, 0x0339
     6ea:	19 95       	eicall
}
     6ec:	ff 91       	pop	r31
     6ee:	ef 91       	pop	r30
     6f0:	bf 91       	pop	r27
     6f2:	af 91       	pop	r26
     6f4:	9f 91       	pop	r25
     6f6:	8f 91       	pop	r24
     6f8:	7f 91       	pop	r23
     6fa:	6f 91       	pop	r22
     6fc:	5f 91       	pop	r21
     6fe:	4f 91       	pop	r20
     700:	3f 91       	pop	r19
     702:	2f 91       	pop	r18
     704:	0f 90       	pop	r0
     706:	0b be       	out	0x3b, r0	; 59
     708:	0f 90       	pop	r0
     70a:	0f be       	out	0x3f, r0	; 63
     70c:	0f 90       	pop	r0
     70e:	1f 90       	pop	r1
     710:	18 95       	reti

00000712 <__vector_5>:

SIGNAL(INT4_vect) {
     712:	1f 92       	push	r1
     714:	0f 92       	push	r0
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	0f 92       	push	r0
     71a:	0b b6       	in	r0, 0x3b	; 59
     71c:	0f 92       	push	r0
     71e:	11 24       	eor	r1, r1
     720:	2f 93       	push	r18
     722:	3f 93       	push	r19
     724:	4f 93       	push	r20
     726:	5f 93       	push	r21
     728:	6f 93       	push	r22
     72a:	7f 93       	push	r23
     72c:	8f 93       	push	r24
     72e:	9f 93       	push	r25
     730:	af 93       	push	r26
     732:	bf 93       	push	r27
     734:	ef 93       	push	r30
     736:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
     738:	80 91 2e 03 	lds	r24, 0x032E
     73c:	90 91 2f 03 	lds	r25, 0x032F
     740:	00 97       	sbiw	r24, 0x00	; 0
     742:	29 f0       	breq	.+10     	; 0x74e <__vector_5+0x3c>
    intFunc[EXTERNAL_INT_0]();
     744:	e0 91 2e 03 	lds	r30, 0x032E
     748:	f0 91 2f 03 	lds	r31, 0x032F
     74c:	19 95       	eicall
}
     74e:	ff 91       	pop	r31
     750:	ef 91       	pop	r30
     752:	bf 91       	pop	r27
     754:	af 91       	pop	r26
     756:	9f 91       	pop	r25
     758:	8f 91       	pop	r24
     75a:	7f 91       	pop	r23
     75c:	6f 91       	pop	r22
     75e:	5f 91       	pop	r21
     760:	4f 91       	pop	r20
     762:	3f 91       	pop	r19
     764:	2f 91       	pop	r18
     766:	0f 90       	pop	r0
     768:	0b be       	out	0x3b, r0	; 59
     76a:	0f 90       	pop	r0
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	0f 90       	pop	r0
     770:	1f 90       	pop	r1
     772:	18 95       	reti

00000774 <__vector_6>:

SIGNAL(INT5_vect) {
     774:	1f 92       	push	r1
     776:	0f 92       	push	r0
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	0f 92       	push	r0
     77c:	0b b6       	in	r0, 0x3b	; 59
     77e:	0f 92       	push	r0
     780:	11 24       	eor	r1, r1
     782:	2f 93       	push	r18
     784:	3f 93       	push	r19
     786:	4f 93       	push	r20
     788:	5f 93       	push	r21
     78a:	6f 93       	push	r22
     78c:	7f 93       	push	r23
     78e:	8f 93       	push	r24
     790:	9f 93       	push	r25
     792:	af 93       	push	r26
     794:	bf 93       	push	r27
     796:	ef 93       	push	r30
     798:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
     79a:	80 91 30 03 	lds	r24, 0x0330
     79e:	90 91 31 03 	lds	r25, 0x0331
     7a2:	00 97       	sbiw	r24, 0x00	; 0
     7a4:	29 f0       	breq	.+10     	; 0x7b0 <__vector_6+0x3c>
    intFunc[EXTERNAL_INT_1]();
     7a6:	e0 91 30 03 	lds	r30, 0x0330
     7aa:	f0 91 31 03 	lds	r31, 0x0331
     7ae:	19 95       	eicall
}
     7b0:	ff 91       	pop	r31
     7b2:	ef 91       	pop	r30
     7b4:	bf 91       	pop	r27
     7b6:	af 91       	pop	r26
     7b8:	9f 91       	pop	r25
     7ba:	8f 91       	pop	r24
     7bc:	7f 91       	pop	r23
     7be:	6f 91       	pop	r22
     7c0:	5f 91       	pop	r21
     7c2:	4f 91       	pop	r20
     7c4:	3f 91       	pop	r19
     7c6:	2f 91       	pop	r18
     7c8:	0f 90       	pop	r0
     7ca:	0b be       	out	0x3b, r0	; 59
     7cc:	0f 90       	pop	r0
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	0f 90       	pop	r0
     7d2:	1f 90       	pop	r1
     7d4:	18 95       	reti

000007d6 <__vector_7>:

SIGNAL(INT6_vect) {
     7d6:	1f 92       	push	r1
     7d8:	0f 92       	push	r0
     7da:	0f b6       	in	r0, 0x3f	; 63
     7dc:	0f 92       	push	r0
     7de:	0b b6       	in	r0, 0x3b	; 59
     7e0:	0f 92       	push	r0
     7e2:	11 24       	eor	r1, r1
     7e4:	2f 93       	push	r18
     7e6:	3f 93       	push	r19
     7e8:	4f 93       	push	r20
     7ea:	5f 93       	push	r21
     7ec:	6f 93       	push	r22
     7ee:	7f 93       	push	r23
     7f0:	8f 93       	push	r24
     7f2:	9f 93       	push	r25
     7f4:	af 93       	push	r26
     7f6:	bf 93       	push	r27
     7f8:	ef 93       	push	r30
     7fa:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_6])
     7fc:	80 91 3a 03 	lds	r24, 0x033A
     800:	90 91 3b 03 	lds	r25, 0x033B
     804:	00 97       	sbiw	r24, 0x00	; 0
     806:	29 f0       	breq	.+10     	; 0x812 <__vector_7+0x3c>
    intFunc[EXTERNAL_INT_6]();
     808:	e0 91 3a 03 	lds	r30, 0x033A
     80c:	f0 91 3b 03 	lds	r31, 0x033B
     810:	19 95       	eicall
}
     812:	ff 91       	pop	r31
     814:	ef 91       	pop	r30
     816:	bf 91       	pop	r27
     818:	af 91       	pop	r26
     81a:	9f 91       	pop	r25
     81c:	8f 91       	pop	r24
     81e:	7f 91       	pop	r23
     820:	6f 91       	pop	r22
     822:	5f 91       	pop	r21
     824:	4f 91       	pop	r20
     826:	3f 91       	pop	r19
     828:	2f 91       	pop	r18
     82a:	0f 90       	pop	r0
     82c:	0b be       	out	0x3b, r0	; 59
     82e:	0f 90       	pop	r0
     830:	0f be       	out	0x3f, r0	; 63
     832:	0f 90       	pop	r0
     834:	1f 90       	pop	r1
     836:	18 95       	reti

00000838 <__vector_8>:

SIGNAL(INT7_vect) {
     838:	1f 92       	push	r1
     83a:	0f 92       	push	r0
     83c:	0f b6       	in	r0, 0x3f	; 63
     83e:	0f 92       	push	r0
     840:	0b b6       	in	r0, 0x3b	; 59
     842:	0f 92       	push	r0
     844:	11 24       	eor	r1, r1
     846:	2f 93       	push	r18
     848:	3f 93       	push	r19
     84a:	4f 93       	push	r20
     84c:	5f 93       	push	r21
     84e:	6f 93       	push	r22
     850:	7f 93       	push	r23
     852:	8f 93       	push	r24
     854:	9f 93       	push	r25
     856:	af 93       	push	r26
     858:	bf 93       	push	r27
     85a:	ef 93       	push	r30
     85c:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
     85e:	80 91 3c 03 	lds	r24, 0x033C
     862:	90 91 3d 03 	lds	r25, 0x033D
     866:	00 97       	sbiw	r24, 0x00	; 0
     868:	29 f0       	breq	.+10     	; 0x874 <__vector_8+0x3c>
    intFunc[EXTERNAL_INT_7]();
     86a:	e0 91 3c 03 	lds	r30, 0x033C
     86e:	f0 91 3d 03 	lds	r31, 0x033D
     872:	19 95       	eicall
}
     874:	ff 91       	pop	r31
     876:	ef 91       	pop	r30
     878:	bf 91       	pop	r27
     87a:	af 91       	pop	r26
     87c:	9f 91       	pop	r25
     87e:	8f 91       	pop	r24
     880:	7f 91       	pop	r23
     882:	6f 91       	pop	r22
     884:	5f 91       	pop	r21
     886:	4f 91       	pop	r20
     888:	3f 91       	pop	r19
     88a:	2f 91       	pop	r18
     88c:	0f 90       	pop	r0
     88e:	0b be       	out	0x3b, r0	; 59
     890:	0f 90       	pop	r0
     892:	0f be       	out	0x3f, r0	; 63
     894:	0f 90       	pop	r0
     896:	1f 90       	pop	r1
     898:	18 95       	reti

0000089a <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
     89a:	1f 92       	push	r1
     89c:	0f 92       	push	r0
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	0f 92       	push	r0
     8a2:	11 24       	eor	r1, r1
     8a4:	2f 93       	push	r18
     8a6:	3f 93       	push	r19
     8a8:	8f 93       	push	r24
     8aa:	9f 93       	push	r25
     8ac:	af 93       	push	r26
     8ae:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     8b0:	80 91 42 03 	lds	r24, 0x0342
     8b4:	90 91 43 03 	lds	r25, 0x0343
     8b8:	a0 91 44 03 	lds	r26, 0x0344
     8bc:	b0 91 45 03 	lds	r27, 0x0345
	unsigned char f = timer0_fract;
     8c0:	30 91 46 03 	lds	r19, 0x0346

	m += MILLIS_INC;
     8c4:	01 96       	adiw	r24, 0x01	; 1
     8c6:	a1 1d       	adc	r26, r1
     8c8:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
     8ca:	23 2f       	mov	r18, r19
     8cc:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
     8ce:	2d 37       	cpi	r18, 0x7D	; 125
     8d0:	20 f0       	brcs	.+8      	; 0x8da <__vector_23+0x40>
		f -= FRACT_MAX;
     8d2:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
     8d4:	01 96       	adiw	r24, 0x01	; 1
     8d6:	a1 1d       	adc	r26, r1
     8d8:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     8da:	20 93 46 03 	sts	0x0346, r18
	timer0_millis = m;
     8de:	80 93 42 03 	sts	0x0342, r24
     8e2:	90 93 43 03 	sts	0x0343, r25
     8e6:	a0 93 44 03 	sts	0x0344, r26
     8ea:	b0 93 45 03 	sts	0x0345, r27
	timer0_overflow_count++;
     8ee:	80 91 3e 03 	lds	r24, 0x033E
     8f2:	90 91 3f 03 	lds	r25, 0x033F
     8f6:	a0 91 40 03 	lds	r26, 0x0340
     8fa:	b0 91 41 03 	lds	r27, 0x0341
     8fe:	01 96       	adiw	r24, 0x01	; 1
     900:	a1 1d       	adc	r26, r1
     902:	b1 1d       	adc	r27, r1
     904:	80 93 3e 03 	sts	0x033E, r24
     908:	90 93 3f 03 	sts	0x033F, r25
     90c:	a0 93 40 03 	sts	0x0340, r26
     910:	b0 93 41 03 	sts	0x0341, r27
}
     914:	bf 91       	pop	r27
     916:	af 91       	pop	r26
     918:	9f 91       	pop	r25
     91a:	8f 91       	pop	r24
     91c:	3f 91       	pop	r19
     91e:	2f 91       	pop	r18
     920:	0f 90       	pop	r0
     922:	0f be       	out	0x3f, r0	; 63
     924:	0f 90       	pop	r0
     926:	1f 90       	pop	r1
     928:	18 95       	reti

0000092a <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     92a:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     92c:	f8 94       	cli
	m = timer0_millis;
     92e:	20 91 42 03 	lds	r18, 0x0342
     932:	30 91 43 03 	lds	r19, 0x0343
     936:	40 91 44 03 	lds	r20, 0x0344
     93a:	50 91 45 03 	lds	r21, 0x0345
	SREG = oldSREG;
     93e:	8f bf       	out	0x3f, r24	; 63

	return m;
}
     940:	b9 01       	movw	r22, r18
     942:	ca 01       	movw	r24, r20
     944:	08 95       	ret

00000946 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     946:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
     948:	f8 94       	cli
	m = timer0_overflow_count;
     94a:	20 91 3e 03 	lds	r18, 0x033E
     94e:	30 91 3f 03 	lds	r19, 0x033F
     952:	40 91 40 03 	lds	r20, 0x0340
     956:	50 91 41 03 	lds	r21, 0x0341
#if defined(TCNT0)
	t = TCNT0;
     95a:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     95c:	a8 9b       	sbis	0x15, 0	; 21
     95e:	06 c0       	rjmp	.+12     	; 0x96c <micros+0x26>
     960:	8f 3f       	cpi	r24, 0xFF	; 255
     962:	21 f0       	breq	.+8      	; 0x96c <micros+0x26>
		m++;
     964:	2f 5f       	subi	r18, 0xFF	; 255
     966:	3f 4f       	sbci	r19, 0xFF	; 255
     968:	4f 4f       	sbci	r20, 0xFF	; 255
     96a:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     96c:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     96e:	54 2f       	mov	r21, r20
     970:	43 2f       	mov	r20, r19
     972:	32 2f       	mov	r19, r18
     974:	22 27       	eor	r18, r18
     976:	28 0f       	add	r18, r24
     978:	31 1d       	adc	r19, r1
     97a:	41 1d       	adc	r20, r1
     97c:	51 1d       	adc	r21, r1
     97e:	82 e0       	ldi	r24, 0x02	; 2
     980:	22 0f       	add	r18, r18
     982:	33 1f       	adc	r19, r19
     984:	44 1f       	adc	r20, r20
     986:	55 1f       	adc	r21, r21
     988:	8a 95       	dec	r24
     98a:	d1 f7       	brne	.-12     	; 0x980 <micros+0x3a>
}
     98c:	b9 01       	movw	r22, r18
     98e:	ca 01       	movw	r24, r20
     990:	08 95       	ret

00000992 <delay>:

void delay(unsigned long ms)
{
     992:	ef 92       	push	r14
     994:	ff 92       	push	r15
     996:	0f 93       	push	r16
     998:	1f 93       	push	r17
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	7b 01       	movw	r14, r22
     9a0:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
     9a2:	0e 94 a3 04 	call	0x946	; 0x946 <micros>
     9a6:	eb 01       	movw	r28, r22

	while (ms > 0) {
     9a8:	0f c0       	rjmp	.+30     	; 0x9c8 <delay+0x36>
		if (((uint16_t)micros() - start) >= 1000) {
     9aa:	0e 94 a3 04 	call	0x946	; 0x946 <micros>
     9ae:	6c 1b       	sub	r22, r28
     9b0:	7d 0b       	sbc	r23, r29
     9b2:	83 e0       	ldi	r24, 0x03	; 3
     9b4:	68 3e       	cpi	r22, 0xE8	; 232
     9b6:	78 07       	cpc	r23, r24
     9b8:	38 f0       	brcs	.+14     	; 0x9c8 <delay+0x36>
			ms--;
     9ba:	08 94       	sec
     9bc:	e1 08       	sbc	r14, r1
     9be:	f1 08       	sbc	r15, r1
     9c0:	01 09       	sbc	r16, r1
     9c2:	11 09       	sbc	r17, r1
			start += 1000;
     9c4:	c8 51       	subi	r28, 0x18	; 24
     9c6:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
     9c8:	e1 14       	cp	r14, r1
     9ca:	f1 04       	cpc	r15, r1
     9cc:	01 05       	cpc	r16, r1
     9ce:	11 05       	cpc	r17, r1
     9d0:	61 f7       	brne	.-40     	; 0x9aa <delay+0x18>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	ff 90       	pop	r15
     9dc:	ef 90       	pop	r14
     9de:	08 95       	ret

000009e0 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
     9e0:	01 97       	sbiw	r24, 0x01	; 1
     9e2:	39 f0       	breq	.+14     	; 0x9f2 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
     9e4:	88 0f       	add	r24, r24
     9e6:	99 1f       	adc	r25, r25
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
     9ec:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
     9ee:	01 97       	sbiw	r24, 0x01	; 1
     9f0:	f1 f7       	brne	.-4      	; 0x9ee <delayMicroseconds+0xe>
     9f2:	08 95       	ret

000009f4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     9f4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     9f6:	84 b5       	in	r24, 0x24	; 36
     9f8:	82 60       	ori	r24, 0x02	; 2
     9fa:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     9fc:	84 b5       	in	r24, 0x24	; 36
     9fe:	81 60       	ori	r24, 0x01	; 1
     a00:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     a02:	85 b5       	in	r24, 0x25	; 37
     a04:	82 60       	ori	r24, 0x02	; 2
     a06:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     a08:	85 b5       	in	r24, 0x25	; 37
     a0a:	81 60       	ori	r24, 0x01	; 1
     a0c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     a0e:	ee e6       	ldi	r30, 0x6E	; 110
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	80 81       	ld	r24, Z
     a14:	81 60       	ori	r24, 0x01	; 1
     a16:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     a18:	e1 e8       	ldi	r30, 0x81	; 129
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     a1e:	80 81       	ld	r24, Z
     a20:	82 60       	ori	r24, 0x02	; 2
     a22:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     a24:	80 81       	ld	r24, Z
     a26:	81 60       	ori	r24, 0x01	; 1
     a28:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     a2a:	e0 e8       	ldi	r30, 0x80	; 128
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	80 81       	ld	r24, Z
     a30:	81 60       	ori	r24, 0x01	; 1
     a32:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     a34:	e1 eb       	ldi	r30, 0xB1	; 177
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	80 81       	ld	r24, Z
     a3a:	84 60       	ori	r24, 0x04	; 4
     a3c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     a3e:	e0 eb       	ldi	r30, 0xB0	; 176
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	80 81       	ld	r24, Z
     a44:	81 60       	ori	r24, 0x01	; 1
     a46:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     a48:	e1 e9       	ldi	r30, 0x91	; 145
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	80 81       	ld	r24, Z
     a4e:	82 60       	ori	r24, 0x02	; 2
     a50:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     a52:	80 81       	ld	r24, Z
     a54:	81 60       	ori	r24, 0x01	; 1
     a56:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     a58:	e0 e9       	ldi	r30, 0x90	; 144
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	80 81       	ld	r24, Z
     a5e:	81 60       	ori	r24, 0x01	; 1
     a60:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     a62:	e1 ea       	ldi	r30, 0xA1	; 161
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	80 81       	ld	r24, Z
     a68:	82 60       	ori	r24, 0x02	; 2
     a6a:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     a6c:	80 81       	ld	r24, Z
     a6e:	81 60       	ori	r24, 0x01	; 1
     a70:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     a72:	e0 ea       	ldi	r30, 0xA0	; 160
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	80 81       	ld	r24, Z
     a78:	81 60       	ori	r24, 0x01	; 1
     a7a:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     a7c:	e1 e2       	ldi	r30, 0x21	; 33
     a7e:	f1 e0       	ldi	r31, 0x01	; 1
     a80:	80 81       	ld	r24, Z
     a82:	82 60       	ori	r24, 0x02	; 2
     a84:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
     a86:	80 81       	ld	r24, Z
     a88:	81 60       	ori	r24, 0x01	; 1
     a8a:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
     a8c:	e0 e2       	ldi	r30, 0x20	; 32
     a8e:	f1 e0       	ldi	r31, 0x01	; 1
     a90:	80 81       	ld	r24, Z
     a92:	81 60       	ori	r24, 0x01	; 1
     a94:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
     a96:	ea e7       	ldi	r30, 0x7A	; 122
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 81       	ld	r24, Z
     a9c:	84 60       	ori	r24, 0x04	; 4
     a9e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
     aa0:	80 81       	ld	r24, Z
     aa2:	82 60       	ori	r24, 0x02	; 2
     aa4:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
     aa6:	80 81       	ld	r24, Z
     aa8:	81 60       	ori	r24, 0x01	; 1
     aaa:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     aac:	80 81       	ld	r24, Z
     aae:	80 68       	ori	r24, 0x80	; 128
     ab0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     ab2:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
     ab6:	08 95       	ret

00000ab8 <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
     ab8:	80 93 00 02 	sts	0x0200, r24
}
     abc:	08 95       	ret

00000abe <analogRead>:
int analogRead(uint8_t pin)
{
	uint8_t low, high;

#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
     abe:	86 33       	cpi	r24, 0x36	; 54
     ac0:	08 f0       	brcs	.+2      	; 0xac4 <analogRead+0x6>
     ac2:	86 53       	subi	r24, 0x36	; 54
	pin = analogPinToChannel(pin);
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
#elif defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
     ac4:	90 91 7b 00 	lds	r25, 0x007B
     ac8:	28 2f       	mov	r18, r24
     aca:	26 95       	lsr	r18
     acc:	26 95       	lsr	r18
     ace:	26 95       	lsr	r18
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	21 70       	andi	r18, 0x01	; 1
     ad4:	30 70       	andi	r19, 0x00	; 0
     ad6:	43 e0       	ldi	r20, 0x03	; 3
     ad8:	22 0f       	add	r18, r18
     ada:	33 1f       	adc	r19, r19
     adc:	4a 95       	dec	r20
     ade:	e1 f7       	brne	.-8      	; 0xad8 <analogRead+0x1a>
     ae0:	97 7f       	andi	r25, 0xF7	; 247
     ae2:	92 2b       	or	r25, r18
     ae4:	90 93 7b 00 	sts	0x007B, r25
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
     ae8:	87 70       	andi	r24, 0x07	; 7
     aea:	90 91 00 02 	lds	r25, 0x0200
     aee:	92 95       	swap	r25
     af0:	99 0f       	add	r25, r25
     af2:	99 0f       	add	r25, r25
     af4:	90 7c       	andi	r25, 0xC0	; 192
     af6:	98 2b       	or	r25, r24
     af8:	90 93 7c 00 	sts	0x007C, r25
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
     afc:	80 91 7a 00 	lds	r24, 0x007A
     b00:	80 64       	ori	r24, 0x40	; 64
     b02:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
     b06:	80 91 7a 00 	lds	r24, 0x007A
     b0a:	86 fd       	sbrc	r24, 6
     b0c:	fc cf       	rjmp	.-8      	; 0xb06 <analogRead+0x48>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
     b0e:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
     b12:	30 91 79 00 	lds	r19, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
     b16:	93 2f       	mov	r25, r19
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	28 2b       	or	r18, r24
     b1e:	39 2b       	or	r19, r25
}
     b20:	c9 01       	movw	r24, r18
     b22:	08 95       	ret

00000b24 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
     b24:	1f 93       	push	r17
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	18 2f       	mov	r17, r24
     b2c:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
     b2e:	61 e0       	ldi	r22, 0x01	; 1
     b30:	0e 94 e6 06 	call	0xdcc	; 0xdcc <pinMode>
	if (val == 0)
     b34:	20 97       	sbiw	r28, 0x00	; 0
     b36:	09 f4       	brne	.+2      	; 0xb3a <analogWrite+0x16>
     b38:	ca c0       	rjmp	.+404    	; 0xcce <analogWrite+0x1aa>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
     b3a:	cf 3f       	cpi	r28, 0xFF	; 255
     b3c:	d1 05       	cpc	r29, r1
     b3e:	09 f4       	brne	.+2      	; 0xb42 <analogWrite+0x1e>
     b40:	c9 c0       	rjmp	.+402    	; 0xcd4 <analogWrite+0x1b0>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
     b42:	e1 2f       	mov	r30, r17
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	e1 54       	subi	r30, 0x41	; 65
     b48:	fe 4f       	sbci	r31, 0xFE	; 254
     b4a:	e4 91       	lpm	r30, Z+
     b4c:	e9 30       	cpi	r30, 0x09	; 9
     b4e:	09 f4       	brne	.+2      	; 0xb52 <analogWrite+0x2e>
     b50:	66 c0       	rjmp	.+204    	; 0xc1e <analogWrite+0xfa>
     b52:	ea 30       	cpi	r30, 0x0A	; 10
     b54:	b0 f4       	brcc	.+44     	; 0xb82 <analogWrite+0x5e>
     b56:	e4 30       	cpi	r30, 0x04	; 4
     b58:	f1 f1       	breq	.+124    	; 0xbd6 <analogWrite+0xb2>
     b5a:	e5 30       	cpi	r30, 0x05	; 5
     b5c:	40 f4       	brcc	.+16     	; 0xb6e <analogWrite+0x4a>
     b5e:	e2 30       	cpi	r30, 0x02	; 2
     b60:	59 f1       	breq	.+86     	; 0xbb8 <analogWrite+0x94>
     b62:	e3 30       	cpi	r30, 0x03	; 3
     b64:	70 f5       	brcc	.+92     	; 0xbc2 <analogWrite+0x9e>
     b66:	e1 30       	cpi	r30, 0x01	; 1
     b68:	09 f0       	breq	.+2      	; 0xb6c <analogWrite+0x48>
     b6a:	ae c0       	rjmp	.+348    	; 0xcc8 <analogWrite+0x1a4>
     b6c:	20 c0       	rjmp	.+64     	; 0xbae <analogWrite+0x8a>
     b6e:	e7 30       	cpi	r30, 0x07	; 7
     b70:	09 f4       	brne	.+2      	; 0xb74 <analogWrite+0x50>
     b72:	43 c0       	rjmp	.+134    	; 0xbfa <analogWrite+0xd6>
     b74:	e8 30       	cpi	r30, 0x08	; 8
     b76:	08 f0       	brcs	.+2      	; 0xb7a <analogWrite+0x56>
     b78:	48 c0       	rjmp	.+144    	; 0xc0a <analogWrite+0xe6>
     b7a:	e6 30       	cpi	r30, 0x06	; 6
     b7c:	09 f0       	breq	.+2      	; 0xb80 <analogWrite+0x5c>
     b7e:	a4 c0       	rjmp	.+328    	; 0xcc8 <analogWrite+0x1a4>
     b80:	34 c0       	rjmp	.+104    	; 0xbea <analogWrite+0xc6>
     b82:	ed 30       	cpi	r30, 0x0D	; 13
     b84:	09 f4       	brne	.+2      	; 0xb88 <analogWrite+0x64>
     b86:	78 c0       	rjmp	.+240    	; 0xc78 <analogWrite+0x154>
     b88:	ee 30       	cpi	r30, 0x0E	; 14
     b8a:	38 f4       	brcc	.+14     	; 0xb9a <analogWrite+0x76>
     b8c:	eb 30       	cpi	r30, 0x0B	; 11
     b8e:	09 f4       	brne	.+2      	; 0xb92 <analogWrite+0x6e>
     b90:	5a c0       	rjmp	.+180    	; 0xc46 <analogWrite+0x122>
     b92:	ec 30       	cpi	r30, 0x0C	; 12
     b94:	08 f0       	brcs	.+2      	; 0xb98 <analogWrite+0x74>
     b96:	66 c0       	rjmp	.+204    	; 0xc64 <analogWrite+0x140>
     b98:	4c c0       	rjmp	.+152    	; 0xc32 <analogWrite+0x10e>
     b9a:	e0 31       	cpi	r30, 0x10	; 16
     b9c:	09 f4       	brne	.+2      	; 0xba0 <analogWrite+0x7c>
     b9e:	80 c0       	rjmp	.+256    	; 0xca0 <analogWrite+0x17c>
     ba0:	e1 31       	cpi	r30, 0x11	; 17
     ba2:	09 f4       	brne	.+2      	; 0xba6 <analogWrite+0x82>
     ba4:	87 c0       	rjmp	.+270    	; 0xcb4 <analogWrite+0x190>
     ba6:	ef 30       	cpi	r30, 0x0F	; 15
     ba8:	09 f0       	breq	.+2      	; 0xbac <analogWrite+0x88>
     baa:	8e c0       	rjmp	.+284    	; 0xcc8 <analogWrite+0x1a4>
     bac:	6f c0       	rjmp	.+222    	; 0xc8c <analogWrite+0x168>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
     bae:	84 b5       	in	r24, 0x24	; 36
     bb0:	80 68       	ori	r24, 0x80	; 128
     bb2:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
     bb4:	c7 bd       	out	0x27, r28	; 39
				break;
     bb6:	92 c0       	rjmp	.+292    	; 0xcdc <analogWrite+0x1b8>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
     bb8:	84 b5       	in	r24, 0x24	; 36
     bba:	80 62       	ori	r24, 0x20	; 32
     bbc:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
     bbe:	c8 bd       	out	0x28, r28	; 40
				break;
     bc0:	8d c0       	rjmp	.+282    	; 0xcdc <analogWrite+0x1b8>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
     bc2:	80 91 80 00 	lds	r24, 0x0080
     bc6:	80 68       	ori	r24, 0x80	; 128
     bc8:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
     bcc:	d0 93 89 00 	sts	0x0089, r29
     bd0:	c0 93 88 00 	sts	0x0088, r28
				break;
     bd4:	83 c0       	rjmp	.+262    	; 0xcdc <analogWrite+0x1b8>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
     bd6:	80 91 80 00 	lds	r24, 0x0080
     bda:	80 62       	ori	r24, 0x20	; 32
     bdc:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
     be0:	d0 93 8b 00 	sts	0x008B, r29
     be4:	c0 93 8a 00 	sts	0x008A, r28
				break;
     be8:	79 c0       	rjmp	.+242    	; 0xcdc <analogWrite+0x1b8>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
     bea:	80 91 b0 00 	lds	r24, 0x00B0
     bee:	80 68       	ori	r24, 0x80	; 128
     bf0:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
     bf4:	c0 93 b3 00 	sts	0x00B3, r28
				break;
     bf8:	71 c0       	rjmp	.+226    	; 0xcdc <analogWrite+0x1b8>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
     bfa:	80 91 b0 00 	lds	r24, 0x00B0
     bfe:	80 62       	ori	r24, 0x20	; 32
     c00:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
     c04:	c0 93 b4 00 	sts	0x00B4, r28
				break;
     c08:	69 c0       	rjmp	.+210    	; 0xcdc <analogWrite+0x1b8>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
     c0a:	80 91 90 00 	lds	r24, 0x0090
     c0e:	80 68       	ori	r24, 0x80	; 128
     c10:	80 93 90 00 	sts	0x0090, r24
				OCR3A = val; // set pwm duty
     c14:	d0 93 99 00 	sts	0x0099, r29
     c18:	c0 93 98 00 	sts	0x0098, r28
				break;
     c1c:	5f c0       	rjmp	.+190    	; 0xcdc <analogWrite+0x1b8>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
     c1e:	80 91 90 00 	lds	r24, 0x0090
     c22:	80 62       	ori	r24, 0x20	; 32
     c24:	80 93 90 00 	sts	0x0090, r24
				OCR3B = val; // set pwm duty
     c28:	d0 93 9b 00 	sts	0x009B, r29
     c2c:	c0 93 9a 00 	sts	0x009A, r28
				break;
     c30:	55 c0       	rjmp	.+170    	; 0xcdc <analogWrite+0x1b8>
			#endif

			#if defined(TCCR3A) && defined(COM3C1)
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				sbi(TCCR3A, COM3C1);
     c32:	80 91 90 00 	lds	r24, 0x0090
     c36:	88 60       	ori	r24, 0x08	; 8
     c38:	80 93 90 00 	sts	0x0090, r24
				OCR3C = val; // set pwm duty
     c3c:	d0 93 9d 00 	sts	0x009D, r29
     c40:	c0 93 9c 00 	sts	0x009C, r28
				break;
     c44:	4b c0       	rjmp	.+150    	; 0xcdc <analogWrite+0x1b8>
			#endif

			#if defined(TCCR4A)
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				sbi(TCCR4A, COM4A1);
     c46:	80 91 a0 00 	lds	r24, 0x00A0
     c4a:	80 68       	ori	r24, 0x80	; 128
     c4c:	80 93 a0 00 	sts	0x00A0, r24
				#if defined(COM4A0)		// only used on 32U4
				cbi(TCCR4A, COM4A0);
     c50:	80 91 a0 00 	lds	r24, 0x00A0
     c54:	8f 7b       	andi	r24, 0xBF	; 191
     c56:	80 93 a0 00 	sts	0x00A0, r24
				#endif
				OCR4A = val;	// set pwm duty
     c5a:	d0 93 a9 00 	sts	0x00A9, r29
     c5e:	c0 93 a8 00 	sts	0x00A8, r28
				break;
     c62:	3c c0       	rjmp	.+120    	; 0xcdc <analogWrite+0x1b8>
			#endif
			
			#if defined(TCCR4A) && defined(COM4B1)
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				sbi(TCCR4A, COM4B1);
     c64:	80 91 a0 00 	lds	r24, 0x00A0
     c68:	80 62       	ori	r24, 0x20	; 32
     c6a:	80 93 a0 00 	sts	0x00A0, r24
				OCR4B = val; // set pwm duty
     c6e:	d0 93 ab 00 	sts	0x00AB, r29
     c72:	c0 93 aa 00 	sts	0x00AA, r28
				break;
     c76:	32 c0       	rjmp	.+100    	; 0xcdc <analogWrite+0x1b8>
			#endif

			#if defined(TCCR4A) && defined(COM4C1)
			case TIMER4C:
				// connect pwm to pin on timer 4, channel C
				sbi(TCCR4A, COM4C1);
     c78:	80 91 a0 00 	lds	r24, 0x00A0
     c7c:	88 60       	ori	r24, 0x08	; 8
     c7e:	80 93 a0 00 	sts	0x00A0, r24
				OCR4C = val; // set pwm duty
     c82:	d0 93 ad 00 	sts	0x00AD, r29
     c86:	c0 93 ac 00 	sts	0x00AC, r28
				break;
     c8a:	28 c0       	rjmp	.+80     	; 0xcdc <analogWrite+0x1b8>

							
			#if defined(TCCR5A) && defined(COM5A1)
			case TIMER5A:
				// connect pwm to pin on timer 5, channel A
				sbi(TCCR5A, COM5A1);
     c8c:	80 91 20 01 	lds	r24, 0x0120
     c90:	80 68       	ori	r24, 0x80	; 128
     c92:	80 93 20 01 	sts	0x0120, r24
				OCR5A = val; // set pwm duty
     c96:	d0 93 29 01 	sts	0x0129, r29
     c9a:	c0 93 28 01 	sts	0x0128, r28
				break;
     c9e:	1e c0       	rjmp	.+60     	; 0xcdc <analogWrite+0x1b8>
			#endif

			#if defined(TCCR5A) && defined(COM5B1)
			case TIMER5B:
				// connect pwm to pin on timer 5, channel B
				sbi(TCCR5A, COM5B1);
     ca0:	80 91 20 01 	lds	r24, 0x0120
     ca4:	80 62       	ori	r24, 0x20	; 32
     ca6:	80 93 20 01 	sts	0x0120, r24
				OCR5B = val; // set pwm duty
     caa:	d0 93 2b 01 	sts	0x012B, r29
     cae:	c0 93 2a 01 	sts	0x012A, r28
				break;
     cb2:	14 c0       	rjmp	.+40     	; 0xcdc <analogWrite+0x1b8>
			#endif

			#if defined(TCCR5A) && defined(COM5C1)
			case TIMER5C:
				// connect pwm to pin on timer 5, channel C
				sbi(TCCR5A, COM5C1);
     cb4:	80 91 20 01 	lds	r24, 0x0120
     cb8:	88 60       	ori	r24, 0x08	; 8
     cba:	80 93 20 01 	sts	0x0120, r24
				OCR5C = val; // set pwm duty
     cbe:	d0 93 2d 01 	sts	0x012D, r29
     cc2:	c0 93 2c 01 	sts	0x012C, r28
				break;
     cc6:	0a c0       	rjmp	.+20     	; 0xcdc <analogWrite+0x1b8>
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
     cc8:	c0 38       	cpi	r28, 0x80	; 128
     cca:	d1 05       	cpc	r29, r1
     ccc:	1c f4       	brge	.+6      	; 0xcd4 <analogWrite+0x1b0>
					digitalWrite(pin, LOW);
     cce:	81 2f       	mov	r24, r17
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <analogWrite+0x1b4>
				} else {
					digitalWrite(pin, HIGH);
     cd4:	81 2f       	mov	r24, r17
     cd6:	61 e0       	ldi	r22, 0x01	; 1
     cd8:	0e 94 2b 07 	call	0xe56	; 0xe56 <digitalWrite>
				}
		}
	}
}
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	08 95       	ret

00000ce4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     ce4:	89 30       	cpi	r24, 0x09	; 9
     ce6:	09 f4       	brne	.+2      	; 0xcea <turnOffPWM+0x6>
     ce8:	49 c0       	rjmp	.+146    	; 0xd7c <turnOffPWM+0x98>
     cea:	8a 30       	cpi	r24, 0x0A	; 10
     cec:	a0 f4       	brcc	.+40     	; 0xd16 <turnOffPWM+0x32>
     cee:	84 30       	cpi	r24, 0x04	; 4
     cf0:	51 f1       	breq	.+84     	; 0xd46 <turnOffPWM+0x62>
     cf2:	85 30       	cpi	r24, 0x05	; 5
     cf4:	40 f4       	brcc	.+16     	; 0xd06 <turnOffPWM+0x22>
     cf6:	82 30       	cpi	r24, 0x02	; 2
     cf8:	79 f1       	breq	.+94     	; 0xd58 <turnOffPWM+0x74>
     cfa:	83 30       	cpi	r24, 0x03	; 3
     cfc:	00 f5       	brcc	.+64     	; 0xd3e <turnOffPWM+0x5a>
     cfe:	81 30       	cpi	r24, 0x01	; 1
     d00:	09 f0       	breq	.+2      	; 0xd04 <turnOffPWM+0x20>
     d02:	63 c0       	rjmp	.+198    	; 0xdca <turnOffPWM+0xe6>
     d04:	26 c0       	rjmp	.+76     	; 0xd52 <turnOffPWM+0x6e>
     d06:	87 30       	cpi	r24, 0x07	; 7
     d08:	79 f1       	breq	.+94     	; 0xd68 <turnOffPWM+0x84>
     d0a:	88 30       	cpi	r24, 0x08	; 8
     d0c:	98 f5       	brcc	.+102    	; 0xd74 <turnOffPWM+0x90>
     d0e:	86 30       	cpi	r24, 0x06	; 6
     d10:	09 f0       	breq	.+2      	; 0xd14 <turnOffPWM+0x30>
     d12:	5b c0       	rjmp	.+182    	; 0xdca <turnOffPWM+0xe6>
     d14:	25 c0       	rjmp	.+74     	; 0xd60 <turnOffPWM+0x7c>
     d16:	8d 30       	cpi	r24, 0x0D	; 13
     d18:	09 f4       	brne	.+2      	; 0xd1c <turnOffPWM+0x38>
     d1a:	42 c0       	rjmp	.+132    	; 0xda0 <turnOffPWM+0xbc>
     d1c:	8e 30       	cpi	r24, 0x0E	; 14
     d1e:	28 f4       	brcc	.+10     	; 0xd2a <turnOffPWM+0x46>
     d20:	8b 30       	cpi	r24, 0x0B	; 11
     d22:	b1 f1       	breq	.+108    	; 0xd90 <turnOffPWM+0xac>
     d24:	8c 30       	cpi	r24, 0x0C	; 12
     d26:	c0 f5       	brcc	.+112    	; 0xd98 <turnOffPWM+0xb4>
     d28:	2d c0       	rjmp	.+90     	; 0xd84 <turnOffPWM+0xa0>
     d2a:	80 31       	cpi	r24, 0x10	; 16
     d2c:	09 f4       	brne	.+2      	; 0xd30 <turnOffPWM+0x4c>
     d2e:	42 c0       	rjmp	.+132    	; 0xdb4 <turnOffPWM+0xd0>
     d30:	81 31       	cpi	r24, 0x11	; 17
     d32:	09 f4       	brne	.+2      	; 0xd36 <turnOffPWM+0x52>
     d34:	45 c0       	rjmp	.+138    	; 0xdc0 <turnOffPWM+0xdc>
     d36:	8f 30       	cpi	r24, 0x0F	; 15
     d38:	09 f0       	breq	.+2      	; 0xd3c <turnOffPWM+0x58>
     d3a:	47 c0       	rjmp	.+142    	; 0xdca <turnOffPWM+0xe6>
     d3c:	37 c0       	rjmp	.+110    	; 0xdac <turnOffPWM+0xc8>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     d3e:	80 91 80 00 	lds	r24, 0x0080
     d42:	8f 77       	andi	r24, 0x7F	; 127
     d44:	03 c0       	rjmp	.+6      	; 0xd4c <turnOffPWM+0x68>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     d46:	80 91 80 00 	lds	r24, 0x0080
     d4a:	8f 7d       	andi	r24, 0xDF	; 223
     d4c:	80 93 80 00 	sts	0x0080, r24
     d50:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     d52:	84 b5       	in	r24, 0x24	; 36
     d54:	8f 77       	andi	r24, 0x7F	; 127
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <turnOffPWM+0x78>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     d58:	84 b5       	in	r24, 0x24	; 36
     d5a:	8f 7d       	andi	r24, 0xDF	; 223
     d5c:	84 bd       	out	0x24, r24	; 36
     d5e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     d60:	80 91 b0 00 	lds	r24, 0x00B0
     d64:	8f 77       	andi	r24, 0x7F	; 127
     d66:	03 c0       	rjmp	.+6      	; 0xd6e <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     d68:	80 91 b0 00 	lds	r24, 0x00B0
     d6c:	8f 7d       	andi	r24, 0xDF	; 223
     d6e:	80 93 b0 00 	sts	0x00B0, r24
     d72:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
     d74:	80 91 90 00 	lds	r24, 0x0090
     d78:	8f 77       	andi	r24, 0x7F	; 127
     d7a:	07 c0       	rjmp	.+14     	; 0xd8a <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
     d7c:	80 91 90 00 	lds	r24, 0x0090
     d80:	8f 7d       	andi	r24, 0xDF	; 223
     d82:	03 c0       	rjmp	.+6      	; 0xd8a <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
     d84:	80 91 90 00 	lds	r24, 0x0090
     d88:	87 7f       	andi	r24, 0xF7	; 247
     d8a:	80 93 90 00 	sts	0x0090, r24
     d8e:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
     d90:	80 91 a0 00 	lds	r24, 0x00A0
     d94:	8f 77       	andi	r24, 0x7F	; 127
     d96:	07 c0       	rjmp	.+14     	; 0xda6 <turnOffPWM+0xc2>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
     d98:	80 91 a0 00 	lds	r24, 0x00A0
     d9c:	8f 7d       	andi	r24, 0xDF	; 223
     d9e:	03 c0       	rjmp	.+6      	; 0xda6 <turnOffPWM+0xc2>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
     da0:	80 91 a0 00 	lds	r24, 0x00A0
     da4:	87 7f       	andi	r24, 0xF7	; 247
     da6:	80 93 a0 00 	sts	0x00A0, r24
     daa:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
     dac:	80 91 20 01 	lds	r24, 0x0120
     db0:	8f 77       	andi	r24, 0x7F	; 127
     db2:	03 c0       	rjmp	.+6      	; 0xdba <turnOffPWM+0xd6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
     db4:	80 91 20 01 	lds	r24, 0x0120
     db8:	8f 7d       	andi	r24, 0xDF	; 223
     dba:	80 93 20 01 	sts	0x0120, r24
     dbe:	08 95       	ret
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
     dc0:	80 91 20 01 	lds	r24, 0x0120
     dc4:	87 7f       	andi	r24, 0xF7	; 247
     dc6:	80 93 20 01 	sts	0x0120, r24
     dca:	08 95       	ret

00000dcc <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     dcc:	ef 92       	push	r14
     dce:	ff 92       	push	r15
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	fc 01       	movw	r30, r24
     dd8:	e7 58       	subi	r30, 0x87	; 135
     dda:	fe 4f       	sbci	r31, 0xFE	; 254
     ddc:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
     dde:	8d 5c       	subi	r24, 0xCD	; 205
     de0:	9e 4f       	sbci	r25, 0xFE	; 254
     de2:	fc 01       	movw	r30, r24
     de4:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     de6:	88 23       	and	r24, r24
     de8:	89 f1       	breq	.+98     	; 0xe4c <pinMode+0x80>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	fc 01       	movw	r30, r24
     df2:	eb 51       	subi	r30, 0x1B	; 27
     df4:	ff 4f       	sbci	r31, 0xFF	; 255
     df6:	25 91       	lpm	r18, Z+
     df8:	34 91       	lpm	r19, Z+
     dfa:	d9 01       	movw	r26, r18
	out = portOutputRegister(port);
     dfc:	81 50       	subi	r24, 0x01	; 1
     dfe:	9f 4f       	sbci	r25, 0xFF	; 255
     e00:	fc 01       	movw	r30, r24
     e02:	25 91       	lpm	r18, Z+
     e04:	34 91       	lpm	r19, Z+
     e06:	e2 2e       	mov	r14, r18
     e08:	e7 01       	movw	r28, r14
     e0a:	7e 01       	movw	r14, r28
     e0c:	f3 2e       	mov	r15, r19
     e0e:	e7 01       	movw	r28, r14

	if (mode == INPUT) { 
     e10:	66 23       	and	r22, r22
     e12:	49 f4       	brne	.+18     	; 0xe26 <pinMode+0x5a>
		uint8_t oldSREG = SREG;
     e14:	9f b7       	in	r25, 0x3f	; 63
                cli();
     e16:	f8 94       	cli
		*reg &= ~bit;
     e18:	8c 91       	ld	r24, X
     e1a:	40 95       	com	r20
     e1c:	84 23       	and	r24, r20
     e1e:	8c 93       	st	X, r24
		*out &= ~bit;
     e20:	88 81       	ld	r24, Y
     e22:	84 23       	and	r24, r20
     e24:	0b c0       	rjmp	.+22     	; 0xe3c <pinMode+0x70>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     e26:	62 30       	cpi	r22, 0x02	; 2
     e28:	59 f4       	brne	.+22     	; 0xe40 <pinMode+0x74>
		uint8_t oldSREG = SREG;
     e2a:	9f b7       	in	r25, 0x3f	; 63
                cli();
     e2c:	f8 94       	cli
		*reg &= ~bit;
     e2e:	8c 91       	ld	r24, X
     e30:	24 2f       	mov	r18, r20
     e32:	20 95       	com	r18
     e34:	82 23       	and	r24, r18
     e36:	8c 93       	st	X, r24
		*out |= bit;
     e38:	88 81       	ld	r24, Y
     e3a:	84 2b       	or	r24, r20
     e3c:	88 83       	st	Y, r24
     e3e:	05 c0       	rjmp	.+10     	; 0xe4a <pinMode+0x7e>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
     e40:	9f b7       	in	r25, 0x3f	; 63
                cli();
     e42:	f8 94       	cli
		*reg |= bit;
     e44:	8c 91       	ld	r24, X
     e46:	84 2b       	or	r24, r20
     e48:	8c 93       	st	X, r24
		SREG = oldSREG;
     e4a:	9f bf       	out	0x3f, r25	; 63
	}
}
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	ff 90       	pop	r15
     e52:	ef 90       	pop	r14
     e54:	08 95       	ret

00000e56 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     e56:	0f 93       	push	r16
     e58:	1f 93       	push	r17
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	0f 92       	push	r0
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	f9 01       	movw	r30, r18
     e6a:	e1 54       	subi	r30, 0x41	; 65
     e6c:	fe 4f       	sbci	r31, 0xFE	; 254
     e6e:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
     e70:	f9 01       	movw	r30, r18
     e72:	e7 58       	subi	r30, 0x87	; 135
     e74:	fe 4f       	sbci	r31, 0xFE	; 254
     e76:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
     e78:	2d 5c       	subi	r18, 0xCD	; 205
     e7a:	3e 4f       	sbci	r19, 0xFE	; 254
     e7c:	f9 01       	movw	r30, r18
     e7e:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     e80:	00 23       	and	r16, r16
     e82:	d9 f0       	breq	.+54     	; 0xeba <digitalWrite+0x64>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     e84:	88 23       	and	r24, r24
     e86:	21 f0       	breq	.+8      	; 0xe90 <digitalWrite+0x3a>
     e88:	69 83       	std	Y+1, r22	; 0x01
     e8a:	0e 94 72 06 	call	0xce4	; 0xce4 <turnOffPWM>
     e8e:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
     e90:	e0 2f       	mov	r30, r16
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	ee 0f       	add	r30, r30
     e96:	ff 1f       	adc	r31, r31
     e98:	e1 50       	subi	r30, 0x01	; 1
     e9a:	ff 4f       	sbci	r31, 0xFF	; 255
     e9c:	85 91       	lpm	r24, Z+
     e9e:	94 91       	lpm	r25, Z+
     ea0:	dc 01       	movw	r26, r24

	uint8_t oldSREG = SREG;
     ea2:	9f b7       	in	r25, 0x3f	; 63
	cli();
     ea4:	f8 94       	cli

	if (val == LOW) {
     ea6:	66 23       	and	r22, r22
     ea8:	21 f4       	brne	.+8      	; 0xeb2 <digitalWrite+0x5c>
		*out &= ~bit;
     eaa:	8c 91       	ld	r24, X
     eac:	10 95       	com	r17
     eae:	81 23       	and	r24, r17
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <digitalWrite+0x60>
	} else {
		*out |= bit;
     eb2:	8c 91       	ld	r24, X
     eb4:	81 2b       	or	r24, r17
     eb6:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
     eb8:	9f bf       	out	0x3f, r25	; 63
}
     eba:	0f 90       	pop	r0
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	1f 91       	pop	r17
     ec2:	0f 91       	pop	r16
     ec4:	08 95       	ret

00000ec6 <digitalRead>:
     ec6:	0f 93       	push	r16
     ec8:	1f 93       	push	r17
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	f9 01       	movw	r30, r18
     ed0:	e1 54       	subi	r30, 0x41	; 65
     ed2:	fe 4f       	sbci	r31, 0xFE	; 254
     ed4:	84 91       	lpm	r24, Z+
     ed6:	f9 01       	movw	r30, r18
     ed8:	e7 58       	subi	r30, 0x87	; 135
     eda:	fe 4f       	sbci	r31, 0xFE	; 254
     edc:	04 91       	lpm	r16, Z+
     ede:	2d 5c       	subi	r18, 0xCD	; 205
     ee0:	3e 4f       	sbci	r19, 0xFE	; 254
     ee2:	f9 01       	movw	r30, r18
     ee4:	14 91       	lpm	r17, Z+
     ee6:	11 23       	and	r17, r17
     ee8:	91 f0       	breq	.+36     	; 0xf0e <digitalRead+0x48>
     eea:	88 23       	and	r24, r24
     eec:	11 f0       	breq	.+4      	; 0xef2 <digitalRead+0x2c>
     eee:	0e 94 72 06 	call	0xce4	; 0xce4 <turnOffPWM>
     ef2:	e1 2f       	mov	r30, r17
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	ee 0f       	add	r30, r30
     ef8:	ff 1f       	adc	r31, r31
     efa:	e7 5e       	subi	r30, 0xE7	; 231
     efc:	fe 4f       	sbci	r31, 0xFE	; 254
     efe:	85 91       	lpm	r24, Z+
     f00:	94 91       	lpm	r25, Z+
     f02:	dc 01       	movw	r26, r24
     f04:	8c 91       	ld	r24, X
     f06:	80 23       	and	r24, r16
     f08:	21 e0       	ldi	r18, 0x01	; 1
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	11 f4       	brne	.+4      	; 0xf12 <digitalRead+0x4c>
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	c9 01       	movw	r24, r18
     f14:	1f 91       	pop	r17
     f16:	0f 91       	pop	r16
     f18:	08 95       	ret

00000f1a <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     f1a:	fc 01       	movw	r30, r24
     f1c:	84 85       	ldd	r24, Z+12	; 0x0c
     f1e:	95 85       	ldd	r25, Z+13	; 0x0d
     f20:	fc 01       	movw	r30, r24
     f22:	e0 5c       	subi	r30, 0xC0	; 192
     f24:	ff 4f       	sbci	r31, 0xFF	; 255
     f26:	20 81       	ld	r18, Z
     f28:	31 81       	ldd	r19, Z+1	; 0x01
     f2a:	8e 5b       	subi	r24, 0xBE	; 190
     f2c:	9f 4f       	sbci	r25, 0xFF	; 255
     f2e:	fc 01       	movw	r30, r24
     f30:	80 81       	ld	r24, Z
     f32:	91 81       	ldd	r25, Z+1	; 0x01
     f34:	28 1b       	sub	r18, r24
     f36:	39 0b       	sbc	r19, r25
     f38:	2f 73       	andi	r18, 0x3F	; 63
     f3a:	30 70       	andi	r19, 0x00	; 0
}
     f3c:	c9 01       	movw	r24, r18
     f3e:	08 95       	ret

00000f40 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     f40:	fc 01       	movw	r30, r24
     f42:	84 85       	ldd	r24, Z+12	; 0x0c
     f44:	95 85       	ldd	r25, Z+13	; 0x0d
     f46:	fc 01       	movw	r30, r24
     f48:	e0 5c       	subi	r30, 0xC0	; 192
     f4a:	ff 4f       	sbci	r31, 0xFF	; 255
     f4c:	40 81       	ld	r20, Z
     f4e:	51 81       	ldd	r21, Z+1	; 0x01
     f50:	fc 01       	movw	r30, r24
     f52:	ee 5b       	subi	r30, 0xBE	; 190
     f54:	ff 4f       	sbci	r31, 0xFF	; 255
     f56:	20 81       	ld	r18, Z
     f58:	31 81       	ldd	r19, Z+1	; 0x01
     f5a:	42 17       	cp	r20, r18
     f5c:	53 07       	cpc	r21, r19
     f5e:	41 f0       	breq	.+16     	; 0xf70 <_ZN14HardwareSerial4peekEv+0x30>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     f60:	01 90       	ld	r0, Z+
     f62:	f0 81       	ld	r31, Z
     f64:	e0 2d       	mov	r30, r0
     f66:	e8 0f       	add	r30, r24
     f68:	f9 1f       	adc	r31, r25
     f6a:	20 81       	ld	r18, Z
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <_ZN14HardwareSerial4peekEv+0x34>
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     f70:	2f ef       	ldi	r18, 0xFF	; 255
     f72:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
     f74:	c9 01       	movw	r24, r18
     f76:	08 95       	ret

00000f78 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     f78:	fc 01       	movw	r30, r24
     f7a:	84 85       	ldd	r24, Z+12	; 0x0c
     f7c:	95 85       	ldd	r25, Z+13	; 0x0d
     f7e:	fc 01       	movw	r30, r24
     f80:	e0 5c       	subi	r30, 0xC0	; 192
     f82:	ff 4f       	sbci	r31, 0xFF	; 255
     f84:	40 81       	ld	r20, Z
     f86:	51 81       	ldd	r21, Z+1	; 0x01
     f88:	fc 01       	movw	r30, r24
     f8a:	ee 5b       	subi	r30, 0xBE	; 190
     f8c:	ff 4f       	sbci	r31, 0xFF	; 255
     f8e:	20 81       	ld	r18, Z
     f90:	31 81       	ldd	r19, Z+1	; 0x01
     f92:	42 17       	cp	r20, r18
     f94:	53 07       	cpc	r21, r19
     f96:	71 f0       	breq	.+28     	; 0xfb4 <_ZN14HardwareSerial4readEv+0x3c>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     f98:	a0 81       	ld	r26, Z
     f9a:	b1 81       	ldd	r27, Z+1	; 0x01
     f9c:	a8 0f       	add	r26, r24
     f9e:	b9 1f       	adc	r27, r25
     fa0:	2c 91       	ld	r18, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     fa2:	80 81       	ld	r24, Z
     fa4:	91 81       	ldd	r25, Z+1	; 0x01
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	8f 73       	andi	r24, 0x3F	; 63
     faa:	90 70       	andi	r25, 0x00	; 0
     fac:	91 83       	std	Z+1, r25	; 0x01
     fae:	80 83       	st	Z, r24
    return c;
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <_ZN14HardwareSerial4readEv+0x40>

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     fb4:	2f ef       	ldi	r18, 0xFF	; 255
     fb6:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
     fb8:	c9 01       	movw	r24, r18
     fba:	08 95       	ret

00000fbc <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
     fbc:	dc 01       	movw	r26, r24
     fbe:	1e 96       	adiw	r26, 0x0e	; 14
     fc0:	8d 91       	ld	r24, X+
     fc2:	9c 91       	ld	r25, X
     fc4:	1f 97       	sbiw	r26, 0x0f	; 15
     fc6:	fc 01       	movw	r30, r24
     fc8:	e0 5c       	subi	r30, 0xC0	; 192
     fca:	ff 4f       	sbci	r31, 0xFF	; 255
     fcc:	8e 5b       	subi	r24, 0xBE	; 190
     fce:	9f 4f       	sbci	r25, 0xFF	; 255
     fd0:	40 81       	ld	r20, Z
     fd2:	51 81       	ldd	r21, Z+1	; 0x01
     fd4:	dc 01       	movw	r26, r24
     fd6:	2d 91       	ld	r18, X+
     fd8:	3c 91       	ld	r19, X
     fda:	11 97       	sbiw	r26, 0x01	; 1
     fdc:	42 17       	cp	r20, r18
     fde:	53 07       	cpc	r21, r19
     fe0:	b9 f7       	brne	.-18     	; 0xfd0 <_ZN14HardwareSerial5flushEv+0x14>
    ;
}
     fe2:	08 95       	ret

00000fe4 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     fe4:	fc 01       	movw	r30, r24
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
     fe6:	26 85       	ldd	r18, Z+14	; 0x0e
     fe8:	37 85       	ldd	r19, Z+15	; 0x0f
     fea:	d9 01       	movw	r26, r18
     fec:	a0 5c       	subi	r26, 0xC0	; 192
     fee:	bf 4f       	sbci	r27, 0xFF	; 255
     ff0:	8d 91       	ld	r24, X+
     ff2:	9c 91       	ld	r25, X
     ff4:	01 96       	adiw	r24, 0x01	; 1
     ff6:	8f 73       	andi	r24, 0x3F	; 63
     ff8:	90 70       	andi	r25, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
     ffa:	d9 01       	movw	r26, r18
     ffc:	ae 5b       	subi	r26, 0xBE	; 190
     ffe:	bf 4f       	sbci	r27, 0xFF	; 255
    1000:	4d 91       	ld	r20, X+
    1002:	5c 91       	ld	r21, X
    1004:	11 97       	sbiw	r26, 0x01	; 1
    1006:	84 17       	cp	r24, r20
    1008:	95 07       	cpc	r25, r21
    100a:	d1 f3       	breq	.-12     	; 0x1000 <_ZN14HardwareSerial5writeEh+0x1c>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    100c:	d9 01       	movw	r26, r18
    100e:	a0 5c       	subi	r26, 0xC0	; 192
    1010:	bf 4f       	sbci	r27, 0xFF	; 255
    1012:	0d 90       	ld	r0, X+
    1014:	bc 91       	ld	r27, X
    1016:	a0 2d       	mov	r26, r0
    1018:	a2 0f       	add	r26, r18
    101a:	b3 1f       	adc	r27, r19
    101c:	6c 93       	st	X, r22
  _tx_buffer->head = i;
    101e:	a6 85       	ldd	r26, Z+14	; 0x0e
    1020:	b7 85       	ldd	r27, Z+15	; 0x0f
    1022:	a0 5c       	subi	r26, 0xC0	; 192
    1024:	bf 4f       	sbci	r27, 0xFF	; 255
    1026:	11 96       	adiw	r26, 0x01	; 1
    1028:	9c 93       	st	X, r25
    102a:	8e 93       	st	-X, r24
	
  sbi(*_ucsrb, _udrie);
    102c:	a6 89       	ldd	r26, Z+22	; 0x16
    102e:	b7 89       	ldd	r27, Z+23	; 0x17
    1030:	2c 91       	ld	r18, X
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	05 8c       	ldd	r0, Z+29	; 0x1d
    1038:	02 c0       	rjmp	.+4      	; 0x103e <_ZN14HardwareSerial5writeEh+0x5a>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <_ZN14HardwareSerial5writeEh+0x56>
    1042:	28 2b       	or	r18, r24
    1044:	2c 93       	st	X, r18
  
  return 1;
}
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	08 95       	ret

0000104c <_Z10store_charhP11ring_buffer>:
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    104c:	fb 01       	movw	r30, r22
    104e:	e0 5c       	subi	r30, 0xC0	; 192
    1050:	ff 4f       	sbci	r31, 0xFF	; 255
    1052:	20 81       	ld	r18, Z
    1054:	31 81       	ldd	r19, Z+1	; 0x01
    1056:	2f 5f       	subi	r18, 0xFF	; 255
    1058:	3f 4f       	sbci	r19, 0xFF	; 255
    105a:	2f 73       	andi	r18, 0x3F	; 63
    105c:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    105e:	db 01       	movw	r26, r22
    1060:	ae 5b       	subi	r26, 0xBE	; 190
    1062:	bf 4f       	sbci	r27, 0xFF	; 255
    1064:	4d 91       	ld	r20, X+
    1066:	5c 91       	ld	r21, X
    1068:	11 97       	sbiw	r26, 0x01	; 1
    106a:	24 17       	cp	r18, r20
    106c:	35 07       	cpc	r19, r21
    106e:	39 f0       	breq	.+14     	; 0x107e <_Z10store_charhP11ring_buffer+0x32>
    buffer->buffer[buffer->head] = c;
    1070:	a0 81       	ld	r26, Z
    1072:	b1 81       	ldd	r27, Z+1	; 0x01
    1074:	a6 0f       	add	r26, r22
    1076:	b7 1f       	adc	r27, r23
    1078:	8c 93       	st	X, r24
    buffer->head = i;
    107a:	31 83       	std	Z+1, r19	; 0x01
    107c:	20 83       	st	Z, r18
    107e:	08 95       	ret

00001080 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    1080:	08 95       	ret

00001082 <__vector_25>:
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
    1082:	1f 92       	push	r1
    1084:	0f 92       	push	r0
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	0f 92       	push	r0
    108a:	0b b6       	in	r0, 0x3b	; 59
    108c:	0f 92       	push	r0
    108e:	11 24       	eor	r1, r1
    1090:	2f 93       	push	r18
    1092:	3f 93       	push	r19
    1094:	4f 93       	push	r20
    1096:	5f 93       	push	r21
    1098:	6f 93       	push	r22
    109a:	7f 93       	push	r23
    109c:	8f 93       	push	r24
    109e:	9f 93       	push	r25
    10a0:	af 93       	push	r26
    10a2:	bf 93       	push	r27
    10a4:	ef 93       	push	r30
    10a6:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    10a8:	80 91 c6 00 	lds	r24, 0x00C6
  #elif defined(UDR)
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
    10ac:	67 e4       	ldi	r22, 0x47	; 71
    10ae:	73 e0       	ldi	r23, 0x03	; 3
    10b0:	0e 94 26 08 	call	0x104c	; 0x104c <_Z10store_charhP11ring_buffer>
  }
    10b4:	ff 91       	pop	r31
    10b6:	ef 91       	pop	r30
    10b8:	bf 91       	pop	r27
    10ba:	af 91       	pop	r26
    10bc:	9f 91       	pop	r25
    10be:	8f 91       	pop	r24
    10c0:	7f 91       	pop	r23
    10c2:	6f 91       	pop	r22
    10c4:	5f 91       	pop	r21
    10c6:	4f 91       	pop	r20
    10c8:	3f 91       	pop	r19
    10ca:	2f 91       	pop	r18
    10cc:	0f 90       	pop	r0
    10ce:	0b be       	out	0x3b, r0	; 59
    10d0:	0f 90       	pop	r0
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	0f 90       	pop	r0
    10d6:	1f 90       	pop	r1
    10d8:	18 95       	reti

000010da <_Z12serialEvent1v>:
#endif
#endif

#if defined(USART1_RX_vect)
  void serialEvent1() __attribute__((weak));
  void serialEvent1() {}
    10da:	08 95       	ret

000010dc <__vector_36>:
  #define serialEvent1_implemented
  SIGNAL(USART1_RX_vect)
  {
    10dc:	1f 92       	push	r1
    10de:	0f 92       	push	r0
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	0f 92       	push	r0
    10e4:	0b b6       	in	r0, 0x3b	; 59
    10e6:	0f 92       	push	r0
    10e8:	11 24       	eor	r1, r1
    10ea:	2f 93       	push	r18
    10ec:	3f 93       	push	r19
    10ee:	4f 93       	push	r20
    10f0:	5f 93       	push	r21
    10f2:	6f 93       	push	r22
    10f4:	7f 93       	push	r23
    10f6:	8f 93       	push	r24
    10f8:	9f 93       	push	r25
    10fa:	af 93       	push	r26
    10fc:	bf 93       	push	r27
    10fe:	ef 93       	push	r30
    1100:	ff 93       	push	r31
    unsigned char c = UDR1;
    1102:	80 91 ce 00 	lds	r24, 0x00CE
    store_char(c, &rx_buffer1);
    1106:	6f ec       	ldi	r22, 0xCF	; 207
    1108:	73 e0       	ldi	r23, 0x03	; 3
    110a:	0e 94 26 08 	call	0x104c	; 0x104c <_Z10store_charhP11ring_buffer>
  }
    110e:	ff 91       	pop	r31
    1110:	ef 91       	pop	r30
    1112:	bf 91       	pop	r27
    1114:	af 91       	pop	r26
    1116:	9f 91       	pop	r25
    1118:	8f 91       	pop	r24
    111a:	7f 91       	pop	r23
    111c:	6f 91       	pop	r22
    111e:	5f 91       	pop	r21
    1120:	4f 91       	pop	r20
    1122:	3f 91       	pop	r19
    1124:	2f 91       	pop	r18
    1126:	0f 90       	pop	r0
    1128:	0b be       	out	0x3b, r0	; 59
    112a:	0f 90       	pop	r0
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	0f 90       	pop	r0
    1130:	1f 90       	pop	r1
    1132:	18 95       	reti

00001134 <_Z12serialEvent2v>:
  #error SIG_USART1_RECV
#endif

#if defined(USART2_RX_vect) && defined(UDR2)
  void serialEvent2() __attribute__((weak));
  void serialEvent2() {}
    1134:	08 95       	ret

00001136 <__vector_51>:
  #define serialEvent2_implemented
  SIGNAL(USART2_RX_vect)
  {
    1136:	1f 92       	push	r1
    1138:	0f 92       	push	r0
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	0f 92       	push	r0
    113e:	0b b6       	in	r0, 0x3b	; 59
    1140:	0f 92       	push	r0
    1142:	11 24       	eor	r1, r1
    1144:	2f 93       	push	r18
    1146:	3f 93       	push	r19
    1148:	4f 93       	push	r20
    114a:	5f 93       	push	r21
    114c:	6f 93       	push	r22
    114e:	7f 93       	push	r23
    1150:	8f 93       	push	r24
    1152:	9f 93       	push	r25
    1154:	af 93       	push	r26
    1156:	bf 93       	push	r27
    1158:	ef 93       	push	r30
    115a:	ff 93       	push	r31
    unsigned char c = UDR2;
    115c:	80 91 d6 00 	lds	r24, 0x00D6
    store_char(c, &rx_buffer2);
    1160:	67 e5       	ldi	r22, 0x57	; 87
    1162:	74 e0       	ldi	r23, 0x04	; 4
    1164:	0e 94 26 08 	call	0x104c	; 0x104c <_Z10store_charhP11ring_buffer>
  }
    1168:	ff 91       	pop	r31
    116a:	ef 91       	pop	r30
    116c:	bf 91       	pop	r27
    116e:	af 91       	pop	r26
    1170:	9f 91       	pop	r25
    1172:	8f 91       	pop	r24
    1174:	7f 91       	pop	r23
    1176:	6f 91       	pop	r22
    1178:	5f 91       	pop	r21
    117a:	4f 91       	pop	r20
    117c:	3f 91       	pop	r19
    117e:	2f 91       	pop	r18
    1180:	0f 90       	pop	r0
    1182:	0b be       	out	0x3b, r0	; 59
    1184:	0f 90       	pop	r0
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	0f 90       	pop	r0
    118a:	1f 90       	pop	r1
    118c:	18 95       	reti

0000118e <_Z12serialEvent3v>:
  #error SIG_USART2_RECV
#endif

#if defined(USART3_RX_vect) && defined(UDR3)
  void serialEvent3() __attribute__((weak));
  void serialEvent3() {}
    118e:	08 95       	ret

00001190 <__vector_54>:
  #define serialEvent3_implemented
  SIGNAL(USART3_RX_vect)
  {
    1190:	1f 92       	push	r1
    1192:	0f 92       	push	r0
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	0f 92       	push	r0
    1198:	0b b6       	in	r0, 0x3b	; 59
    119a:	0f 92       	push	r0
    119c:	11 24       	eor	r1, r1
    119e:	2f 93       	push	r18
    11a0:	3f 93       	push	r19
    11a2:	4f 93       	push	r20
    11a4:	5f 93       	push	r21
    11a6:	6f 93       	push	r22
    11a8:	7f 93       	push	r23
    11aa:	8f 93       	push	r24
    11ac:	9f 93       	push	r25
    11ae:	af 93       	push	r26
    11b0:	bf 93       	push	r27
    11b2:	ef 93       	push	r30
    11b4:	ff 93       	push	r31
    unsigned char c = UDR3;
    11b6:	80 91 36 01 	lds	r24, 0x0136
    store_char(c, &rx_buffer3);
    11ba:	6f ed       	ldi	r22, 0xDF	; 223
    11bc:	74 e0       	ldi	r23, 0x04	; 4
    11be:	0e 94 26 08 	call	0x104c	; 0x104c <_Z10store_charhP11ring_buffer>
  }
    11c2:	ff 91       	pop	r31
    11c4:	ef 91       	pop	r30
    11c6:	bf 91       	pop	r27
    11c8:	af 91       	pop	r26
    11ca:	9f 91       	pop	r25
    11cc:	8f 91       	pop	r24
    11ce:	7f 91       	pop	r23
    11d0:	6f 91       	pop	r22
    11d2:	5f 91       	pop	r21
    11d4:	4f 91       	pop	r20
    11d6:	3f 91       	pop	r19
    11d8:	2f 91       	pop	r18
    11da:	0f 90       	pop	r0
    11dc:	0b be       	out	0x3b, r0	; 59
    11de:	0f 90       	pop	r0
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	0f 90       	pop	r0
    11e4:	1f 90       	pop	r1
    11e6:	18 95       	reti

000011e8 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    11e8:	87 e6       	ldi	r24, 0x67	; 103
    11ea:	95 e0       	ldi	r25, 0x05	; 5
    11ec:	0e 94 8d 07 	call	0xf1a	; 0xf1a <_ZN14HardwareSerial9availableEv>
    11f0:	00 97       	sbiw	r24, 0x00	; 0
    11f2:	11 f0       	breq	.+4      	; 0x11f8 <_Z14serialEventRunv+0x10>
    11f4:	0e 94 40 08 	call	0x1080	; 0x1080 <_Z11serialEventv>
#endif
#ifdef serialEvent1_implemented
  if (Serial1.available()) serialEvent1();
    11f8:	86 e8       	ldi	r24, 0x86	; 134
    11fa:	95 e0       	ldi	r25, 0x05	; 5
    11fc:	0e 94 8d 07 	call	0xf1a	; 0xf1a <_ZN14HardwareSerial9availableEv>
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	11 f0       	breq	.+4      	; 0x1208 <_Z14serialEventRunv+0x20>
    1204:	0e 94 6d 08 	call	0x10da	; 0x10da <_Z12serialEvent1v>
#endif
#ifdef serialEvent2_implemented
  if (Serial2.available()) serialEvent2();
    1208:	85 ea       	ldi	r24, 0xA5	; 165
    120a:	95 e0       	ldi	r25, 0x05	; 5
    120c:	0e 94 8d 07 	call	0xf1a	; 0xf1a <_ZN14HardwareSerial9availableEv>
    1210:	00 97       	sbiw	r24, 0x00	; 0
    1212:	11 f0       	breq	.+4      	; 0x1218 <_Z14serialEventRunv+0x30>
    1214:	0e 94 9a 08 	call	0x1134	; 0x1134 <_Z12serialEvent2v>
#endif
#ifdef serialEvent3_implemented
  if (Serial3.available()) serialEvent3();
    1218:	84 ec       	ldi	r24, 0xC4	; 196
    121a:	95 e0       	ldi	r25, 0x05	; 5
    121c:	0e 94 8d 07 	call	0xf1a	; 0xf1a <_ZN14HardwareSerial9availableEv>
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	11 f0       	breq	.+4      	; 0x1228 <_Z14serialEventRunv+0x40>
    1224:	0e 94 c7 08 	call	0x118e	; 0x118e <_Z12serialEvent3v>
    1228:	08 95       	ret

0000122a <__vector_26>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
    122a:	1f 92       	push	r1
    122c:	0f 92       	push	r0
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	0f 92       	push	r0
    1232:	0b b6       	in	r0, 0x3b	; 59
    1234:	0f 92       	push	r0
    1236:	11 24       	eor	r1, r1
    1238:	2f 93       	push	r18
    123a:	3f 93       	push	r19
    123c:	8f 93       	push	r24
    123e:	9f 93       	push	r25
    1240:	ef 93       	push	r30
    1242:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
    1244:	20 91 cb 03 	lds	r18, 0x03CB
    1248:	30 91 cc 03 	lds	r19, 0x03CC
    124c:	80 91 cd 03 	lds	r24, 0x03CD
    1250:	90 91 ce 03 	lds	r25, 0x03CE
    1254:	28 17       	cp	r18, r24
    1256:	39 07       	cpc	r19, r25
    1258:	31 f4       	brne	.+12     	; 0x1266 <__vector_26+0x3c>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    125a:	80 91 c1 00 	lds	r24, 0x00C1
    125e:	8f 7d       	andi	r24, 0xDF	; 223
    1260:	80 93 c1 00 	sts	0x00C1, r24
    1264:	14 c0       	rjmp	.+40     	; 0x128e <__vector_26+0x64>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    1266:	e0 91 cd 03 	lds	r30, 0x03CD
    126a:	f0 91 ce 03 	lds	r31, 0x03CE
    126e:	e5 57       	subi	r30, 0x75	; 117
    1270:	fc 4f       	sbci	r31, 0xFC	; 252
    1272:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    1274:	80 91 cd 03 	lds	r24, 0x03CD
    1278:	90 91 ce 03 	lds	r25, 0x03CE
    127c:	01 96       	adiw	r24, 0x01	; 1
    127e:	8f 73       	andi	r24, 0x3F	; 63
    1280:	90 70       	andi	r25, 0x00	; 0
    1282:	90 93 ce 03 	sts	0x03CE, r25
    1286:	80 93 cd 03 	sts	0x03CD, r24
	
  #if defined(UDR0)
    UDR0 = c;
    128a:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    128e:	ff 91       	pop	r31
    1290:	ef 91       	pop	r30
    1292:	9f 91       	pop	r25
    1294:	8f 91       	pop	r24
    1296:	3f 91       	pop	r19
    1298:	2f 91       	pop	r18
    129a:	0f 90       	pop	r0
    129c:	0b be       	out	0x3b, r0	; 59
    129e:	0f 90       	pop	r0
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	0f 90       	pop	r0
    12a4:	1f 90       	pop	r1
    12a6:	18 95       	reti

000012a8 <__vector_37>:
#endif
#endif

#ifdef USART1_UDRE_vect
ISR(USART1_UDRE_vect)
{
    12a8:	1f 92       	push	r1
    12aa:	0f 92       	push	r0
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	0f 92       	push	r0
    12b0:	0b b6       	in	r0, 0x3b	; 59
    12b2:	0f 92       	push	r0
    12b4:	11 24       	eor	r1, r1
    12b6:	2f 93       	push	r18
    12b8:	3f 93       	push	r19
    12ba:	8f 93       	push	r24
    12bc:	9f 93       	push	r25
    12be:	ef 93       	push	r30
    12c0:	ff 93       	push	r31
  if (tx_buffer1.head == tx_buffer1.tail) {
    12c2:	20 91 53 04 	lds	r18, 0x0453
    12c6:	30 91 54 04 	lds	r19, 0x0454
    12ca:	80 91 55 04 	lds	r24, 0x0455
    12ce:	90 91 56 04 	lds	r25, 0x0456
    12d2:	28 17       	cp	r18, r24
    12d4:	39 07       	cpc	r19, r25
    12d6:	31 f4       	brne	.+12     	; 0x12e4 <__vector_37+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR1B, UDRIE1);
    12d8:	80 91 c9 00 	lds	r24, 0x00C9
    12dc:	8f 7d       	andi	r24, 0xDF	; 223
    12de:	80 93 c9 00 	sts	0x00C9, r24
    12e2:	14 c0       	rjmp	.+40     	; 0x130c <__vector_37+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
    12e4:	e0 91 55 04 	lds	r30, 0x0455
    12e8:	f0 91 56 04 	lds	r31, 0x0456
    12ec:	ed 5e       	subi	r30, 0xED	; 237
    12ee:	fb 4f       	sbci	r31, 0xFB	; 251
    12f0:	20 81       	ld	r18, Z
    tx_buffer1.tail = (tx_buffer1.tail + 1) % SERIAL_BUFFER_SIZE;
    12f2:	80 91 55 04 	lds	r24, 0x0455
    12f6:	90 91 56 04 	lds	r25, 0x0456
    12fa:	01 96       	adiw	r24, 0x01	; 1
    12fc:	8f 73       	andi	r24, 0x3F	; 63
    12fe:	90 70       	andi	r25, 0x00	; 0
    1300:	90 93 56 04 	sts	0x0456, r25
    1304:	80 93 55 04 	sts	0x0455, r24
	
    UDR1 = c;
    1308:	20 93 ce 00 	sts	0x00CE, r18
  }
}
    130c:	ff 91       	pop	r31
    130e:	ef 91       	pop	r30
    1310:	9f 91       	pop	r25
    1312:	8f 91       	pop	r24
    1314:	3f 91       	pop	r19
    1316:	2f 91       	pop	r18
    1318:	0f 90       	pop	r0
    131a:	0b be       	out	0x3b, r0	; 59
    131c:	0f 90       	pop	r0
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	0f 90       	pop	r0
    1322:	1f 90       	pop	r1
    1324:	18 95       	reti

00001326 <__vector_52>:
#endif

#ifdef USART2_UDRE_vect
ISR(USART2_UDRE_vect)
{
    1326:	1f 92       	push	r1
    1328:	0f 92       	push	r0
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	0f 92       	push	r0
    132e:	0b b6       	in	r0, 0x3b	; 59
    1330:	0f 92       	push	r0
    1332:	11 24       	eor	r1, r1
    1334:	2f 93       	push	r18
    1336:	3f 93       	push	r19
    1338:	8f 93       	push	r24
    133a:	9f 93       	push	r25
    133c:	ef 93       	push	r30
    133e:	ff 93       	push	r31
  if (tx_buffer2.head == tx_buffer2.tail) {
    1340:	20 91 db 04 	lds	r18, 0x04DB
    1344:	30 91 dc 04 	lds	r19, 0x04DC
    1348:	80 91 dd 04 	lds	r24, 0x04DD
    134c:	90 91 de 04 	lds	r25, 0x04DE
    1350:	28 17       	cp	r18, r24
    1352:	39 07       	cpc	r19, r25
    1354:	31 f4       	brne	.+12     	; 0x1362 <__vector_52+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR2B, UDRIE2);
    1356:	80 91 d1 00 	lds	r24, 0x00D1
    135a:	8f 7d       	andi	r24, 0xDF	; 223
    135c:	80 93 d1 00 	sts	0x00D1, r24
    1360:	14 c0       	rjmp	.+40     	; 0x138a <__vector_52+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
    1362:	e0 91 dd 04 	lds	r30, 0x04DD
    1366:	f0 91 de 04 	lds	r31, 0x04DE
    136a:	e5 56       	subi	r30, 0x65	; 101
    136c:	fb 4f       	sbci	r31, 0xFB	; 251
    136e:	20 81       	ld	r18, Z
    tx_buffer2.tail = (tx_buffer2.tail + 1) % SERIAL_BUFFER_SIZE;
    1370:	80 91 dd 04 	lds	r24, 0x04DD
    1374:	90 91 de 04 	lds	r25, 0x04DE
    1378:	01 96       	adiw	r24, 0x01	; 1
    137a:	8f 73       	andi	r24, 0x3F	; 63
    137c:	90 70       	andi	r25, 0x00	; 0
    137e:	90 93 de 04 	sts	0x04DE, r25
    1382:	80 93 dd 04 	sts	0x04DD, r24
	
    UDR2 = c;
    1386:	20 93 d6 00 	sts	0x00D6, r18
  }
}
    138a:	ff 91       	pop	r31
    138c:	ef 91       	pop	r30
    138e:	9f 91       	pop	r25
    1390:	8f 91       	pop	r24
    1392:	3f 91       	pop	r19
    1394:	2f 91       	pop	r18
    1396:	0f 90       	pop	r0
    1398:	0b be       	out	0x3b, r0	; 59
    139a:	0f 90       	pop	r0
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	0f 90       	pop	r0
    13a0:	1f 90       	pop	r1
    13a2:	18 95       	reti

000013a4 <__vector_55>:
#endif

#ifdef USART3_UDRE_vect
ISR(USART3_UDRE_vect)
{
    13a4:	1f 92       	push	r1
    13a6:	0f 92       	push	r0
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	0f 92       	push	r0
    13ac:	0b b6       	in	r0, 0x3b	; 59
    13ae:	0f 92       	push	r0
    13b0:	11 24       	eor	r1, r1
    13b2:	2f 93       	push	r18
    13b4:	3f 93       	push	r19
    13b6:	8f 93       	push	r24
    13b8:	9f 93       	push	r25
    13ba:	ef 93       	push	r30
    13bc:	ff 93       	push	r31
  if (tx_buffer3.head == tx_buffer3.tail) {
    13be:	20 91 63 05 	lds	r18, 0x0563
    13c2:	30 91 64 05 	lds	r19, 0x0564
    13c6:	80 91 65 05 	lds	r24, 0x0565
    13ca:	90 91 66 05 	lds	r25, 0x0566
    13ce:	28 17       	cp	r18, r24
    13d0:	39 07       	cpc	r19, r25
    13d2:	31 f4       	brne	.+12     	; 0x13e0 <__vector_55+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR3B, UDRIE3);
    13d4:	80 91 31 01 	lds	r24, 0x0131
    13d8:	8f 7d       	andi	r24, 0xDF	; 223
    13da:	80 93 31 01 	sts	0x0131, r24
    13de:	14 c0       	rjmp	.+40     	; 0x1408 <__vector_55+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer3.buffer[tx_buffer3.tail];
    13e0:	e0 91 65 05 	lds	r30, 0x0565
    13e4:	f0 91 66 05 	lds	r31, 0x0566
    13e8:	ed 5d       	subi	r30, 0xDD	; 221
    13ea:	fa 4f       	sbci	r31, 0xFA	; 250
    13ec:	20 81       	ld	r18, Z
    tx_buffer3.tail = (tx_buffer3.tail + 1) % SERIAL_BUFFER_SIZE;
    13ee:	80 91 65 05 	lds	r24, 0x0565
    13f2:	90 91 66 05 	lds	r25, 0x0566
    13f6:	01 96       	adiw	r24, 0x01	; 1
    13f8:	8f 73       	andi	r24, 0x3F	; 63
    13fa:	90 70       	andi	r25, 0x00	; 0
    13fc:	90 93 66 05 	sts	0x0566, r25
    1400:	80 93 65 05 	sts	0x0565, r24
	
    UDR3 = c;
    1404:	20 93 36 01 	sts	0x0136, r18
  }
}
    1408:	ff 91       	pop	r31
    140a:	ef 91       	pop	r30
    140c:	9f 91       	pop	r25
    140e:	8f 91       	pop	r24
    1410:	3f 91       	pop	r19
    1412:	2f 91       	pop	r18
    1414:	0f 90       	pop	r0
    1416:	0b be       	out	0x3b, r0	; 59
    1418:	0f 90       	pop	r0
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	0f 90       	pop	r0
    141e:	1f 90       	pop	r1
    1420:	18 95       	reti

00001422 <_ZN14HardwareSerial5beginEm>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
    1422:	df 92       	push	r13
    1424:	ef 92       	push	r14
    1426:	ff 92       	push	r15
    1428:	0f 93       	push	r16
    142a:	1f 93       	push	r17
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	ec 01       	movw	r28, r24
    1432:	7a 01       	movw	r14, r20
    1434:	8b 01       	movw	r16, r22
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    1436:	dd 24       	eor	r13, r13
    1438:	d3 94       	inc	r13
    143a:	40 30       	cpi	r20, 0x00	; 0
    143c:	81 ee       	ldi	r24, 0xE1	; 225
    143e:	58 07       	cpc	r21, r24
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	68 07       	cpc	r22, r24
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	78 07       	cpc	r23, r24
    1448:	49 f4       	brne	.+18     	; 0x145c <_ZN14HardwareSerial5beginEm+0x3a>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
    144a:	dd 24       	eor	r13, r13
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
    144c:	ec 89       	ldd	r30, Y+20	; 0x14
    144e:	fd 89       	ldd	r31, Y+21	; 0x15
    1450:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1452:	60 e8       	ldi	r22, 0x80	; 128
    1454:	74 e8       	ldi	r23, 0x84	; 132
    1456:	8e e1       	ldi	r24, 0x1E	; 30
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	0f c0       	rjmp	.+30     	; 0x147a <_ZN14HardwareSerial5beginEm+0x58>
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    145c:	ec 89       	ldd	r30, Y+20	; 0x14
    145e:	fd 89       	ldd	r31, Y+21	; 0x15
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	0e 8c       	ldd	r0, Y+30	; 0x1e
    1466:	02 c0       	rjmp	.+4      	; 0x146c <_ZN14HardwareSerial5beginEm+0x4a>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	0a 94       	dec	r0
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <_ZN14HardwareSerial5beginEm+0x46>
    1470:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	79 e0       	ldi	r23, 0x09	; 9
    1476:	8d e3       	ldi	r24, 0x3D	; 61
    1478:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    147a:	a8 01       	movw	r20, r16
    147c:	97 01       	movw	r18, r14
    147e:	0e 94 ba 1a 	call	0x3574	; 0x3574 <__udivmodsi4>
    1482:	21 50       	subi	r18, 0x01	; 1
    1484:	30 40       	sbci	r19, 0x00	; 0
    1486:	40 40       	sbci	r20, 0x00	; 0
    1488:	50 40       	sbci	r21, 0x00	; 0
    148a:	56 95       	lsr	r21
    148c:	47 95       	ror	r20
    148e:	37 95       	ror	r19
    1490:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    1492:	80 e1       	ldi	r24, 0x10	; 16
    1494:	20 30       	cpi	r18, 0x00	; 0
    1496:	38 07       	cpc	r19, r24
    1498:	10 f0       	brcs	.+4      	; 0x149e <_ZN14HardwareSerial5beginEm+0x7c>
    149a:	dd 20       	and	r13, r13
    149c:	b1 f6       	brne	.-84     	; 0x144a <_ZN14HardwareSerial5beginEm+0x28>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    149e:	e8 89       	ldd	r30, Y+16	; 0x10
    14a0:	f9 89       	ldd	r31, Y+17	; 0x11
    14a2:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    14a4:	ea 89       	ldd	r30, Y+18	; 0x12
    14a6:	fb 89       	ldd	r31, Y+19	; 0x13
    14a8:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    14aa:	ee 89       	ldd	r30, Y+22	; 0x16
    14ac:	ff 89       	ldd	r31, Y+23	; 0x17
    14ae:	40 81       	ld	r20, Z
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	9c 01       	movw	r18, r24
    14b6:	0a 8c       	ldd	r0, Y+26	; 0x1a
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <_ZN14HardwareSerial5beginEm+0x9c>
    14ba:	22 0f       	add	r18, r18
    14bc:	33 1f       	adc	r19, r19
    14be:	0a 94       	dec	r0
    14c0:	e2 f7       	brpl	.-8      	; 0x14ba <_ZN14HardwareSerial5beginEm+0x98>
    14c2:	42 2b       	or	r20, r18
    14c4:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    14c6:	ee 89       	ldd	r30, Y+22	; 0x16
    14c8:	ff 89       	ldd	r31, Y+23	; 0x17
    14ca:	40 81       	ld	r20, Z
    14cc:	9c 01       	movw	r18, r24
    14ce:	0b 8c       	ldd	r0, Y+27	; 0x1b
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <_ZN14HardwareSerial5beginEm+0xb4>
    14d2:	22 0f       	add	r18, r18
    14d4:	33 1f       	adc	r19, r19
    14d6:	0a 94       	dec	r0
    14d8:	e2 f7       	brpl	.-8      	; 0x14d2 <_ZN14HardwareSerial5beginEm+0xb0>
    14da:	42 2b       	or	r20, r18
    14dc:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    14de:	ee 89       	ldd	r30, Y+22	; 0x16
    14e0:	ff 89       	ldd	r31, Y+23	; 0x17
    14e2:	40 81       	ld	r20, Z
    14e4:	9c 01       	movw	r18, r24
    14e6:	0c 8c       	ldd	r0, Y+28	; 0x1c
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <_ZN14HardwareSerial5beginEm+0xcc>
    14ea:	22 0f       	add	r18, r18
    14ec:	33 1f       	adc	r19, r19
    14ee:	0a 94       	dec	r0
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <_ZN14HardwareSerial5beginEm+0xc8>
    14f2:	42 2b       	or	r20, r18
    14f4:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    14f6:	ee 89       	ldd	r30, Y+22	; 0x16
    14f8:	ff 89       	ldd	r31, Y+23	; 0x17
    14fa:	20 81       	ld	r18, Z
    14fc:	0d 8c       	ldd	r0, Y+29	; 0x1d
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <_ZN14HardwareSerial5beginEm+0xe2>
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	0a 94       	dec	r0
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <_ZN14HardwareSerial5beginEm+0xde>
    1508:	80 95       	com	r24
    150a:	82 23       	and	r24, r18
    150c:	80 83       	st	Z, r24
}
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	1f 91       	pop	r17
    1514:	0f 91       	pop	r16
    1516:	ff 90       	pop	r15
    1518:	ef 90       	pop	r14
    151a:	df 90       	pop	r13
    151c:	08 95       	ret

0000151e <_GLOBAL__I_rx_buffer>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    151e:	1f 93       	push	r17
    1520:	cf 93       	push	r28
    1522:	df 93       	push	r29
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1524:	10 92 6a 05 	sts	0x056A, r1
    1528:	10 92 69 05 	sts	0x0569, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    152c:	88 ee       	ldi	r24, 0xE8	; 232
    152e:	93 e0       	ldi	r25, 0x03	; 3
    1530:	a0 e0       	ldi	r26, 0x00	; 0
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	80 93 6b 05 	sts	0x056B, r24
    1538:	90 93 6c 05 	sts	0x056C, r25
    153c:	a0 93 6d 05 	sts	0x056D, r26
    1540:	b0 93 6e 05 	sts	0x056E, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    1544:	e9 e6       	ldi	r30, 0x69	; 105
    1546:	f5 e0       	ldi	r31, 0x05	; 5
    1548:	26 e0       	ldi	r18, 0x06	; 6
    154a:	33 e0       	ldi	r19, 0x03	; 3
    154c:	32 93       	st	-Z, r19
    154e:	22 93       	st	-Z, r18
{
  _rx_buffer = rx_buffer;
    1550:	47 e4       	ldi	r20, 0x47	; 71
    1552:	53 e0       	ldi	r21, 0x03	; 3
    1554:	55 87       	std	Z+13, r21	; 0x0d
    1556:	44 87       	std	Z+12, r20	; 0x0c
  _tx_buffer = tx_buffer;
    1558:	4b e8       	ldi	r20, 0x8B	; 139
    155a:	53 e0       	ldi	r21, 0x03	; 3
    155c:	57 87       	std	Z+15, r21	; 0x0f
    155e:	46 87       	std	Z+14, r20	; 0x0e
  _ubrrh = ubrrh;
    1560:	45 ec       	ldi	r20, 0xC5	; 197
    1562:	50 e0       	ldi	r21, 0x00	; 0
    1564:	51 8b       	std	Z+17, r21	; 0x11
    1566:	40 8b       	std	Z+16, r20	; 0x10
  _ubrrl = ubrrl;
    1568:	44 ec       	ldi	r20, 0xC4	; 196
    156a:	50 e0       	ldi	r21, 0x00	; 0
    156c:	53 8b       	std	Z+19, r21	; 0x13
    156e:	42 8b       	std	Z+18, r20	; 0x12
  _ucsra = ucsra;
    1570:	40 ec       	ldi	r20, 0xC0	; 192
    1572:	50 e0       	ldi	r21, 0x00	; 0
    1574:	55 8b       	std	Z+21, r21	; 0x15
    1576:	44 8b       	std	Z+20, r20	; 0x14
  _ucsrb = ucsrb;
    1578:	41 ec       	ldi	r20, 0xC1	; 193
    157a:	50 e0       	ldi	r21, 0x00	; 0
    157c:	57 8b       	std	Z+23, r21	; 0x17
    157e:	46 8b       	std	Z+22, r20	; 0x16
  _udr = udr;
    1580:	46 ec       	ldi	r20, 0xC6	; 198
    1582:	50 e0       	ldi	r21, 0x00	; 0
    1584:	51 8f       	std	Z+25, r21	; 0x19
    1586:	40 8f       	std	Z+24, r20	; 0x18
  _rxen = rxen;
    1588:	14 e0       	ldi	r17, 0x04	; 4
    158a:	12 8f       	std	Z+26, r17	; 0x1a
  _txen = txen;
    158c:	73 e0       	ldi	r23, 0x03	; 3
    158e:	73 8f       	std	Z+27, r23	; 0x1b
  _rxcie = rxcie;
    1590:	67 e0       	ldi	r22, 0x07	; 7
    1592:	64 8f       	std	Z+28, r22	; 0x1c
  _udrie = udrie;
    1594:	55 e0       	ldi	r21, 0x05	; 5
    1596:	55 8f       	std	Z+29, r21	; 0x1d
  _u2x = u2x;
    1598:	41 e0       	ldi	r20, 0x01	; 1
    159a:	46 8f       	std	Z+30, r20	; 0x1e
    159c:	10 92 89 05 	sts	0x0589, r1
    15a0:	10 92 88 05 	sts	0x0588, r1
    15a4:	80 93 8a 05 	sts	0x058A, r24
    15a8:	90 93 8b 05 	sts	0x058B, r25
    15ac:	a0 93 8c 05 	sts	0x058C, r26
    15b0:	b0 93 8d 05 	sts	0x058D, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    15b4:	e8 e8       	ldi	r30, 0x88	; 136
    15b6:	f5 e0       	ldi	r31, 0x05	; 5
    15b8:	32 93       	st	-Z, r19
    15ba:	22 93       	st	-Z, r18
{
  _rx_buffer = rx_buffer;
    15bc:	cf ec       	ldi	r28, 0xCF	; 207
    15be:	d3 e0       	ldi	r29, 0x03	; 3
    15c0:	d5 87       	std	Z+13, r29	; 0x0d
    15c2:	c4 87       	std	Z+12, r28	; 0x0c
  _tx_buffer = tx_buffer;
    15c4:	c3 e1       	ldi	r28, 0x13	; 19
    15c6:	d4 e0       	ldi	r29, 0x04	; 4
    15c8:	d7 87       	std	Z+15, r29	; 0x0f
    15ca:	c6 87       	std	Z+14, r28	; 0x0e
  _ubrrh = ubrrh;
    15cc:	cd ec       	ldi	r28, 0xCD	; 205
    15ce:	d0 e0       	ldi	r29, 0x00	; 0
    15d0:	d1 8b       	std	Z+17, r29	; 0x11
    15d2:	c0 8b       	std	Z+16, r28	; 0x10
  _ubrrl = ubrrl;
    15d4:	cc ec       	ldi	r28, 0xCC	; 204
    15d6:	d0 e0       	ldi	r29, 0x00	; 0
    15d8:	d3 8b       	std	Z+19, r29	; 0x13
    15da:	c2 8b       	std	Z+18, r28	; 0x12
  _ucsra = ucsra;
    15dc:	c8 ec       	ldi	r28, 0xC8	; 200
    15de:	d0 e0       	ldi	r29, 0x00	; 0
    15e0:	d5 8b       	std	Z+21, r29	; 0x15
    15e2:	c4 8b       	std	Z+20, r28	; 0x14
  _ucsrb = ucsrb;
    15e4:	c9 ec       	ldi	r28, 0xC9	; 201
    15e6:	d0 e0       	ldi	r29, 0x00	; 0
    15e8:	d7 8b       	std	Z+23, r29	; 0x17
    15ea:	c6 8b       	std	Z+22, r28	; 0x16
  _udr = udr;
    15ec:	ce ec       	ldi	r28, 0xCE	; 206
    15ee:	d0 e0       	ldi	r29, 0x00	; 0
    15f0:	d1 8f       	std	Z+25, r29	; 0x19
    15f2:	c0 8f       	std	Z+24, r28	; 0x18
  _rxen = rxen;
    15f4:	12 8f       	std	Z+26, r17	; 0x1a
  _txen = txen;
    15f6:	73 8f       	std	Z+27, r23	; 0x1b
  _rxcie = rxcie;
    15f8:	64 8f       	std	Z+28, r22	; 0x1c
  _udrie = udrie;
    15fa:	55 8f       	std	Z+29, r21	; 0x1d
  _u2x = u2x;
    15fc:	46 8f       	std	Z+30, r20	; 0x1e
    15fe:	10 92 a8 05 	sts	0x05A8, r1
    1602:	10 92 a7 05 	sts	0x05A7, r1
    1606:	80 93 a9 05 	sts	0x05A9, r24
    160a:	90 93 aa 05 	sts	0x05AA, r25
    160e:	a0 93 ab 05 	sts	0x05AB, r26
    1612:	b0 93 ac 05 	sts	0x05AC, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    1616:	e7 ea       	ldi	r30, 0xA7	; 167
    1618:	f5 e0       	ldi	r31, 0x05	; 5
    161a:	32 93       	st	-Z, r19
    161c:	22 93       	st	-Z, r18
{
  _rx_buffer = rx_buffer;
    161e:	c7 e5       	ldi	r28, 0x57	; 87
    1620:	d4 e0       	ldi	r29, 0x04	; 4
    1622:	d5 87       	std	Z+13, r29	; 0x0d
    1624:	c4 87       	std	Z+12, r28	; 0x0c
  _tx_buffer = tx_buffer;
    1626:	cb e9       	ldi	r28, 0x9B	; 155
    1628:	d4 e0       	ldi	r29, 0x04	; 4
    162a:	d7 87       	std	Z+15, r29	; 0x0f
    162c:	c6 87       	std	Z+14, r28	; 0x0e
  _ubrrh = ubrrh;
    162e:	c5 ed       	ldi	r28, 0xD5	; 213
    1630:	d0 e0       	ldi	r29, 0x00	; 0
    1632:	d1 8b       	std	Z+17, r29	; 0x11
    1634:	c0 8b       	std	Z+16, r28	; 0x10
  _ubrrl = ubrrl;
    1636:	c4 ed       	ldi	r28, 0xD4	; 212
    1638:	d0 e0       	ldi	r29, 0x00	; 0
    163a:	d3 8b       	std	Z+19, r29	; 0x13
    163c:	c2 8b       	std	Z+18, r28	; 0x12
  _ucsra = ucsra;
    163e:	c0 ed       	ldi	r28, 0xD0	; 208
    1640:	d0 e0       	ldi	r29, 0x00	; 0
    1642:	d5 8b       	std	Z+21, r29	; 0x15
    1644:	c4 8b       	std	Z+20, r28	; 0x14
  _ucsrb = ucsrb;
    1646:	c1 ed       	ldi	r28, 0xD1	; 209
    1648:	d0 e0       	ldi	r29, 0x00	; 0
    164a:	d7 8b       	std	Z+23, r29	; 0x17
    164c:	c6 8b       	std	Z+22, r28	; 0x16
  _udr = udr;
    164e:	c6 ed       	ldi	r28, 0xD6	; 214
    1650:	d0 e0       	ldi	r29, 0x00	; 0
    1652:	d1 8f       	std	Z+25, r29	; 0x19
    1654:	c0 8f       	std	Z+24, r28	; 0x18
  _rxen = rxen;
    1656:	12 8f       	std	Z+26, r17	; 0x1a
  _txen = txen;
    1658:	73 8f       	std	Z+27, r23	; 0x1b
  _rxcie = rxcie;
    165a:	64 8f       	std	Z+28, r22	; 0x1c
  _udrie = udrie;
    165c:	55 8f       	std	Z+29, r21	; 0x1d
  _u2x = u2x;
    165e:	46 8f       	std	Z+30, r20	; 0x1e
    1660:	10 92 c7 05 	sts	0x05C7, r1
    1664:	10 92 c6 05 	sts	0x05C6, r1
    1668:	80 93 c8 05 	sts	0x05C8, r24
    166c:	90 93 c9 05 	sts	0x05C9, r25
    1670:	a0 93 ca 05 	sts	0x05CA, r26
    1674:	b0 93 cb 05 	sts	0x05CB, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    1678:	e6 ec       	ldi	r30, 0xC6	; 198
    167a:	f5 e0       	ldi	r31, 0x05	; 5
    167c:	32 93       	st	-Z, r19
    167e:	22 93       	st	-Z, r18
{
  _rx_buffer = rx_buffer;
    1680:	8f ed       	ldi	r24, 0xDF	; 223
    1682:	94 e0       	ldi	r25, 0x04	; 4
    1684:	95 87       	std	Z+13, r25	; 0x0d
    1686:	84 87       	std	Z+12, r24	; 0x0c
  _tx_buffer = tx_buffer;
    1688:	83 e2       	ldi	r24, 0x23	; 35
    168a:	95 e0       	ldi	r25, 0x05	; 5
    168c:	97 87       	std	Z+15, r25	; 0x0f
    168e:	86 87       	std	Z+14, r24	; 0x0e
  _ubrrh = ubrrh;
    1690:	85 e3       	ldi	r24, 0x35	; 53
    1692:	91 e0       	ldi	r25, 0x01	; 1
    1694:	91 8b       	std	Z+17, r25	; 0x11
    1696:	80 8b       	std	Z+16, r24	; 0x10
  _ubrrl = ubrrl;
    1698:	84 e3       	ldi	r24, 0x34	; 52
    169a:	91 e0       	ldi	r25, 0x01	; 1
    169c:	93 8b       	std	Z+19, r25	; 0x13
    169e:	82 8b       	std	Z+18, r24	; 0x12
  _ucsra = ucsra;
    16a0:	80 e3       	ldi	r24, 0x30	; 48
    16a2:	91 e0       	ldi	r25, 0x01	; 1
    16a4:	95 8b       	std	Z+21, r25	; 0x15
    16a6:	84 8b       	std	Z+20, r24	; 0x14
  _ucsrb = ucsrb;
    16a8:	81 e3       	ldi	r24, 0x31	; 49
    16aa:	91 e0       	ldi	r25, 0x01	; 1
    16ac:	97 8b       	std	Z+23, r25	; 0x17
    16ae:	86 8b       	std	Z+22, r24	; 0x16
  _udr = udr;
    16b0:	86 e3       	ldi	r24, 0x36	; 54
    16b2:	91 e0       	ldi	r25, 0x01	; 1
    16b4:	91 8f       	std	Z+25, r25	; 0x19
    16b6:	80 8f       	std	Z+24, r24	; 0x18
  _rxen = rxen;
    16b8:	12 8f       	std	Z+26, r17	; 0x1a
  _txen = txen;
    16ba:	73 8f       	std	Z+27, r23	; 0x1b
  _rxcie = rxcie;
    16bc:	64 8f       	std	Z+28, r22	; 0x1c
  _udrie = udrie;
    16be:	55 8f       	std	Z+29, r21	; 0x1d
  _u2x = u2x;
    16c0:	46 8f       	std	Z+30, r20	; 0x1e
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    16c2:	df 91       	pop	r29
    16c4:	cf 91       	pop	r28
    16c6:	1f 91       	pop	r17
    16c8:	08 95       	ret

000016ca <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    16ca:	8f 92       	push	r8
    16cc:	9f 92       	push	r9
    16ce:	af 92       	push	r10
    16d0:	bf 92       	push	r11
    16d2:	cf 92       	push	r12
    16d4:	df 92       	push	r13
    16d6:	ef 92       	push	r14
    16d8:	ff 92       	push	r15
    16da:	0f 93       	push	r16
    16dc:	1f 93       	push	r17
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	4c 01       	movw	r8, r24
    16e4:	7b 01       	movw	r14, r22
bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
    16e6:	82 e0       	ldi	r24, 0x02	; 2
    16e8:	a8 2e       	mov	r10, r24
    16ea:	b1 2c       	mov	r11, r1
    16ec:	a8 0c       	add	r10, r8
    16ee:	b9 1c       	adc	r11, r9
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    16f0:	c0 e0       	ldi	r28, 0x00	; 0
    16f2:	d0 e0       	ldi	r29, 0x00	; 0
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    16f4:	cc 24       	eor	r12, r12
    16f6:	dd 24       	eor	r13, r13
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
    16f8:	f5 01       	movw	r30, r10
    16fa:	61 91       	ld	r22, Z+
    16fc:	5f 01       	movw	r10, r30
    16fe:	c7 01       	movw	r24, r14
    1700:	4a e0       	ldi	r20, 0x0A	; 10
    1702:	50 e0       	ldi	r21, 0x00	; 0
    1704:	0e 94 c4 0c 	call	0x1988	; 0x1988 <_ZN5Print5printEhi>
    1708:	8c 01       	movw	r16, r24
        n += p.print('.');
    170a:	c7 01       	movw	r24, r14
    170c:	6e e2       	ldi	r22, 0x2E	; 46
    170e:	0e 94 18 0c 	call	0x1830	; 0x1830 <_ZN5Print5printEc>
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
    1712:	08 0f       	add	r16, r24
    1714:	19 1f       	adc	r17, r25
        n += p.print('.');
    1716:	c0 0e       	add	r12, r16
    1718:	d1 1e       	adc	r13, r17
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    171a:	21 96       	adiw	r28, 0x01	; 1
    171c:	c3 30       	cpi	r28, 0x03	; 3
    171e:	d1 05       	cpc	r29, r1
    1720:	59 f7       	brne	.-42     	; 0x16f8 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    1722:	c7 01       	movw	r24, r14
    1724:	f4 01       	movw	r30, r8
    1726:	65 81       	ldd	r22, Z+5	; 0x05
    1728:	4a e0       	ldi	r20, 0x0A	; 10
    172a:	50 e0       	ldi	r21, 0x00	; 0
    172c:	0e 94 c4 0c 	call	0x1988	; 0x1988 <_ZN5Print5printEhi>
    1730:	c8 0e       	add	r12, r24
    1732:	d9 1e       	adc	r13, r25
    return n;
}
    1734:	c6 01       	movw	r24, r12
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	1f 91       	pop	r17
    173c:	0f 91       	pop	r16
    173e:	ff 90       	pop	r15
    1740:	ef 90       	pop	r14
    1742:	df 90       	pop	r13
    1744:	cf 90       	pop	r12
    1746:	bf 90       	pop	r11
    1748:	af 90       	pop	r10
    174a:	9f 90       	pop	r9
    174c:	8f 90       	pop	r8
    174e:	08 95       	ret

00001750 <_GLOBAL__I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    1750:	86 e1       	ldi	r24, 0x16	; 22
    1752:	93 e0       	ldi	r25, 0x03	; 3
    1754:	90 93 e4 05 	sts	0x05E4, r25
    1758:	80 93 e3 05 	sts	0x05E3, r24
{
    _address[0] = first_octet;
    175c:	10 92 e5 05 	sts	0x05E5, r1
    _address[1] = second_octet;
    1760:	10 92 e6 05 	sts	0x05E6, r1
    _address[2] = third_octet;
    1764:	10 92 e7 05 	sts	0x05E7, r1
    _address[3] = fourth_octet;
    1768:	10 92 e8 05 	sts	0x05E8, r1
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
    176c:	08 95       	ret

0000176e <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    176e:	cf 92       	push	r12
    1770:	df 92       	push	r13
    1772:	ef 92       	push	r14
    1774:	ff 92       	push	r15
    1776:	0f 93       	push	r16
    1778:	1f 93       	push	r17
    177a:	cf 93       	push	r28
    177c:	df 93       	push	r29
    177e:	6c 01       	movw	r12, r24
    1780:	7b 01       	movw	r14, r22
    1782:	8a 01       	movw	r16, r20
  size_t n = 0;
    1784:	c0 e0       	ldi	r28, 0x00	; 0
    1786:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    1788:	0f c0       	rjmp	.+30     	; 0x17a8 <_ZN5Print5writeEPKhj+0x3a>
    n += write(*buffer++);
    178a:	d7 01       	movw	r26, r14
    178c:	6d 91       	ld	r22, X+
    178e:	7d 01       	movw	r14, r26
    1790:	d6 01       	movw	r26, r12
    1792:	ed 91       	ld	r30, X+
    1794:	fc 91       	ld	r31, X
    1796:	01 90       	ld	r0, Z+
    1798:	f0 81       	ld	r31, Z
    179a:	e0 2d       	mov	r30, r0
    179c:	c6 01       	movw	r24, r12
    179e:	19 95       	eicall
    17a0:	c8 0f       	add	r28, r24
    17a2:	d9 1f       	adc	r29, r25
    17a4:	01 50       	subi	r16, 0x01	; 1
    17a6:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    17a8:	01 15       	cp	r16, r1
    17aa:	11 05       	cpc	r17, r1
    17ac:	71 f7       	brne	.-36     	; 0x178a <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    17ae:	ce 01       	movw	r24, r28
    17b0:	df 91       	pop	r29
    17b2:	cf 91       	pop	r28
    17b4:	1f 91       	pop	r17
    17b6:	0f 91       	pop	r16
    17b8:	ff 90       	pop	r15
    17ba:	ef 90       	pop	r14
    17bc:	df 90       	pop	r13
    17be:	cf 90       	pop	r12
    17c0:	08 95       	ret

000017c2 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    17c2:	db 01       	movw	r26, r22
    17c4:	0d 90       	ld	r0, X+
    17c6:	00 20       	and	r0, r0
    17c8:	e9 f7       	brne	.-6      	; 0x17c4 <_ZN5Print5writeEPKc+0x2>
    17ca:	ad 01       	movw	r20, r26
    17cc:	41 50       	subi	r20, 0x01	; 1
    17ce:	50 40       	sbci	r21, 0x00	; 0
    17d0:	46 1b       	sub	r20, r22
    17d2:	57 0b       	sbc	r21, r23
    17d4:	dc 01       	movw	r26, r24
    17d6:	ed 91       	ld	r30, X+
    17d8:	fc 91       	ld	r31, X
    17da:	02 80       	ldd	r0, Z+2	; 0x02
    17dc:	f3 81       	ldd	r31, Z+3	; 0x03
    17de:	e0 2d       	mov	r30, r0
    17e0:	19 95       	eicall
    17e2:	08 95       	ret

000017e4 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    17e4:	ef 92       	push	r14
    17e6:	ff 92       	push	r15
    17e8:	0f 93       	push	r16
    17ea:	1f 93       	push	r17
    17ec:	cf 93       	push	r28
    17ee:	df 93       	push	r29
    17f0:	7c 01       	movw	r14, r24
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    17f2:	06 2f       	mov	r16, r22
    17f4:	17 2f       	mov	r17, r23
  size_t n = 0;
    17f6:	c0 e0       	ldi	r28, 0x00	; 0
    17f8:	d0 e0       	ldi	r29, 0x00	; 0
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    17fa:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    17fc:	0f 5f       	subi	r16, 0xFF	; 255
    17fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1800:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    1802:	66 23       	and	r22, r22
    1804:	51 f0       	breq	.+20     	; 0x181a <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
    1806:	f7 01       	movw	r30, r14
    1808:	a0 81       	ld	r26, Z
    180a:	b1 81       	ldd	r27, Z+1	; 0x01
    180c:	ed 91       	ld	r30, X+
    180e:	fc 91       	ld	r31, X
    1810:	c7 01       	movw	r24, r14
    1812:	19 95       	eicall
    1814:	c8 0f       	add	r28, r24
    1816:	d9 1f       	adc	r29, r25

size_t Print::print(const __FlashStringHelper *ifsh)
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
  size_t n = 0;
  while (1) {
    1818:	f0 cf       	rjmp	.-32     	; 0x17fa <_ZN5Print5printEPK19__FlashStringHelper+0x16>
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    n += write(c);
  }
  return n;
}
    181a:	ce 01       	movw	r24, r28
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	1f 91       	pop	r17
    1822:	0f 91       	pop	r16
    1824:	ff 90       	pop	r15
    1826:	ef 90       	pop	r14
    1828:	08 95       	ret

0000182a <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    182a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <_ZN5Print5writeEPKc>
}
    182e:	08 95       	ret

00001830 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
    1830:	dc 01       	movw	r26, r24
    1832:	ed 91       	ld	r30, X+
    1834:	fc 91       	ld	r31, X
    1836:	01 90       	ld	r0, Z+
    1838:	f0 81       	ld	r31, Z
    183a:	e0 2d       	mov	r30, r0
    183c:	19 95       	eicall
}
    183e:	08 95       	ret

00001840 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    1840:	0f 93       	push	r16
    1842:	1f 93       	push	r17
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
    1848:	ec 01       	movw	r28, r24
  size_t n = print('\r');
    184a:	6d e0       	ldi	r22, 0x0D	; 13
    184c:	0e 94 18 0c 	call	0x1830	; 0x1830 <_ZN5Print5printEc>
    1850:	8c 01       	movw	r16, r24
  n += print('\n');
    1852:	ce 01       	movw	r24, r28
    1854:	6a e0       	ldi	r22, 0x0A	; 10
    1856:	0e 94 18 0c 	call	0x1830	; 0x1830 <_ZN5Print5printEc>
    185a:	08 0f       	add	r16, r24
    185c:	19 1f       	adc	r17, r25
  return n;
}
    185e:	c8 01       	movw	r24, r16
    1860:	df 91       	pop	r29
    1862:	cf 91       	pop	r28
    1864:	1f 91       	pop	r17
    1866:	0f 91       	pop	r16
    1868:	08 95       	ret

0000186a <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
    186a:	0f 93       	push	r16
    186c:	1f 93       	push	r17
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
    1872:	ec 01       	movw	r28, r24
  size_t n = print(ifsh);
    1874:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <_ZN5Print5printEPK19__FlashStringHelper>
    1878:	8c 01       	movw	r16, r24
  n += println();
    187a:	ce 01       	movw	r24, r28
    187c:	0e 94 20 0c 	call	0x1840	; 0x1840 <_ZN5Print7printlnEv>
    1880:	08 0f       	add	r16, r24
    1882:	19 1f       	adc	r17, r25
  return n;
}
    1884:	c8 01       	movw	r24, r16
    1886:	df 91       	pop	r29
    1888:	cf 91       	pop	r28
    188a:	1f 91       	pop	r17
    188c:	0f 91       	pop	r16
    188e:	08 95       	ret

00001890 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    1890:	0f 93       	push	r16
    1892:	1f 93       	push	r17
    1894:	cf 93       	push	r28
    1896:	df 93       	push	r29
    1898:	ec 01       	movw	r28, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    189a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <_ZN5Print5writeEPKc>
    189e:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    18a0:	ce 01       	movw	r24, r28
    18a2:	0e 94 20 0c 	call	0x1840	; 0x1840 <_ZN5Print7printlnEv>
    18a6:	08 0f       	add	r16, r24
    18a8:	19 1f       	adc	r17, r25
  return n;
}
    18aa:	c8 01       	movw	r24, r16
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	1f 91       	pop	r17
    18b2:	0f 91       	pop	r16
    18b4:	08 95       	ret

000018b6 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    18b6:	8f 92       	push	r8
    18b8:	9f 92       	push	r9
    18ba:	af 92       	push	r10
    18bc:	bf 92       	push	r11
    18be:	cf 92       	push	r12
    18c0:	df 92       	push	r13
    18c2:	ef 92       	push	r14
    18c4:	ff 92       	push	r15
    18c6:	0f 93       	push	r16
    18c8:	1f 93       	push	r17
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	a1 97       	sbiw	r28, 0x21	; 33
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	cd bf       	out	0x3d, r28	; 61
    18de:	6c 01       	movw	r12, r24
    18e0:	04 2f       	mov	r16, r20
    18e2:	e5 2f       	mov	r30, r21
    18e4:	cb 01       	movw	r24, r22
    18e6:	12 2f       	mov	r17, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    18e8:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    18ea:	22 30       	cpi	r18, 0x02	; 2
    18ec:	08 f4       	brcc	.+2      	; 0x18f0 <_ZN5Print11printNumberEmh+0x3a>
    18ee:	1a e0       	ldi	r17, 0x0A	; 10
    18f0:	21 e2       	ldi	r18, 0x21	; 33
    18f2:	e2 2e       	mov	r14, r18
    18f4:	f1 2c       	mov	r15, r1
    18f6:	ec 0e       	add	r14, r28
    18f8:	fd 1e       	adc	r15, r29

  do {
    unsigned long m = n;
    n /= base;
    18fa:	81 2e       	mov	r8, r17
    18fc:	99 24       	eor	r9, r9
    18fe:	aa 24       	eor	r10, r10
    1900:	bb 24       	eor	r11, r11
    1902:	03 c0       	rjmp	.+6      	; 0x190a <_ZN5Print11printNumberEmh+0x54>
    1904:	02 2f       	mov	r16, r18
    1906:	e3 2f       	mov	r30, r19
    1908:	ca 01       	movw	r24, r20
    190a:	60 2f       	mov	r22, r16
    190c:	7e 2f       	mov	r23, r30
    190e:	a5 01       	movw	r20, r10
    1910:	94 01       	movw	r18, r8
    1912:	0e 94 ba 1a 	call	0x3574	; 0x3574 <__udivmodsi4>
    char c = m - base * n;
    1916:	12 9f       	mul	r17, r18
    1918:	80 2d       	mov	r24, r0
    191a:	11 24       	eor	r1, r1
    191c:	08 1b       	sub	r16, r24
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    191e:	08 94       	sec
    1920:	e1 08       	sbc	r14, r1
    1922:	f1 08       	sbc	r15, r1
    1924:	0a 30       	cpi	r16, 0x0A	; 10
    1926:	10 f4       	brcc	.+4      	; 0x192c <_ZN5Print11printNumberEmh+0x76>
    1928:	00 5d       	subi	r16, 0xD0	; 208
    192a:	01 c0       	rjmp	.+2      	; 0x192e <_ZN5Print11printNumberEmh+0x78>
    192c:	09 5c       	subi	r16, 0xC9	; 201
    192e:	f7 01       	movw	r30, r14
    1930:	00 83       	st	Z, r16
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    1932:	21 15       	cp	r18, r1
    1934:	31 05       	cpc	r19, r1
    1936:	41 05       	cpc	r20, r1
    1938:	51 05       	cpc	r21, r1
    193a:	21 f7       	brne	.-56     	; 0x1904 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    193c:	c6 01       	movw	r24, r12
    193e:	b7 01       	movw	r22, r14
    1940:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <_ZN5Print5writeEPKc>
}
    1944:	a1 96       	adiw	r28, 0x21	; 33
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	1f 91       	pop	r17
    1956:	0f 91       	pop	r16
    1958:	ff 90       	pop	r15
    195a:	ef 90       	pop	r14
    195c:	df 90       	pop	r13
    195e:	cf 90       	pop	r12
    1960:	bf 90       	pop	r11
    1962:	af 90       	pop	r10
    1964:	9f 90       	pop	r9
    1966:	8f 90       	pop	r8
    1968:	08 95       	ret

0000196a <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    196a:	21 15       	cp	r18, r1
    196c:	31 05       	cpc	r19, r1
    196e:	49 f4       	brne	.+18     	; 0x1982 <_ZN5Print5printEmi+0x18>
    1970:	dc 01       	movw	r26, r24
    1972:	ed 91       	ld	r30, X+
    1974:	fc 91       	ld	r31, X
    1976:	01 90       	ld	r0, Z+
    1978:	f0 81       	ld	r31, Z
    197a:	e0 2d       	mov	r30, r0
    197c:	64 2f       	mov	r22, r20
    197e:	19 95       	eicall
    1980:	08 95       	ret
  else return printNumber(n, base);
    1982:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <_ZN5Print11printNumberEmh>
}
    1986:	08 95       	ret

00001988 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    1988:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    198a:	46 2f       	mov	r20, r22
    198c:	50 e0       	ldi	r21, 0x00	; 0
    198e:	60 e0       	ldi	r22, 0x00	; 0
    1990:	70 e0       	ldi	r23, 0x00	; 0
    1992:	0e 94 b5 0c 	call	0x196a	; 0x196a <_ZN5Print5printEmi>
}
    1996:	08 95       	ret

00001998 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    1998:	0f 93       	push	r16
    199a:	1f 93       	push	r17
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
    19a0:	ec 01       	movw	r28, r24
    19a2:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    19a4:	46 2f       	mov	r20, r22
    19a6:	50 e0       	ldi	r21, 0x00	; 0
    19a8:	60 e0       	ldi	r22, 0x00	; 0
    19aa:	70 e0       	ldi	r23, 0x00	; 0
    19ac:	0e 94 b5 0c 	call	0x196a	; 0x196a <_ZN5Print5printEmi>
    19b0:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    19b2:	ce 01       	movw	r24, r28
    19b4:	0e 94 20 0c 	call	0x1840	; 0x1840 <_ZN5Print7printlnEv>
    19b8:	08 0f       	add	r16, r24
    19ba:	19 1f       	adc	r17, r25
  return n;
}
    19bc:	c8 01       	movw	r24, r16
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	1f 91       	pop	r17
    19c4:	0f 91       	pop	r16
    19c6:	08 95       	ret

000019c8 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
    19c8:	cf 93       	push	r28
    19ca:	df 93       	push	r29
    19cc:	ec 01       	movw	r28, r24
  int c;
  _startMillis = millis();
    19ce:	0e 94 95 04 	call	0x92a	; 0x92a <millis>
    19d2:	68 87       	std	Y+8, r22	; 0x08
    19d4:	79 87       	std	Y+9, r23	; 0x09
    19d6:	8a 87       	std	Y+10, r24	; 0x0a
    19d8:	9b 87       	std	Y+11, r25	; 0x0b
  do {
    c = read();
    19da:	e8 81       	ld	r30, Y
    19dc:	f9 81       	ldd	r31, Y+1	; 0x01
    19de:	06 80       	ldd	r0, Z+6	; 0x06
    19e0:	f7 81       	ldd	r31, Z+7	; 0x07
    19e2:	e0 2d       	mov	r30, r0
    19e4:	ce 01       	movw	r24, r28
    19e6:	19 95       	eicall
    19e8:	9c 01       	movw	r18, r24
    if (c >= 0) return c;
    19ea:	97 ff       	sbrs	r25, 7
    19ec:	15 c0       	rjmp	.+42     	; 0x1a18 <_ZN6Stream9timedReadEv+0x50>
  } while(millis() - _startMillis < _timeout);
    19ee:	0e 94 95 04 	call	0x92a	; 0x92a <millis>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
    19f2:	28 85       	ldd	r18, Y+8	; 0x08
    19f4:	39 85       	ldd	r19, Y+9	; 0x09
    19f6:	4a 85       	ldd	r20, Y+10	; 0x0a
    19f8:	5b 85       	ldd	r21, Y+11	; 0x0b
    19fa:	62 1b       	sub	r22, r18
    19fc:	73 0b       	sbc	r23, r19
    19fe:	84 0b       	sbc	r24, r20
    1a00:	95 0b       	sbc	r25, r21
    1a02:	2c 81       	ldd	r18, Y+4	; 0x04
    1a04:	3d 81       	ldd	r19, Y+5	; 0x05
    1a06:	4e 81       	ldd	r20, Y+6	; 0x06
    1a08:	5f 81       	ldd	r21, Y+7	; 0x07
    1a0a:	62 17       	cp	r22, r18
    1a0c:	73 07       	cpc	r23, r19
    1a0e:	84 07       	cpc	r24, r20
    1a10:	95 07       	cpc	r25, r21
    1a12:	18 f3       	brcs	.-58     	; 0x19da <_ZN6Stream9timedReadEv+0x12>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
    1a14:	2f ef       	ldi	r18, 0xFF	; 255
    1a16:	3f ef       	ldi	r19, 0xFF	; 255
}
    1a18:	c9 01       	movw	r24, r18
    1a1a:	df 91       	pop	r29
    1a1c:	cf 91       	pop	r28
    1a1e:	08 95       	ret

00001a20 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
    1a20:	cf 92       	push	r12
    1a22:	df 92       	push	r13
    1a24:	ef 92       	push	r14
    1a26:	ff 92       	push	r15
    1a28:	0f 93       	push	r16
    1a2a:	1f 93       	push	r17
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	6c 01       	movw	r12, r24
    1a32:	eb 01       	movw	r28, r22
    1a34:	7a 01       	movw	r14, r20
  size_t count = 0;
    1a36:	00 e0       	ldi	r16, 0x00	; 0
    1a38:	10 e0       	ldi	r17, 0x00	; 0
  while (count < length) {
    1a3a:	08 c0       	rjmp	.+16     	; 0x1a4c <_ZN6Stream9readBytesEPcj+0x2c>
    int c = timedRead();
    1a3c:	c6 01       	movw	r24, r12
    1a3e:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
    1a42:	97 fd       	sbrc	r25, 7
    1a44:	06 c0       	rjmp	.+12     	; 0x1a52 <_ZN6Stream9readBytesEPcj+0x32>
    *buffer++ = (char)c;
    1a46:	89 93       	st	Y+, r24
    count++;
    1a48:	0f 5f       	subi	r16, 0xFF	; 255
    1a4a:	1f 4f       	sbci	r17, 0xFF	; 255
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
    1a4c:	0e 15       	cp	r16, r14
    1a4e:	1f 05       	cpc	r17, r15
    1a50:	a8 f3       	brcs	.-22     	; 0x1a3c <_ZN6Stream9readBytesEPcj+0x1c>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
    1a52:	c8 01       	movw	r24, r16
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	1f 91       	pop	r17
    1a5a:	0f 91       	pop	r16
    1a5c:	ff 90       	pop	r15
    1a5e:	ef 90       	pop	r14
    1a60:	df 90       	pop	r13
    1a62:	cf 90       	pop	r12
    1a64:	08 95       	ret

00001a66 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    1a66:	82 30       	cpi	r24, 0x02	; 2
    1a68:	b9 f0       	breq	.+46     	; 0x1a98 <_Z12disableTimerh+0x32>
    1a6a:	83 30       	cpi	r24, 0x03	; 3
    1a6c:	28 f4       	brcc	.+10     	; 0x1a78 <_Z12disableTimerh+0x12>
    1a6e:	88 23       	and	r24, r24
    1a70:	51 f0       	breq	.+20     	; 0x1a86 <_Z12disableTimerh+0x20>
    1a72:	81 30       	cpi	r24, 0x01	; 1
    1a74:	51 f5       	brne	.+84     	; 0x1aca <_Z12disableTimerh+0x64>
    1a76:	0a c0       	rjmp	.+20     	; 0x1a8c <_Z12disableTimerh+0x26>
    1a78:	84 30       	cpi	r24, 0x04	; 4
    1a7a:	11 f1       	breq	.+68     	; 0x1ac0 <_Z12disableTimerh+0x5a>
    1a7c:	84 30       	cpi	r24, 0x04	; 4
    1a7e:	e8 f0       	brcs	.+58     	; 0x1aba <_Z12disableTimerh+0x54>
    1a80:	85 30       	cpi	r24, 0x05	; 5
    1a82:	19 f5       	brne	.+70     	; 0x1aca <_Z12disableTimerh+0x64>
    1a84:	20 c0       	rjmp	.+64     	; 0x1ac6 <_Z12disableTimerh+0x60>
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    1a86:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    1a8a:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    1a8c:	80 91 6f 00 	lds	r24, 0x006F
    1a90:	8d 7f       	andi	r24, 0xFD	; 253
    1a92:	80 93 6f 00 	sts	0x006F, r24
      break;
    1a96:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    1a98:	80 91 70 00 	lds	r24, 0x0070
    1a9c:	8d 7f       	andi	r24, 0xFD	; 253
    1a9e:	80 93 70 00 	sts	0x0070, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    1aa8:	80 91 b1 00 	lds	r24, 0x00B1
    1aac:	88 7f       	andi	r24, 0xF8	; 248
    1aae:	84 60       	ori	r24, 0x04	; 4
    1ab0:	80 93 b1 00 	sts	0x00B1, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    1ab4:	10 92 b3 00 	sts	0x00B3, r1
      #endif
      break;
    1ab8:	08 95       	ret

#if defined(TIMSK3)
    case 3:
      TIMSK3 = 0;
    1aba:	10 92 71 00 	sts	0x0071, r1
      break;
    1abe:	08 95       	ret
#endif

#if defined(TIMSK4)
    case 4:
      TIMSK4 = 0;
    1ac0:	10 92 72 00 	sts	0x0072, r1
      break;
    1ac4:	08 95       	ret
#endif

#if defined(TIMSK5)
    case 5:
      TIMSK5 = 0;
    1ac6:	10 92 73 00 	sts	0x0073, r1
    1aca:	08 95       	ret

00001acc <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    1acc:	1f 93       	push	r17
    1ace:	18 2f       	mov	r17, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    1ad0:	80 91 00 03 	lds	r24, 0x0300
    1ad4:	81 17       	cp	r24, r17
    1ad6:	39 f4       	brne	.+14     	; 0x1ae6 <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    1ad8:	e4 ee       	ldi	r30, 0xE4	; 228
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	84 91       	lpm	r24, Z+
      tone_pins[i] = 255;
    1ade:	9f ef       	ldi	r25, 0xFF	; 255
    1ae0:	90 93 00 03 	sts	0x0300, r25
    1ae4:	01 c0       	rjmp	.+2      	; 0x1ae8 <_Z6noToneh+0x1c>
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
    1ae6:	8f ef       	ldi	r24, 0xFF	; 255
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
      tone_pins[i] = 255;
    }
  }
  
  disableTimer(_timer);
    1ae8:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    1aec:	81 2f       	mov	r24, r17
    1aee:	60 e0       	ldi	r22, 0x00	; 0
    1af0:	0e 94 2b 07 	call	0xe56	; 0xe56 <digitalWrite>
}
    1af4:	1f 91       	pop	r17
    1af6:	08 95       	ret

00001af8 <__vector_13>:
}
#endif


ISR(TIMER2_COMPA_vect)
{
    1af8:	1f 92       	push	r1
    1afa:	0f 92       	push	r0
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	0f 92       	push	r0
    1b00:	0b b6       	in	r0, 0x3b	; 59
    1b02:	0f 92       	push	r0
    1b04:	11 24       	eor	r1, r1
    1b06:	2f 93       	push	r18
    1b08:	3f 93       	push	r19
    1b0a:	4f 93       	push	r20
    1b0c:	5f 93       	push	r21
    1b0e:	6f 93       	push	r22
    1b10:	7f 93       	push	r23
    1b12:	8f 93       	push	r24
    1b14:	9f 93       	push	r25
    1b16:	af 93       	push	r26
    1b18:	bf 93       	push	r27
    1b1a:	ef 93       	push	r30
    1b1c:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    1b1e:	80 91 e9 05 	lds	r24, 0x05E9
    1b22:	90 91 ea 05 	lds	r25, 0x05EA
    1b26:	a0 91 eb 05 	lds	r26, 0x05EB
    1b2a:	b0 91 ec 05 	lds	r27, 0x05EC
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	a1 05       	cpc	r26, r1
    1b32:	b1 05       	cpc	r27, r1
    1b34:	51 f1       	breq	.+84     	; 0x1b8a <__vector_13+0x92>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    1b36:	e0 91 ed 05 	lds	r30, 0x05ED
    1b3a:	f0 91 ee 05 	lds	r31, 0x05EE
    1b3e:	80 81       	ld	r24, Z
    1b40:	90 91 ef 05 	lds	r25, 0x05EF
    1b44:	89 27       	eor	r24, r25
    1b46:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    1b48:	80 91 e9 05 	lds	r24, 0x05E9
    1b4c:	90 91 ea 05 	lds	r25, 0x05EA
    1b50:	a0 91 eb 05 	lds	r26, 0x05EB
    1b54:	b0 91 ec 05 	lds	r27, 0x05EC
    1b58:	18 16       	cp	r1, r24
    1b5a:	19 06       	cpc	r1, r25
    1b5c:	1a 06       	cpc	r1, r26
    1b5e:	1b 06       	cpc	r1, r27
    1b60:	c4 f4       	brge	.+48     	; 0x1b92 <__vector_13+0x9a>
      timer2_toggle_count--;
    1b62:	80 91 e9 05 	lds	r24, 0x05E9
    1b66:	90 91 ea 05 	lds	r25, 0x05EA
    1b6a:	a0 91 eb 05 	lds	r26, 0x05EB
    1b6e:	b0 91 ec 05 	lds	r27, 0x05EC
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	a1 09       	sbc	r26, r1
    1b76:	b1 09       	sbc	r27, r1
    1b78:	80 93 e9 05 	sts	0x05E9, r24
    1b7c:	90 93 ea 05 	sts	0x05EA, r25
    1b80:	a0 93 eb 05 	sts	0x05EB, r26
    1b84:	b0 93 ec 05 	sts	0x05EC, r27
    1b88:	04 c0       	rjmp	.+8      	; 0x1b92 <__vector_13+0x9a>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    1b8a:	80 91 00 03 	lds	r24, 0x0300
    1b8e:	0e 94 66 0d 	call	0x1acc	; 0x1acc <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    1b92:	ff 91       	pop	r31
    1b94:	ef 91       	pop	r30
    1b96:	bf 91       	pop	r27
    1b98:	af 91       	pop	r26
    1b9a:	9f 91       	pop	r25
    1b9c:	8f 91       	pop	r24
    1b9e:	7f 91       	pop	r23
    1ba0:	6f 91       	pop	r22
    1ba2:	5f 91       	pop	r21
    1ba4:	4f 91       	pop	r20
    1ba6:	3f 91       	pop	r19
    1ba8:	2f 91       	pop	r18
    1baa:	0f 90       	pop	r0
    1bac:	0b be       	out	0x3b, r0	; 59
    1bae:	0f 90       	pop	r0
    1bb0:	0f be       	out	0x3f, r0	; 63
    1bb2:	0f 90       	pop	r0
    1bb4:	1f 90       	pop	r1
    1bb6:	18 95       	reti

00001bb8 <main>:
#include <Arduino.h>

int main(void)
{
    1bb8:	cf 93       	push	r28
    1bba:	df 93       	push	r29
	init();
    1bbc:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1bc0:	0e 94 9f 19 	call	0x333e	; 0x333e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1bc4:	c4 ef       	ldi	r28, 0xF4	; 244
    1bc6:	d8 e0       	ldi	r29, 0x08	; 8
#endif
	
	setup();
    
	for (;;) {
		loop();
    1bc8:	0e 94 6f 1a 	call	0x34de	; 0x34de <loop>
		if (serialEventRun) serialEventRun();
    1bcc:	20 97       	sbiw	r28, 0x00	; 0
    1bce:	e1 f3       	breq	.-8      	; 0x1bc8 <main+0x10>
    1bd0:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <_Z14serialEventRunv>
    1bd4:	f9 cf       	rjmp	.-14     	; 0x1bc8 <main+0x10>

00001bd6 <_Znwj>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
    1bd6:	0e 94 0f 1b 	call	0x361e	; 0x361e <malloc>
}
    1bda:	08 95       	ret

00001bdc <_ZdlPv>:

void operator delete(void * ptr)
{
  free(ptr);
    1bdc:	0e 94 a9 1b 	call	0x3752	; 0x3752 <free>
} 
    1be0:	08 95       	ret

00001be2 <_ZN16AndroidAccessory5writeEh>:
{
    usb.outTransfer(1, out, len, (char *)buff);
    return len;
}

size_t AndroidAccessory::write(uint8_t c) {
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	0f 92       	push	r0
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	69 83       	std	Y+1, r22	; 0x01
  return write(&c, 1);
    1bee:	dc 01       	movw	r26, r24
    1bf0:	ed 91       	ld	r30, X+
    1bf2:	fc 91       	ld	r31, X
    1bf4:	04 84       	ldd	r0, Z+12	; 0x0c
    1bf6:	f5 85       	ldd	r31, Z+13	; 0x0d
    1bf8:	e0 2d       	mov	r30, r0
    1bfa:	be 01       	movw	r22, r28
    1bfc:	6f 5f       	subi	r22, 0xFF	; 255
    1bfe:	7f 4f       	sbci	r23, 0xFF	; 255
    1c00:	41 e0       	ldi	r20, 0x01	; 1
    1c02:	50 e0       	ldi	r21, 0x00	; 0
    1c04:	19 95       	eicall
}
    1c06:	0f 90       	pop	r0
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <_ZN16AndroidAccessory5flushEv>:

    from <http://arduino.cc/en/Serial/Flush>

    We're treating this as a no-op at the moment.
  */
}
    1c0e:	08 95       	ret

00001c10 <_ZN16AndroidAccessory5writeEPhj>:
{
    return usb.newInTransfer(1, in, len, (char *)buff, nakLimit);
}

size_t AndroidAccessory::write(uint8_t *buff, size_t len)
{
    1c10:	df 92       	push	r13
    1c12:	ef 92       	push	r14
    1c14:	ff 92       	push	r15
    1c16:	0f 93       	push	r16
    1c18:	1f 93       	push	r17
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	0f 92       	push	r0
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
    1c24:	fc 01       	movw	r30, r24
    1c26:	8b 01       	movw	r16, r22
    1c28:	d4 2e       	mov	r13, r20
    usb.outTransfer(1, out, len, (char *)buff);
    1c2a:	49 96       	adiw	r24, 0x19	; 25
    1c2c:	61 e0       	ldi	r22, 0x01	; 1
    1c2e:	44 8d       	ldd	r20, Z+28	; 0x1c
    1c30:	2d 2d       	mov	r18, r13
    1c32:	35 2f       	mov	r19, r21
    1c34:	e1 2c       	mov	r14, r1
    1c36:	7d e7       	ldi	r23, 0x7D	; 125
    1c38:	f7 2e       	mov	r15, r23
    1c3a:	59 83       	std	Y+1, r21	; 0x01
    1c3c:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN7UsbHost11outTransferEhhjPcj>
    return len;
}
    1c40:	8d 2d       	mov	r24, r13
    1c42:	59 81       	ldd	r21, Y+1	; 0x01
    1c44:	95 2f       	mov	r25, r21
    1c46:	0f 90       	pop	r0
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	1f 91       	pop	r17
    1c4e:	0f 91       	pop	r16
    1c50:	ff 90       	pop	r15
    1c52:	ef 90       	pop	r14
    1c54:	df 90       	pop	r13
    1c56:	08 95       	ret

00001c58 <_ZN7UsbHost11getDevDescrEhhjPcj>:
    1c58:	8f 92       	push	r8
    1c5a:	9f 92       	push	r9
    1c5c:	af 92       	push	r10
    1c5e:	bf 92       	push	r11
    1c60:	cf 92       	push	r12
    1c62:	ef 92       	push	r14
    1c64:	ff 92       	push	r15
    1c66:	0f 93       	push	r16
    1c68:	1f 93       	push	r17
    1c6a:	49 01       	movw	r8, r18
    1c6c:	00 d0       	rcall	.+0      	; 0x1c6e <_ZN7UsbHost11getDevDescrEhhjPcj+0x16>
    1c6e:	0f 92       	push	r0
    1c70:	ed b7       	in	r30, 0x3d	; 61
    1c72:	fe b7       	in	r31, 0x3e	; 62
    1c74:	12 83       	std	Z+2, r17	; 0x02
    1c76:	01 83       	std	Z+1, r16	; 0x01
    1c78:	f4 82       	std	Z+4, r15	; 0x04
    1c7a:	e3 82       	std	Z+3, r14	; 0x03
    1c7c:	20 e8       	ldi	r18, 0x80	; 128
    1c7e:	06 e0       	ldi	r16, 0x06	; 6
    1c80:	ee 24       	eor	r14, r14
    1c82:	cc 24       	eor	r12, r12
    1c84:	c3 94       	inc	r12
    1c86:	aa 24       	eor	r10, r10
    1c88:	bb 24       	eor	r11, r11
    1c8a:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <_ZN7UsbHost7ctrlReqEhhhhhhjjPcj>
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	1f 91       	pop	r17
    1c98:	0f 91       	pop	r16
    1c9a:	ff 90       	pop	r15
    1c9c:	ef 90       	pop	r14
    1c9e:	cf 90       	pop	r12
    1ca0:	bf 90       	pop	r11
    1ca2:	af 90       	pop	r10
    1ca4:	9f 90       	pop	r9
    1ca6:	8f 90       	pop	r8
    1ca8:	08 95       	ret

00001caa <_ZN7UsbHost12getConfDescrEhhjhPcj>:
//get device descriptor
inline byte UsbHost::getDevDescr( byte addr, byte ep, unsigned int nbytes, char* dataptr, unsigned int nak_limit ) {
    return( ctrlReq( addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, dataptr, nak_limit ));
}
//get configuration descriptor  
inline byte UsbHost::getConfDescr( byte addr, byte ep, unsigned int nbytes, byte conf, char* dataptr, unsigned int nak_limit ) {
    1caa:	8f 92       	push	r8
    1cac:	9f 92       	push	r9
    1cae:	af 92       	push	r10
    1cb0:	bf 92       	push	r11
    1cb2:	cf 92       	push	r12
    1cb4:	df 92       	push	r13
    1cb6:	ef 92       	push	r14
    1cb8:	ff 92       	push	r15
    1cba:	0f 93       	push	r16
    1cbc:	49 01       	movw	r8, r18
    1cbe:	50 2f       	mov	r21, r16
        return( ctrlReq( addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, dataptr, nak_limit ));
    1cc0:	00 d0       	rcall	.+0      	; 0x1cc2 <_ZN7UsbHost12getConfDescrEhhjhPcj+0x18>
    1cc2:	0f 92       	push	r0
    1cc4:	ed b7       	in	r30, 0x3d	; 61
    1cc6:	fe b7       	in	r31, 0x3e	; 62
    1cc8:	f2 82       	std	Z+2, r15	; 0x02
    1cca:	e1 82       	std	Z+1, r14	; 0x01
    1ccc:	d4 82       	std	Z+4, r13	; 0x04
    1cce:	c3 82       	std	Z+3, r12	; 0x03
    1cd0:	20 e8       	ldi	r18, 0x80	; 128
    1cd2:	06 e0       	ldi	r16, 0x06	; 6
    1cd4:	e5 2e       	mov	r14, r21
    1cd6:	e2 e0       	ldi	r30, 0x02	; 2
    1cd8:	ce 2e       	mov	r12, r30
    1cda:	aa 24       	eor	r10, r10
    1cdc:	bb 24       	eor	r11, r11
    1cde:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <_ZN7UsbHost7ctrlReqEhhhhhhjjPcj>
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	0f 90       	pop	r0
}
    1cea:	0f 91       	pop	r16
    1cec:	ff 90       	pop	r15
    1cee:	ef 90       	pop	r14
    1cf0:	df 90       	pop	r13
    1cf2:	cf 90       	pop	r12
    1cf4:	bf 90       	pop	r11
    1cf6:	af 90       	pop	r10
    1cf8:	9f 90       	pop	r9
    1cfa:	8f 90       	pop	r8
    1cfc:	08 95       	ret

00001cfe <_ZN7UsbHost7setConfEhhhj>:
//set address 
inline byte UsbHost::setAddr( byte oldaddr, byte ep, byte newaddr, unsigned int nak_limit ) {
    return( ctrlReq( oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, NULL, nak_limit ));
}
//set configuration
inline byte UsbHost::setConf( byte addr, byte ep, byte conf_value, unsigned int nak_limit ) {
    1cfe:	8f 92       	push	r8
    1d00:	9f 92       	push	r9
    1d02:	af 92       	push	r10
    1d04:	bf 92       	push	r11
    1d06:	cf 92       	push	r12
    1d08:	ef 92       	push	r14
    1d0a:	0f 93       	push	r16
    1d0c:	1f 93       	push	r17
    1d0e:	e2 2e       	mov	r14, r18
    return( ctrlReq( addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, NULL, nak_limit ));         
    1d10:	00 d0       	rcall	.+0      	; 0x1d12 <_ZN7UsbHost7setConfEhhhj+0x14>
    1d12:	0f 92       	push	r0
    1d14:	ed b7       	in	r30, 0x3d	; 61
    1d16:	fe b7       	in	r31, 0x3e	; 62
    1d18:	12 82       	std	Z+2, r1	; 0x02
    1d1a:	11 82       	std	Z+1, r1	; 0x01
    1d1c:	14 83       	std	Z+4, r17	; 0x04
    1d1e:	03 83       	std	Z+3, r16	; 0x03
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	09 e0       	ldi	r16, 0x09	; 9
    1d24:	cc 24       	eor	r12, r12
    1d26:	aa 24       	eor	r10, r10
    1d28:	bb 24       	eor	r11, r11
    1d2a:	88 24       	eor	r8, r8
    1d2c:	99 24       	eor	r9, r9
    1d2e:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <_ZN7UsbHost7ctrlReqEhhhhhhjjPcj>
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
}
    1d3a:	1f 91       	pop	r17
    1d3c:	0f 91       	pop	r16
    1d3e:	ef 90       	pop	r14
    1d40:	cf 90       	pop	r12
    1d42:	bf 90       	pop	r11
    1d44:	af 90       	pop	r10
    1d46:	9f 90       	pop	r9
    1d48:	8f 90       	pop	r8
    1d4a:	08 95       	ret

00001d4c <_ZN16AndroidAccessoryC1EPKcS1_S1_S1_S1_S1_>:
#define ACCESSORY_GET_PROTOCOL          51
#define ACCESSORY_SEND_STRING           52
#define ACCESSORY_START                 53


AndroidAccessory::AndroidAccessory(const char *manufacturer,
    1d4c:	cf 92       	push	r12
    1d4e:	df 92       	push	r13
    1d50:	ef 92       	push	r14
    1d52:	ff 92       	push	r15
    1d54:	0f 93       	push	r16
    1d56:	1f 93       	push	r17
    1d58:	cf 93       	push	r28
    1d5a:	df 93       	push	r29
    1d5c:	ec 01       	movw	r28, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1d5e:	1b 82       	std	Y+3, r1	; 0x03
    1d60:	1a 82       	std	Y+2, r1	; 0x02
    1d62:	88 ee       	ldi	r24, 0xE8	; 232
    1d64:	93 e0       	ldi	r25, 0x03	; 3
    1d66:	a0 e0       	ldi	r26, 0x00	; 0
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	8c 83       	std	Y+4, r24	; 0x04
    1d6c:	9d 83       	std	Y+5, r25	; 0x05
    1d6e:	ae 83       	std	Y+6, r26	; 0x06
    1d70:	bf 83       	std	Y+7, r27	; 0x07
                                                         model(model),
                                                         description(description),
                                                         version(version),
                                                         uri(uri),
                                                         serial(serial),
                                                         connected(false)
    1d72:	8c e1       	ldi	r24, 0x1C	; 28
    1d74:	93 e0       	ldi	r25, 0x03	; 3
    1d76:	99 83       	std	Y+1, r25	; 0x01
    1d78:	88 83       	st	Y, r24
    1d7a:	7d 87       	std	Y+13, r23	; 0x0d
    1d7c:	6c 87       	std	Y+12, r22	; 0x0c
    1d7e:	5f 87       	std	Y+15, r21	; 0x0f
    1d80:	4e 87       	std	Y+14, r20	; 0x0e
    1d82:	39 8b       	std	Y+17, r19	; 0x11
    1d84:	28 8b       	std	Y+16, r18	; 0x10
    1d86:	1b 8b       	std	Y+19, r17	; 0x13
    1d88:	0a 8b       	std	Y+18, r16	; 0x12
    1d8a:	fd 8a       	std	Y+21, r15	; 0x15
    1d8c:	ec 8a       	std	Y+20, r14	; 0x14
    1d8e:	df 8a       	std	Y+23, r13	; 0x17
    1d90:	ce 8a       	std	Y+22, r12	; 0x16
    1d92:	ce 01       	movw	r24, r28
    1d94:	48 96       	adiw	r24, 0x18	; 24
    1d96:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <_ZN8MAX3421EC1Ev>
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	49 96       	adiw	r24, 0x19	; 25
    1d9e:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <_ZN7UsbHostC1Ev>
    1da2:	1a 8e       	std	Y+26, r1	; 0x1a
{

}
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	1f 91       	pop	r17
    1daa:	0f 91       	pop	r16
    1dac:	ff 90       	pop	r15
    1dae:	ef 90       	pop	r14
    1db0:	df 90       	pop	r13
    1db2:	cf 90       	pop	r12
    1db4:	08 95       	ret

00001db6 <_ZN16AndroidAccessory7powerOnEv>:
  return true; // For forward compatibility with v2.x of the library
}

void AndroidAccessory::powerOn(void)
{
    max.powerOn();
    1db6:	48 96       	adiw	r24, 0x18	; 24
    1db8:	0e 94 da 13 	call	0x27b4	; 0x27b4 <_ZN8MAX3421E7powerOnEv>
    delay(200);
    1dbc:	68 ec       	ldi	r22, 0xC8	; 200
    1dbe:	70 e0       	ldi	r23, 0x00	; 0
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	0e 94 c9 04 	call	0x992	; 0x992 <delay>
}
    1dc8:	08 95       	ret

00001dca <_ZN16AndroidAccessory5beginEv>:
{

}

boolean AndroidAccessory::begin(void) {
  powerOn();
    1dca:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <_ZN16AndroidAccessory7powerOnEv>
  return true; // For forward compatibility with v2.x of the library
}
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	08 95       	ret

00001dd2 <_ZN16AndroidAccessory11getProtocolEh>:
    max.powerOn();
    delay(200);
}

int AndroidAccessory::getProtocol(byte addr)
{
    1dd2:	8f 92       	push	r8
    1dd4:	9f 92       	push	r9
    1dd6:	af 92       	push	r10
    1dd8:	bf 92       	push	r11
    1dda:	cf 92       	push	r12
    1ddc:	ef 92       	push	r14
    1dde:	0f 93       	push	r16
    1de0:	df 93       	push	r29
    1de2:	cf 93       	push	r28
    1de4:	0f 92       	push	r0
    1de6:	0f 92       	push	r0
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    uint16_t protocol = -1;
    1dec:	2f ef       	ldi	r18, 0xFF	; 255
    1dee:	3f ef       	ldi	r19, 0xFF	; 255
    1df0:	3a 83       	std	Y+2, r19	; 0x02
    1df2:	29 83       	std	Y+1, r18	; 0x01
    usb.ctrlReq(addr, 0,
                USB_SETUP_DEVICE_TO_HOST |
                USB_SETUP_TYPE_VENDOR |
                USB_SETUP_RECIPIENT_DEVICE,
                ACCESSORY_GET_PROTOCOL, 0, 0, 0, 2, (char *)&protocol);
    1df4:	00 d0       	rcall	.+0      	; 0x1df6 <_ZN16AndroidAccessory11getProtocolEh+0x24>
    1df6:	0f 92       	push	r0
    1df8:	9e 01       	movw	r18, r28
    1dfa:	2f 5f       	subi	r18, 0xFF	; 255
    1dfc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfe:	ed b7       	in	r30, 0x3d	; 61
    1e00:	fe b7       	in	r31, 0x3e	; 62
    1e02:	32 83       	std	Z+2, r19	; 0x02
    1e04:	21 83       	std	Z+1, r18	; 0x01
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	3d e7       	ldi	r19, 0x7D	; 125
    1e0a:	34 83       	std	Z+4, r19	; 0x04
    1e0c:	23 83       	std	Z+3, r18	; 0x03
    1e0e:	49 96       	adiw	r24, 0x19	; 25
    1e10:	40 e0       	ldi	r20, 0x00	; 0
    1e12:	20 ec       	ldi	r18, 0xC0	; 192
    1e14:	03 e3       	ldi	r16, 0x33	; 51
    1e16:	ee 24       	eor	r14, r14
    1e18:	cc 24       	eor	r12, r12
    1e1a:	aa 24       	eor	r10, r10
    1e1c:	bb 24       	eor	r11, r11
    1e1e:	f2 e0       	ldi	r31, 0x02	; 2
    1e20:	8f 2e       	mov	r8, r31
    1e22:	91 2c       	mov	r9, r1
    1e24:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <_ZN7UsbHost7ctrlReqEhhhhhhjjPcj>
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    return protocol;
}
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	9a 81       	ldd	r25, Y+2	; 0x02
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	cf 91       	pop	r28
    1e3a:	df 91       	pop	r29
    1e3c:	0f 91       	pop	r16
    1e3e:	ef 90       	pop	r14
    1e40:	cf 90       	pop	r12
    1e42:	bf 90       	pop	r11
    1e44:	af 90       	pop	r10
    1e46:	9f 90       	pop	r9
    1e48:	8f 90       	pop	r8
    1e4a:	08 95       	ret

00001e4c <_ZN16AndroidAccessory10sendStringEhiPKc>:

void AndroidAccessory::sendString(byte addr, int index, const char *str)
{
    1e4c:	8f 92       	push	r8
    1e4e:	9f 92       	push	r9
    1e50:	af 92       	push	r10
    1e52:	bf 92       	push	r11
    1e54:	cf 92       	push	r12
    1e56:	ef 92       	push	r14
    1e58:	0f 93       	push	r16
    1e5a:	5a 01       	movw	r10, r20
    usb.ctrlReq(addr, 0,
                USB_SETUP_HOST_TO_DEVICE |
                USB_SETUP_TYPE_VENDOR |
                USB_SETUP_RECIPIENT_DEVICE,
                ACCESSORY_SEND_STRING, 0, 0, index,
                strlen(str) + 1, (char *)str);
    1e5c:	d9 01       	movw	r26, r18
    1e5e:	0d 90       	ld	r0, X+
    1e60:	00 20       	and	r0, r0
    1e62:	e9 f7       	brne	.-6      	; 0x1e5e <_ZN16AndroidAccessory10sendStringEhiPKc+0x12>
    1e64:	4d 01       	movw	r8, r26
    1e66:	00 d0       	rcall	.+0      	; 0x1e68 <_ZN16AndroidAccessory10sendStringEhiPKc+0x1c>
    1e68:	0f 92       	push	r0
    1e6a:	ad b7       	in	r26, 0x3d	; 61
    1e6c:	be b7       	in	r27, 0x3e	; 62
    1e6e:	11 96       	adiw	r26, 0x01	; 1
    1e70:	82 1a       	sub	r8, r18
    1e72:	93 0a       	sbc	r9, r19
    1e74:	ed b7       	in	r30, 0x3d	; 61
    1e76:	fe b7       	in	r31, 0x3e	; 62
    1e78:	21 83       	std	Z+1, r18	; 0x01
    1e7a:	11 96       	adiw	r26, 0x01	; 1
    1e7c:	3c 93       	st	X, r19
    1e7e:	11 97       	sbiw	r26, 0x01	; 1
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	3d e7       	ldi	r19, 0x7D	; 125
    1e84:	13 96       	adiw	r26, 0x03	; 3
    1e86:	3c 93       	st	X, r19
    1e88:	2e 93       	st	-X, r18
    1e8a:	12 97       	sbiw	r26, 0x02	; 2
    1e8c:	49 96       	adiw	r24, 0x19	; 25
    1e8e:	40 e0       	ldi	r20, 0x00	; 0
    1e90:	20 e4       	ldi	r18, 0x40	; 64
    1e92:	04 e3       	ldi	r16, 0x34	; 52
    1e94:	ee 24       	eor	r14, r14
    1e96:	cc 24       	eor	r12, r12
    1e98:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <_ZN7UsbHost7ctrlReqEhhhhhhjjPcj>
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	0f 90       	pop	r0
    1ea2:	0f 90       	pop	r0
}
    1ea4:	0f 91       	pop	r16
    1ea6:	ef 90       	pop	r14
    1ea8:	cf 90       	pop	r12
    1eaa:	bf 90       	pop	r11
    1eac:	af 90       	pop	r10
    1eae:	9f 90       	pop	r9
    1eb0:	8f 90       	pop	r8
    1eb2:	08 95       	ret

00001eb4 <_ZN16AndroidAccessory12switchDeviceEh>:


bool AndroidAccessory::switchDevice(byte addr)
{
    1eb4:	6f 92       	push	r6
    1eb6:	7f 92       	push	r7
    1eb8:	8f 92       	push	r8
    1eba:	9f 92       	push	r9
    1ebc:	af 92       	push	r10
    1ebe:	bf 92       	push	r11
    1ec0:	cf 92       	push	r12
    1ec2:	ef 92       	push	r14
    1ec4:	0f 93       	push	r16
    1ec6:	1f 93       	push	r17
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
    1ecc:	ec 01       	movw	r28, r24
    1ece:	16 2f       	mov	r17, r22
    int protocol = getProtocol(addr);
    1ed0:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <_ZN16AndroidAccessory11getProtocolEh>

    if (protocol == 1) {
    1ed4:	81 30       	cpi	r24, 0x01	; 1
    1ed6:	91 05       	cpc	r25, r1
    1ed8:	09 f0       	breq	.+2      	; 0x1edc <_ZN16AndroidAccessory12switchDeviceEh+0x28>
    1eda:	58 c0       	rjmp	.+176    	; 0x1f8c <_ZN16AndroidAccessory12switchDeviceEh+0xd8>
        Serial.print(F("device supports protcol 1\n"));
    1edc:	87 e6       	ldi	r24, 0x67	; 103
    1ede:	95 e0       	ldi	r25, 0x05	; 5
    1ee0:	67 eb       	ldi	r22, 0xB7	; 183
    1ee2:	73 e0       	ldi	r23, 0x03	; 3
    1ee4:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <_ZN5Print5printEPK19__FlashStringHelper>
    } else {
        Serial.print(F("could not read device protocol version\n"));
        return false;
    }

    sendString(addr, ACCESSORY_STRING_MANUFACTURER, manufacturer);
    1ee8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1eea:	3d 85       	ldd	r19, Y+13	; 0x0d
    1eec:	ce 01       	movw	r24, r28
    1eee:	61 2f       	mov	r22, r17
    1ef0:	40 e0       	ldi	r20, 0x00	; 0
    1ef2:	50 e0       	ldi	r21, 0x00	; 0
    1ef4:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <_ZN16AndroidAccessory10sendStringEhiPKc>
    sendString(addr, ACCESSORY_STRING_MODEL, model);
    1ef8:	2e 85       	ldd	r18, Y+14	; 0x0e
    1efa:	3f 85       	ldd	r19, Y+15	; 0x0f
    1efc:	ce 01       	movw	r24, r28
    1efe:	61 2f       	mov	r22, r17
    1f00:	41 e0       	ldi	r20, 0x01	; 1
    1f02:	50 e0       	ldi	r21, 0x00	; 0
    1f04:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <_ZN16AndroidAccessory10sendStringEhiPKc>
    sendString(addr, ACCESSORY_STRING_DESCRIPTION, description);
    1f08:	28 89       	ldd	r18, Y+16	; 0x10
    1f0a:	39 89       	ldd	r19, Y+17	; 0x11
    1f0c:	ce 01       	movw	r24, r28
    1f0e:	61 2f       	mov	r22, r17
    1f10:	42 e0       	ldi	r20, 0x02	; 2
    1f12:	50 e0       	ldi	r21, 0x00	; 0
    1f14:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <_ZN16AndroidAccessory10sendStringEhiPKc>
    sendString(addr, ACCESSORY_STRING_VERSION, version);
    1f18:	2a 89       	ldd	r18, Y+18	; 0x12
    1f1a:	3b 89       	ldd	r19, Y+19	; 0x13
    1f1c:	ce 01       	movw	r24, r28
    1f1e:	61 2f       	mov	r22, r17
    1f20:	43 e0       	ldi	r20, 0x03	; 3
    1f22:	50 e0       	ldi	r21, 0x00	; 0
    1f24:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <_ZN16AndroidAccessory10sendStringEhiPKc>
    sendString(addr, ACCESSORY_STRING_URI, uri);
    1f28:	2c 89       	ldd	r18, Y+20	; 0x14
    1f2a:	3d 89       	ldd	r19, Y+21	; 0x15
    1f2c:	ce 01       	movw	r24, r28
    1f2e:	61 2f       	mov	r22, r17
    1f30:	44 e0       	ldi	r20, 0x04	; 4
    1f32:	50 e0       	ldi	r21, 0x00	; 0
    1f34:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <_ZN16AndroidAccessory10sendStringEhiPKc>
    sendString(addr, ACCESSORY_STRING_SERIAL, serial);
    1f38:	2e 89       	ldd	r18, Y+22	; 0x16
    1f3a:	3f 89       	ldd	r19, Y+23	; 0x17
    1f3c:	ce 01       	movw	r24, r28
    1f3e:	61 2f       	mov	r22, r17
    1f40:	45 e0       	ldi	r20, 0x05	; 5
    1f42:	50 e0       	ldi	r21, 0x00	; 0
    1f44:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <_ZN16AndroidAccessory10sendStringEhiPKc>

    usb.ctrlReq(addr, 0,
                USB_SETUP_HOST_TO_DEVICE |
                USB_SETUP_TYPE_VENDOR |
                USB_SETUP_RECIPIENT_DEVICE,
                ACCESSORY_START, 0, 0, 0, 0, NULL);
    1f48:	a9 e1       	ldi	r26, 0x19	; 25
    1f4a:	6a 2e       	mov	r6, r26
    1f4c:	71 2c       	mov	r7, r1
    1f4e:	6c 0e       	add	r6, r28
    1f50:	7d 1e       	adc	r7, r29
    1f52:	00 d0       	rcall	.+0      	; 0x1f54 <_ZN16AndroidAccessory12switchDeviceEh+0xa0>
    1f54:	0f 92       	push	r0
    1f56:	ed b7       	in	r30, 0x3d	; 61
    1f58:	fe b7       	in	r31, 0x3e	; 62
    1f5a:	12 82       	std	Z+2, r1	; 0x02
    1f5c:	11 82       	std	Z+1, r1	; 0x01
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	9d e7       	ldi	r25, 0x7D	; 125
    1f62:	94 83       	std	Z+4, r25	; 0x04
    1f64:	83 83       	std	Z+3, r24	; 0x03
    1f66:	c3 01       	movw	r24, r6
    1f68:	61 2f       	mov	r22, r17
    1f6a:	40 e0       	ldi	r20, 0x00	; 0
    1f6c:	20 e4       	ldi	r18, 0x40	; 64
    1f6e:	05 e3       	ldi	r16, 0x35	; 53
    1f70:	ee 24       	eor	r14, r14
    1f72:	cc 24       	eor	r12, r12
    1f74:	aa 24       	eor	r10, r10
    1f76:	bb 24       	eor	r11, r11
    1f78:	88 24       	eor	r8, r8
    1f7a:	99 24       	eor	r9, r9
    1f7c:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <_ZN7UsbHost7ctrlReqEhhhhhhjjPcj>

    while (usb.getUsbTaskState() != USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE) {
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
        max.Task();
    1f88:	68 96       	adiw	r28, 0x18	; 24
                USB_SETUP_HOST_TO_DEVICE |
                USB_SETUP_TYPE_VENDOR |
                USB_SETUP_RECIPIENT_DEVICE,
                ACCESSORY_START, 0, 0, 0, 0, NULL);

    while (usb.getUsbTaskState() != USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE) {
    1f8a:	0e c0       	rjmp	.+28     	; 0x1fa8 <_ZN16AndroidAccessory12switchDeviceEh+0xf4>
    int protocol = getProtocol(addr);

    if (protocol == 1) {
        Serial.print(F("device supports protcol 1\n"));
    } else {
        Serial.print(F("could not read device protocol version\n"));
    1f8c:	87 e6       	ldi	r24, 0x67	; 103
    1f8e:	95 e0       	ldi	r25, 0x05	; 5
    1f90:	6f e8       	ldi	r22, 0x8F	; 143
    1f92:	73 e0       	ldi	r23, 0x03	; 3
    1f94:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <_ZN5Print5printEPK19__FlashStringHelper>
        return false;
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	0c c0       	rjmp	.+24     	; 0x1fb4 <_ZN16AndroidAccessory12switchDeviceEh+0x100>
                USB_SETUP_TYPE_VENDOR |
                USB_SETUP_RECIPIENT_DEVICE,
                ACCESSORY_START, 0, 0, 0, 0, NULL);

    while (usb.getUsbTaskState() != USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE) {
        max.Task();
    1f9c:	ce 01       	movw	r24, r28
    1f9e:	0e 94 28 14 	call	0x2850	; 0x2850 <_ZN8MAX3421E4TaskEv>
        usb.Task();
    1fa2:	c3 01       	movw	r24, r6
    1fa4:	0e 94 46 18 	call	0x308c	; 0x308c <_ZN7UsbHost4TaskEv>
                USB_SETUP_HOST_TO_DEVICE |
                USB_SETUP_TYPE_VENDOR |
                USB_SETUP_RECIPIENT_DEVICE,
                ACCESSORY_START, 0, 0, 0, 0, NULL);

    while (usb.getUsbTaskState() != USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE) {
    1fa8:	c3 01       	movw	r24, r6
    1faa:	0e 94 69 14 	call	0x28d2	; 0x28d2 <_ZN7UsbHost15getUsbTaskStateEv>
    1fae:	82 31       	cpi	r24, 0x12	; 18
    1fb0:	a9 f7       	brne	.-22     	; 0x1f9c <_ZN16AndroidAccessory12switchDeviceEh+0xe8>
        max.Task();
        usb.Task();
    }

    return true;
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
}
    1fb4:	df 91       	pop	r29
    1fb6:	cf 91       	pop	r28
    1fb8:	1f 91       	pop	r17
    1fba:	0f 91       	pop	r16
    1fbc:	ef 90       	pop	r14
    1fbe:	cf 90       	pop	r12
    1fc0:	bf 90       	pop	r11
    1fc2:	af 90       	pop	r10
    1fc4:	9f 90       	pop	r9
    1fc6:	8f 90       	pop	r8
    1fc8:	7f 90       	pop	r7
    1fca:	6f 90       	pop	r6
    1fcc:	08 95       	ret

00001fce <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_>:

// Finds the first bulk IN and bulk OUT endpoints
bool AndroidAccessory::findEndpoints(byte addr, EP_RECORD *inEp, EP_RECORD *outEp)
{
    1fce:	2f 92       	push	r2
    1fd0:	3f 92       	push	r3
    1fd2:	4f 92       	push	r4
    1fd4:	5f 92       	push	r5
    1fd6:	6f 92       	push	r6
    1fd8:	7f 92       	push	r7
    1fda:	8f 92       	push	r8
    1fdc:	9f 92       	push	r9
    1fde:	af 92       	push	r10
    1fe0:	bf 92       	push	r11
    1fe2:	cf 92       	push	r12
    1fe4:	df 92       	push	r13
    1fe6:	ef 92       	push	r14
    1fe8:	ff 92       	push	r15
    1fea:	0f 93       	push	r16
    1fec:	1f 93       	push	r17
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	00 d0       	rcall	.+0      	; 0x1ff4 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x26>
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    1ff8:	4c 01       	movw	r8, r24
    1ffa:	16 2f       	mov	r17, r22
    1ffc:	3a 01       	movw	r6, r20
    1ffe:	29 01       	movw	r4, r18
    int len;
    byte err;
    uint8_t *p;

    err = usb.getConfDescr(addr, 0, 4, 0, (char *)descBuff);
    2000:	79 e1       	ldi	r23, 0x19	; 25
    2002:	27 2e       	mov	r2, r23
    2004:	31 2c       	mov	r3, r1
    2006:	28 0e       	add	r2, r24
    2008:	39 1e       	adc	r3, r25
    200a:	65 e5       	ldi	r22, 0x55	; 85
    200c:	a6 2e       	mov	r10, r22
    200e:	b1 2c       	mov	r11, r1
    2010:	a8 0e       	add	r10, r24
    2012:	b9 1e       	adc	r11, r25
    2014:	c1 01       	movw	r24, r2
    2016:	61 2f       	mov	r22, r17
    2018:	40 e0       	ldi	r20, 0x00	; 0
    201a:	24 e0       	ldi	r18, 0x04	; 4
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	00 e0       	ldi	r16, 0x00	; 0
    2020:	75 01       	movw	r14, r10
    2022:	c1 2c       	mov	r12, r1
    2024:	5d e7       	ldi	r21, 0x7D	; 125
    2026:	d5 2e       	mov	r13, r21
    2028:	0e 94 55 0e 	call	0x1caa	; 0x1caa <_ZN7UsbHost12getConfDescrEhhjhPcj>
    if (err) {
    202c:	88 23       	and	r24, r24
    202e:	29 f0       	breq	.+10     	; 0x203a <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x6c>
        Serial.print(F("Can't get config descriptor length\n"));
    2030:	87 e6       	ldi	r24, 0x67	; 103
    2032:	95 e0       	ldi	r25, 0x05	; 5
    2034:	6b e6       	ldi	r22, 0x6B	; 107
    2036:	73 e0       	ldi	r23, 0x03	; 3
    2038:	2a c0       	rjmp	.+84     	; 0x208e <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0xc0>
        return false;
    }


    len = descBuff[2] | ((int)descBuff[3] << 8);
    203a:	f4 01       	movw	r30, r8
    203c:	e8 5a       	subi	r30, 0xA8	; 168
    203e:	ff 4f       	sbci	r31, 0xFF	; 255
    2040:	90 81       	ld	r25, Z
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	f4 01       	movw	r30, r8
    2046:	e9 5a       	subi	r30, 0xA9	; 169
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	20 81       	ld	r18, Z
    204c:	42 2f       	mov	r20, r18
    204e:	50 e0       	ldi	r21, 0x00	; 0
    2050:	48 2b       	or	r20, r24
    2052:	59 2b       	or	r21, r25
    2054:	5b 83       	std	Y+3, r21	; 0x03
    2056:	4a 83       	std	Y+2, r20	; 0x02
    if (len > sizeof(descBuff)) {
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	41 30       	cpi	r20, 0x01	; 1
    205c:	58 07       	cpc	r21, r24
    205e:	28 f0       	brcs	.+10     	; 0x206a <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x9c>
        Serial.print(F("config descriptor too large\n"));
    2060:	87 e6       	ldi	r24, 0x67	; 103
    2062:	95 e0       	ldi	r25, 0x05	; 5
    2064:	6e e4       	ldi	r22, 0x4E	; 78
    2066:	73 e0       	ldi	r23, 0x03	; 3
    2068:	12 c0       	rjmp	.+36     	; 0x208e <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0xc0>
            /* might want to truncate here */
        return false;
    }

    err = usb.getConfDescr(addr, 0, len, 0, (char *)descBuff);
    206a:	c1 01       	movw	r24, r2
    206c:	61 2f       	mov	r22, r17
    206e:	40 e0       	ldi	r20, 0x00	; 0
    2070:	2a 81       	ldd	r18, Y+2	; 0x02
    2072:	3b 81       	ldd	r19, Y+3	; 0x03
    2074:	00 e0       	ldi	r16, 0x00	; 0
    2076:	75 01       	movw	r14, r10
    2078:	c1 2c       	mov	r12, r1
    207a:	1d e7       	ldi	r17, 0x7D	; 125
    207c:	d1 2e       	mov	r13, r17
    207e:	0e 94 55 0e 	call	0x1caa	; 0x1caa <_ZN7UsbHost12getConfDescrEhhjhPcj>
    if (err) {
    2082:	88 23       	and	r24, r24
    2084:	39 f0       	breq	.+14     	; 0x2094 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0xc6>
        Serial.print(F("Can't get config descriptor\n"));
    2086:	87 e6       	ldi	r24, 0x67	; 103
    2088:	95 e0       	ldi	r25, 0x05	; 5
    208a:	61 e3       	ldi	r22, 0x31	; 49
    208c:	73 e0       	ldi	r23, 0x03	; 3
    208e:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <_ZN5Print5printEPK19__FlashStringHelper>
    2092:	78 c0       	rjmp	.+240    	; 0x2184 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1b6>
        return false;
    }

    p = descBuff;
    inEp->epAddr = 0;
    2094:	d3 01       	movw	r26, r6
    2096:	1c 92       	st	X, r1
    outEp->epAddr = 0;
    2098:	f2 01       	movw	r30, r4
    209a:	10 82       	st	Z, r1
    while (p < (descBuff + len)){
    209c:	2a 80       	ldd	r2, Y+2	; 0x02
    209e:	3b 80       	ldd	r3, Y+3	; 0x03
    20a0:	25 e5       	ldi	r18, 0x55	; 85
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	22 0e       	add	r2, r18
    20a6:	33 1e       	adc	r3, r19
    20a8:	28 0c       	add	r2, r8
    20aa:	39 1c       	adc	r3, r9

            if (ep) {
                ep->epAddr = epDesc->bEndpointAddress & 0x7f;
                ep->Attr = epDesc->bmAttributes;
                ep->MaxPktSize = epDesc->wMaxPacketSize;
                ep->sndToggle = bmSNDTOG0;
    20ac:	00 e4       	ldi	r16, 0x40	; 64
                ep->rcvToggle = bmRCVTOG0;
    20ae:	b0 e1       	ldi	r27, 0x10	; 16
    20b0:	8b 2e       	mov	r8, r27
    }

    p = descBuff;
    inEp->epAddr = 0;
    outEp->epAddr = 0;
    while (p < (descBuff + len)){
    20b2:	4d c0       	rjmp	.+154    	; 0x214e <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x180>
        uint8_t descLen = p[0];
    20b4:	d5 01       	movw	r26, r10
    20b6:	1c 91       	ld	r17, X
        uint8_t descType = p[1];
    20b8:	11 96       	adiw	r26, 0x01	; 1
    20ba:	2c 91       	ld	r18, X
    20bc:	11 97       	sbiw	r26, 0x01	; 1
        USB_ENDPOINT_DESCRIPTOR *epDesc;
        EP_RECORD *ep;

        switch (descType) {
    20be:	24 30       	cpi	r18, 0x04	; 4
    20c0:	49 f0       	breq	.+18     	; 0x20d4 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x106>
    20c2:	25 30       	cpi	r18, 0x05	; 5
    20c4:	71 f0       	breq	.+28     	; 0x20e2 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x114>
    20c6:	22 30       	cpi	r18, 0x02	; 2
    20c8:	89 f5       	brne	.+98     	; 0x212c <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x15e>
        case USB_DESCRIPTOR_CONFIGURATION:
            Serial.print(F("config desc\n"));
    20ca:	87 e6       	ldi	r24, 0x67	; 103
    20cc:	95 e0       	ldi	r25, 0x05	; 5
    20ce:	64 e2       	ldi	r22, 0x24	; 36
    20d0:	73 e0       	ldi	r23, 0x03	; 3
    20d2:	04 c0       	rjmp	.+8      	; 0x20dc <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x10e>
            break;

        case USB_DESCRIPTOR_INTERFACE:
            Serial.print(F("interface desc\n"));
    20d4:	87 e6       	ldi	r24, 0x67	; 103
    20d6:	95 e0       	ldi	r25, 0x05	; 5
    20d8:	64 e1       	ldi	r22, 0x14	; 20
    20da:	73 e0       	ldi	r23, 0x03	; 3
    20dc:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <_ZN5Print5printEPK19__FlashStringHelper>
            break;
    20e0:	34 c0       	rjmp	.+104    	; 0x214a <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x17c>

        case USB_DESCRIPTOR_ENDPOINT:
            epDesc = (USB_ENDPOINT_DESCRIPTOR *)p;
            if (!inEp->epAddr && (epDesc->bEndpointAddress & 0x80))
    20e2:	f3 01       	movw	r30, r6
    20e4:	80 81       	ld	r24, Z
    20e6:	88 23       	and	r24, r24
    20e8:	31 f4       	brne	.+12     	; 0x20f6 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x128>
    20ea:	d5 01       	movw	r26, r10
    20ec:	12 96       	adiw	r26, 0x02	; 2
    20ee:	8c 91       	ld	r24, X
    20f0:	12 97       	sbiw	r26, 0x02	; 2
    20f2:	87 fd       	sbrc	r24, 7
    20f4:	05 c0       	rjmp	.+10     	; 0x2100 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x132>
                ep = inEp;
            else if (!outEp->epAddr)
    20f6:	f2 01       	movw	r30, r4
    20f8:	80 81       	ld	r24, Z
    20fa:	88 23       	and	r24, r24
    20fc:	31 f5       	brne	.+76     	; 0x214a <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x17c>
    20fe:	01 c0       	rjmp	.+2      	; 0x2102 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x134>
            break;

        case USB_DESCRIPTOR_ENDPOINT:
            epDesc = (USB_ENDPOINT_DESCRIPTOR *)p;
            if (!inEp->epAddr && (epDesc->bEndpointAddress & 0x80))
                ep = inEp;
    2100:	f3 01       	movw	r30, r6
            else if (!outEp->epAddr)
                ep = outEp;
            else
                ep = NULL;

            if (ep) {
    2102:	30 97       	sbiw	r30, 0x00	; 0
    2104:	11 f1       	breq	.+68     	; 0x214a <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x17c>
                ep->epAddr = epDesc->bEndpointAddress & 0x7f;
    2106:	d5 01       	movw	r26, r10
    2108:	12 96       	adiw	r26, 0x02	; 2
    210a:	8c 91       	ld	r24, X
    210c:	12 97       	sbiw	r26, 0x02	; 2
    210e:	8f 77       	andi	r24, 0x7F	; 127
    2110:	80 83       	st	Z, r24
                ep->Attr = epDesc->bmAttributes;
    2112:	13 96       	adiw	r26, 0x03	; 3
    2114:	8c 91       	ld	r24, X
    2116:	13 97       	sbiw	r26, 0x03	; 3
    2118:	81 83       	std	Z+1, r24	; 0x01
                ep->MaxPktSize = epDesc->wMaxPacketSize;
    211a:	14 96       	adiw	r26, 0x04	; 4
    211c:	8d 91       	ld	r24, X+
    211e:	9c 91       	ld	r25, X
    2120:	15 97       	sbiw	r26, 0x05	; 5
    2122:	93 83       	std	Z+3, r25	; 0x03
    2124:	82 83       	std	Z+2, r24	; 0x02
                ep->sndToggle = bmSNDTOG0;
    2126:	05 83       	std	Z+5, r16	; 0x05
                ep->rcvToggle = bmRCVTOG0;
    2128:	86 82       	std	Z+6, r8	; 0x06
    212a:	0f c0       	rjmp	.+30     	; 0x214a <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x17c>
            }
            break;

        default:
            Serial.print(F("unkown desc type "));
    212c:	87 e6       	ldi	r24, 0x67	; 103
    212e:	95 e0       	ldi	r25, 0x05	; 5
    2130:	62 e0       	ldi	r22, 0x02	; 2
    2132:	73 e0       	ldi	r23, 0x03	; 3
    2134:	29 83       	std	Y+1, r18	; 0x01
    2136:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <_ZN5Print5printEPK19__FlashStringHelper>
            Serial.println( descType, HEX);
    213a:	87 e6       	ldi	r24, 0x67	; 103
    213c:	95 e0       	ldi	r25, 0x05	; 5
    213e:	29 81       	ldd	r18, Y+1	; 0x01
    2140:	62 2f       	mov	r22, r18
    2142:	40 e1       	ldi	r20, 0x10	; 16
    2144:	50 e0       	ldi	r21, 0x00	; 0
    2146:	0e 94 cc 0c 	call	0x1998	; 0x1998 <_ZN5Print7printlnEhi>
            break;
        }

        p += descLen;
    214a:	a1 0e       	add	r10, r17
    214c:	b1 1c       	adc	r11, r1
    }

    p = descBuff;
    inEp->epAddr = 0;
    outEp->epAddr = 0;
    while (p < (descBuff + len)){
    214e:	a2 14       	cp	r10, r2
    2150:	b3 04       	cpc	r11, r3
    2152:	08 f4       	brcc	.+2      	; 0x2156 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x188>
    2154:	af cf       	rjmp	.-162    	; 0x20b4 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0xe6>
        }

        p += descLen;
    }

    if (!(inEp->epAddr && outEp->epAddr))
    2156:	f3 01       	movw	r30, r6
    2158:	80 81       	ld	r24, Z
    215a:	88 23       	and	r24, r24
    215c:	21 f0       	breq	.+8      	; 0x2166 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x198>
    215e:	d2 01       	movw	r26, r4
    2160:	8c 91       	ld	r24, X
    2162:	88 23       	and	r24, r24
    2164:	31 f4       	brne	.+12     	; 0x2172 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1a4>
        Serial.println(F("can't find accessory endpoints"));
    2166:	87 e6       	ldi	r24, 0x67	; 103
    2168:	95 e0       	ldi	r25, 0x05	; 5
    216a:	63 ee       	ldi	r22, 0xE3	; 227
    216c:	72 e0       	ldi	r23, 0x02	; 2
    216e:	0e 94 35 0c 	call	0x186a	; 0x186a <_ZN5Print7printlnEPK19__FlashStringHelper>

    return inEp->epAddr && outEp->epAddr;
    2172:	f3 01       	movw	r30, r6
    2174:	80 81       	ld	r24, Z
    2176:	88 23       	and	r24, r24
    2178:	29 f0       	breq	.+10     	; 0x2184 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1b6>

    return true;
}

// Finds the first bulk IN and bulk OUT endpoints
bool AndroidAccessory::findEndpoints(byte addr, EP_RECORD *inEp, EP_RECORD *outEp)
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	d2 01       	movw	r26, r4
    217e:	9c 91       	ld	r25, X
    2180:	99 23       	and	r25, r25
    2182:	09 f4       	brne	.+2      	; 0x2186 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1b8>
    }

    if (!(inEp->epAddr && outEp->epAddr))
        Serial.println(F("can't find accessory endpoints"));

    return inEp->epAddr && outEp->epAddr;
    2184:	80 e0       	ldi	r24, 0x00	; 0
}
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	cf 91       	pop	r28
    218e:	df 91       	pop	r29
    2190:	1f 91       	pop	r17
    2192:	0f 91       	pop	r16
    2194:	ff 90       	pop	r15
    2196:	ef 90       	pop	r14
    2198:	df 90       	pop	r13
    219a:	cf 90       	pop	r12
    219c:	bf 90       	pop	r11
    219e:	af 90       	pop	r10
    21a0:	9f 90       	pop	r9
    21a2:	8f 90       	pop	r8
    21a4:	7f 90       	pop	r7
    21a6:	6f 90       	pop	r6
    21a8:	5f 90       	pop	r5
    21aa:	4f 90       	pop	r4
    21ac:	3f 90       	pop	r3
    21ae:	2f 90       	pop	r2
    21b0:	08 95       	ret

000021b2 <_ZN16AndroidAccessory16configureAndroidEv>:

bool AndroidAccessory::configureAndroid(void)
{
    21b2:	ef 92       	push	r14
    21b4:	ff 92       	push	r15
    21b6:	0f 93       	push	r16
    21b8:	1f 93       	push	r17
    21ba:	df 93       	push	r29
    21bc:	cf 93       	push	r28
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62
    21c2:	2e 97       	sbiw	r28, 0x0e	; 14
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	f8 94       	cli
    21c8:	de bf       	out	0x3e, r29	; 62
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	cd bf       	out	0x3d, r28	; 61
    21ce:	8c 01       	movw	r16, r24
    byte err;
    EP_RECORD inEp, outEp;

    if (!findEndpoints(1, &inEp, &outEp))
    21d0:	61 e0       	ldi	r22, 0x01	; 1
    21d2:	7e 01       	movw	r14, r28
    21d4:	08 94       	sec
    21d6:	e1 1c       	adc	r14, r1
    21d8:	f1 1c       	adc	r15, r1
    21da:	a7 01       	movw	r20, r14
    21dc:	9e 01       	movw	r18, r28
    21de:	28 5f       	subi	r18, 0xF8	; 248
    21e0:	3f 4f       	sbci	r19, 0xFF	; 255
    21e2:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_>
    21e6:	88 23       	and	r24, r24
    21e8:	09 f4       	brne	.+2      	; 0x21ec <_ZN16AndroidAccessory16configureAndroidEv+0x3a>
    21ea:	75 c0       	rjmp	.+234    	; 0x22d6 <__stack+0xd7>
        return false;

    memset(&epRecord, 0x0, sizeof(epRecord));
    21ec:	c8 01       	movw	r24, r16
    21ee:	4d 96       	adiw	r24, 0x1d	; 29
    21f0:	fc 01       	movw	r30, r24
    21f2:	88 e3       	ldi	r24, 0x38	; 56
    21f4:	df 01       	movw	r26, r30
    21f6:	1d 92       	st	X+, r1
    21f8:	8a 95       	dec	r24
    21fa:	e9 f7       	brne	.-6      	; 0x21f6 <_ZN16AndroidAccessory16configureAndroidEv+0x44>

    epRecord[inEp.epAddr] = inEp;
    21fc:	69 81       	ldd	r22, Y+1	; 0x01
    21fe:	86 2f       	mov	r24, r22
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	fc 01       	movw	r30, r24
    2204:	b3 e0       	ldi	r27, 0x03	; 3
    2206:	ee 0f       	add	r30, r30
    2208:	ff 1f       	adc	r31, r31
    220a:	ba 95       	dec	r27
    220c:	e1 f7       	brne	.-8      	; 0x2206 <__stack+0x7>
    220e:	e8 1b       	sub	r30, r24
    2210:	f9 0b       	sbc	r31, r25
    2212:	e0 0f       	add	r30, r16
    2214:	f1 1f       	adc	r31, r17
    2216:	7d 96       	adiw	r30, 0x1d	; 29
    2218:	d7 01       	movw	r26, r14
    221a:	87 e0       	ldi	r24, 0x07	; 7
    221c:	0d 90       	ld	r0, X+
    221e:	01 92       	st	Z+, r0
    2220:	81 50       	subi	r24, 0x01	; 1
    2222:	e1 f7       	brne	.-8      	; 0x221c <__stack+0x1d>
    if (outEp.epAddr != inEp.epAddr)
    2224:	28 85       	ldd	r18, Y+8	; 0x08
    2226:	26 17       	cp	r18, r22
    2228:	a1 f0       	breq	.+40     	; 0x2252 <__stack+0x53>
        epRecord[outEp.epAddr] = outEp;
    222a:	82 2f       	mov	r24, r18
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	fc 01       	movw	r30, r24
    2230:	a3 e0       	ldi	r26, 0x03	; 3
    2232:	ee 0f       	add	r30, r30
    2234:	ff 1f       	adc	r31, r31
    2236:	aa 95       	dec	r26
    2238:	e1 f7       	brne	.-8      	; 0x2232 <__stack+0x33>
    223a:	e8 1b       	sub	r30, r24
    223c:	f9 0b       	sbc	r31, r25
    223e:	e0 0f       	add	r30, r16
    2240:	f1 1f       	adc	r31, r17
    2242:	7d 96       	adiw	r30, 0x1d	; 29
    2244:	de 01       	movw	r26, r28
    2246:	18 96       	adiw	r26, 0x08	; 8
    2248:	87 e0       	ldi	r24, 0x07	; 7
    224a:	0d 90       	ld	r0, X+
    224c:	01 92       	st	Z+, r0
    224e:	81 50       	subi	r24, 0x01	; 1
    2250:	e1 f7       	brne	.-8      	; 0x224a <__stack+0x4b>

    in = inEp.epAddr;
    2252:	f8 01       	movw	r30, r16
    2254:	63 8f       	std	Z+27, r22	; 0x1b
    out = outEp.epAddr;
    2256:	24 8f       	std	Z+28, r18	; 0x1c

    Serial.println(inEp.epAddr, HEX);
    2258:	87 e6       	ldi	r24, 0x67	; 103
    225a:	95 e0       	ldi	r25, 0x05	; 5
    225c:	40 e1       	ldi	r20, 0x10	; 16
    225e:	50 e0       	ldi	r21, 0x00	; 0
    2260:	0e 94 cc 0c 	call	0x1998	; 0x1998 <_ZN5Print7printlnEhi>
    Serial.println(outEp.epAddr, HEX);
    2264:	87 e6       	ldi	r24, 0x67	; 103
    2266:	95 e0       	ldi	r25, 0x05	; 5
    2268:	68 85       	ldd	r22, Y+8	; 0x08
    226a:	40 e1       	ldi	r20, 0x10	; 16
    226c:	50 e0       	ldi	r21, 0x00	; 0
    226e:	0e 94 cc 0c 	call	0x1998	; 0x1998 <_ZN5Print7printlnEhi>

    epRecord[0] = *(usb.getDevTableEntry(0,0));
    2272:	e9 e1       	ldi	r30, 0x19	; 25
    2274:	ee 2e       	mov	r14, r30
    2276:	f1 2c       	mov	r15, r1
    2278:	e0 0e       	add	r14, r16
    227a:	f1 1e       	adc	r15, r17
    227c:	c7 01       	movw	r24, r14
    227e:	60 e0       	ldi	r22, 0x00	; 0
    2280:	40 e0       	ldi	r20, 0x00	; 0
    2282:	0e 94 6f 14 	call	0x28de	; 0x28de <_ZN7UsbHost16getDevTableEntryEhh>
    2286:	f8 01       	movw	r30, r16
    2288:	7d 96       	adiw	r30, 0x1d	; 29
    228a:	28 2f       	mov	r18, r24
    228c:	39 2f       	mov	r19, r25
    228e:	d9 01       	movw	r26, r18
    2290:	87 e0       	ldi	r24, 0x07	; 7
    2292:	0d 90       	ld	r0, X+
    2294:	01 92       	st	Z+, r0
    2296:	81 50       	subi	r24, 0x01	; 1
    2298:	e1 f7       	brne	.-8      	; 0x2292 <__stack+0x93>
    usb.setDevTableEntry(1, epRecord);
    229a:	a8 01       	movw	r20, r16
    229c:	43 5e       	subi	r20, 0xE3	; 227
    229e:	5f 4f       	sbci	r21, 0xFF	; 255
    22a0:	c7 01       	movw	r24, r14
    22a2:	61 e0       	ldi	r22, 0x01	; 1
    22a4:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN7UsbHost16setDevTableEntryEhP9EP_RECORD>

    err = usb.setConf( 1, 0, 1 );
    22a8:	c7 01       	movw	r24, r14
    22aa:	61 e0       	ldi	r22, 0x01	; 1
    22ac:	40 e0       	ldi	r20, 0x00	; 0
    22ae:	21 e0       	ldi	r18, 0x01	; 1
    22b0:	00 e0       	ldi	r16, 0x00	; 0
    22b2:	1d e7       	ldi	r17, 0x7D	; 125
    22b4:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <_ZN7UsbHost7setConfEhhhj>
    if (err) {
    22b8:	88 23       	and	r24, r24
    22ba:	39 f0       	breq	.+14     	; 0x22ca <__stack+0xcb>
        Serial.print(F("Can't set config to 1\n"));
    22bc:	87 e6       	ldi	r24, 0x67	; 103
    22be:	95 e0       	ldi	r25, 0x05	; 5
    22c0:	6c ec       	ldi	r22, 0xCC	; 204
    22c2:	72 e0       	ldi	r23, 0x02	; 2
    22c4:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <_ZN5Print5printEPK19__FlashStringHelper>
    22c8:	06 c0       	rjmp	.+12     	; 0x22d6 <__stack+0xd7>
        return false;
    }

    usb.setUsbTaskState( USB_STATE_RUNNING );
    22ca:	c7 01       	movw	r24, r14
    22cc:	60 e9       	ldi	r22, 0x90	; 144
    22ce:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <_ZN7UsbHost15setUsbTaskStateEh>

    return true;
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	01 c0       	rjmp	.+2      	; 0x22d8 <__stack+0xd9>
{
    byte err;
    EP_RECORD inEp, outEp;

    if (!findEndpoints(1, &inEp, &outEp))
        return false;
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    }

    usb.setUsbTaskState( USB_STATE_RUNNING );

    return true;
}
    22d8:	2e 96       	adiw	r28, 0x0e	; 14
    22da:	0f b6       	in	r0, 0x3f	; 63
    22dc:	f8 94       	cli
    22de:	de bf       	out	0x3e, r29	; 62
    22e0:	0f be       	out	0x3f, r0	; 63
    22e2:	cd bf       	out	0x3d, r28	; 61
    22e4:	cf 91       	pop	r28
    22e6:	df 91       	pop	r29
    22e8:	1f 91       	pop	r17
    22ea:	0f 91       	pop	r16
    22ec:	ff 90       	pop	r15
    22ee:	ef 90       	pop	r14
    22f0:	08 95       	ret

000022f2 <_ZN16AndroidAccessory7refreshEv>:

void AndroidAccessory::refresh(void) {
    22f2:	cf 93       	push	r28
    22f4:	df 93       	push	r29
    22f6:	ec 01       	movw	r28, r24
    max.Task();
    22f8:	48 96       	adiw	r24, 0x18	; 24
    22fa:	0e 94 28 14 	call	0x2850	; 0x2850 <_ZN8MAX3421E4TaskEv>
    usb.Task();
    22fe:	ce 01       	movw	r24, r28
    2300:	49 96       	adiw	r24, 0x19	; 25
    2302:	0e 94 46 18 	call	0x308c	; 0x308c <_ZN7UsbHost4TaskEv>
}
    2306:	df 91       	pop	r29
    2308:	cf 91       	pop	r28
    230a:	08 95       	ret

0000230c <_ZN16AndroidAccessory11isConnectedEv>:

bool AndroidAccessory::isConnected(void)
{
    230c:	cf 92       	push	r12
    230e:	df 92       	push	r13
    2310:	ef 92       	push	r14
    2312:	ff 92       	push	r15
    2314:	0f 93       	push	r16
    2316:	1f 93       	push	r17
    2318:	cf 93       	push	r28
    231a:	df 93       	push	r29
    231c:	ec 01       	movw	r28, r24
    USB_DEVICE_DESCRIPTOR *devDesc = (USB_DEVICE_DESCRIPTOR *) descBuff;
    byte err;

    refresh();
    231e:	0e 94 79 11 	call	0x22f2	; 0x22f2 <_ZN16AndroidAccessory7refreshEv>

    if (!connected &&
    2322:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2324:	88 23       	and	r24, r24
    2326:	09 f0       	breq	.+2      	; 0x232a <_ZN16AndroidAccessory11isConnectedEv+0x1e>
    2328:	62 c0       	rjmp	.+196    	; 0x23ee <_ZN16AndroidAccessory11isConnectedEv+0xe2>
        usb.getUsbTaskState() >= USB_STATE_CONFIGURING &&
    232a:	8e 01       	movw	r16, r28
    232c:	07 5e       	subi	r16, 0xE7	; 231
    232e:	1f 4f       	sbci	r17, 0xFF	; 255
    2330:	c8 01       	movw	r24, r16
    2332:	0e 94 69 14 	call	0x28d2	; 0x28d2 <_ZN7UsbHost15getUsbTaskStateEv>
    USB_DEVICE_DESCRIPTOR *devDesc = (USB_DEVICE_DESCRIPTOR *) descBuff;
    byte err;

    refresh();

    if (!connected &&
    2336:	87 ff       	sbrs	r24, 7
    2338:	5a c0       	rjmp	.+180    	; 0x23ee <_ZN16AndroidAccessory11isConnectedEv+0xe2>
        usb.getUsbTaskState() >= USB_STATE_CONFIGURING &&
        usb.getUsbTaskState() != USB_STATE_RUNNING) {
    233a:	c8 01       	movw	r24, r16
    233c:	0e 94 69 14 	call	0x28d2	; 0x28d2 <_ZN7UsbHost15getUsbTaskStateEv>
    USB_DEVICE_DESCRIPTOR *devDesc = (USB_DEVICE_DESCRIPTOR *) descBuff;
    byte err;

    refresh();

    if (!connected &&
    2340:	80 39       	cpi	r24, 0x90	; 144
    2342:	09 f4       	brne	.+2      	; 0x2346 <_ZN16AndroidAccessory11isConnectedEv+0x3a>
    2344:	54 c0       	rjmp	.+168    	; 0x23ee <_ZN16AndroidAccessory11isConnectedEv+0xe2>
    usb.Task();
}

bool AndroidAccessory::isConnected(void)
{
    USB_DEVICE_DESCRIPTOR *devDesc = (USB_DEVICE_DESCRIPTOR *) descBuff;
    2346:	65 e5       	ldi	r22, 0x55	; 85
    2348:	c6 2e       	mov	r12, r22
    234a:	d1 2c       	mov	r13, r1
    234c:	cc 0e       	add	r12, r28
    234e:	dd 1e       	adc	r13, r29
    refresh();

    if (!connected &&
        usb.getUsbTaskState() >= USB_STATE_CONFIGURING &&
        usb.getUsbTaskState() != USB_STATE_RUNNING) {
        Serial.print(F("\nDevice addressed... "));
    2350:	87 e6       	ldi	r24, 0x67	; 103
    2352:	95 e0       	ldi	r25, 0x05	; 5
    2354:	66 eb       	ldi	r22, 0xB6	; 182
    2356:	72 e0       	ldi	r23, 0x02	; 2
    2358:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.print(F("Requesting device descriptor.\n"));
    235c:	87 e6       	ldi	r24, 0x67	; 103
    235e:	95 e0       	ldi	r25, 0x05	; 5
    2360:	67 e9       	ldi	r22, 0x97	; 151
    2362:	72 e0       	ldi	r23, 0x02	; 2
    2364:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <_ZN5Print5printEPK19__FlashStringHelper>

        err = usb.getDevDescr(1, 0, 0x12, (char *) devDesc);
    2368:	c8 01       	movw	r24, r16
    236a:	61 e0       	ldi	r22, 0x01	; 1
    236c:	40 e0       	ldi	r20, 0x00	; 0
    236e:	22 e1       	ldi	r18, 0x12	; 18
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	86 01       	movw	r16, r12
    2374:	e1 2c       	mov	r14, r1
    2376:	5d e7       	ldi	r21, 0x7D	; 125
    2378:	f5 2e       	mov	r15, r21
    237a:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <_ZN7UsbHost11getDevDescrEhhjPcj>
        if (err) {
    237e:	88 23       	and	r24, r24
    2380:	41 f0       	breq	.+16     	; 0x2392 <_ZN16AndroidAccessory11isConnectedEv+0x86>
            Serial.print(F("\nDevice descriptor cannot be retrieved. Trying again\n"));
    2382:	87 e6       	ldi	r24, 0x67	; 103
    2384:	95 e0       	ldi	r25, 0x05	; 5
    2386:	61 e6       	ldi	r22, 0x61	; 97
    2388:	72 e0       	ldi	r23, 0x02	; 2
    238a:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <_ZN5Print5printEPK19__FlashStringHelper>
            return false;
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	25 c0       	rjmp	.+74     	; 0x23dc <_ZN16AndroidAccessory11isConnectedEv+0xd0>
    unsigned int nextByteInDataBuffOffset;

    bool isAccessoryDevice(USB_DEVICE_DESCRIPTOR *desc)
    {
        return desc->idVendor == 0x18d1 &&
            (desc->idProduct == 0x2D00 || desc->idProduct == 0x2D01);
    2392:	f6 01       	movw	r30, r12
    2394:	80 85       	ldd	r24, Z+8	; 0x08
    2396:	91 85       	ldd	r25, Z+9	; 0x09
    2398:	f8 e1       	ldi	r31, 0x18	; 24
    239a:	81 3d       	cpi	r24, 0xD1	; 209
    239c:	9f 07       	cpc	r25, r31
    239e:	71 f5       	brne	.+92     	; 0x23fc <_ZN16AndroidAccessory11isConnectedEv+0xf0>
    23a0:	f6 01       	movw	r30, r12
    23a2:	82 85       	ldd	r24, Z+10	; 0x0a
    23a4:	93 85       	ldd	r25, Z+11	; 0x0b
    23a6:	80 50       	subi	r24, 0x00	; 0
    23a8:	9d 42       	sbci	r25, 0x2D	; 45
    23aa:	82 30       	cpi	r24, 0x02	; 2
    23ac:	91 05       	cpc	r25, r1
    23ae:	30 f5       	brcc	.+76     	; 0x23fc <_ZN16AndroidAccessory11isConnectedEv+0xf0>
        }

        if (isAccessoryDevice(devDesc)) {
            Serial.print(F("found android acessory device\n"));
    23b0:	87 e6       	ldi	r24, 0x67	; 103
    23b2:	95 e0       	ldi	r25, 0x05	; 5
    23b4:	62 e4       	ldi	r22, 0x42	; 66
    23b6:	72 e0       	ldi	r23, 0x02	; 2
    23b8:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <_ZN5Print5printEPK19__FlashStringHelper>

            connected = configureAndroid();
    23bc:	ce 01       	movw	r24, r28
    23be:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <_ZN16AndroidAccessory16configureAndroidEv>
    23c2:	8a 8f       	std	Y+26, r24	; 0x1a
    23c4:	0a c0       	rjmp	.+20     	; 0x23da <_ZN16AndroidAccessory11isConnectedEv+0xce>
        } else {
            Serial.print(F("found possible device. swithcing to serial mode\n"));
            switchDevice(1);
        }
    } else if (usb.getUsbTaskState() == USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE) {
        if (connected)
    23c6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23c8:	88 23       	and	r24, r24
    23ca:	31 f0       	breq	.+12     	; 0x23d8 <_ZN16AndroidAccessory11isConnectedEv+0xcc>
            Serial.println(F("disconnect\n"));
    23cc:	87 e6       	ldi	r24, 0x67	; 103
    23ce:	95 e0       	ldi	r25, 0x05	; 5
    23d0:	65 e0       	ldi	r22, 0x05	; 5
    23d2:	72 e0       	ldi	r23, 0x02	; 2
    23d4:	0e 94 35 0c 	call	0x186a	; 0x186a <_ZN5Print7printlnEPK19__FlashStringHelper>
        connected = false;
    23d8:	1a 8e       	std	Y+26, r1	; 0x1a
    }

    return connected;
    23da:	8a 8d       	ldd	r24, Y+26	; 0x1a
}
    23dc:	df 91       	pop	r29
    23de:	cf 91       	pop	r28
    23e0:	1f 91       	pop	r17
    23e2:	0f 91       	pop	r16
    23e4:	ff 90       	pop	r15
    23e6:	ef 90       	pop	r14
    23e8:	df 90       	pop	r13
    23ea:	cf 90       	pop	r12
    23ec:	08 95       	ret
            connected = configureAndroid();
        } else {
            Serial.print(F("found possible device. swithcing to serial mode\n"));
            switchDevice(1);
        }
    } else if (usb.getUsbTaskState() == USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE) {
    23ee:	ce 01       	movw	r24, r28
    23f0:	49 96       	adiw	r24, 0x19	; 25
    23f2:	0e 94 69 14 	call	0x28d2	; 0x28d2 <_ZN7UsbHost15getUsbTaskStateEv>
    23f6:	82 31       	cpi	r24, 0x12	; 18
    23f8:	81 f7       	brne	.-32     	; 0x23da <_ZN16AndroidAccessory11isConnectedEv+0xce>
    23fa:	e5 cf       	rjmp	.-54     	; 0x23c6 <_ZN16AndroidAccessory11isConnectedEv+0xba>
        if (isAccessoryDevice(devDesc)) {
            Serial.print(F("found android acessory device\n"));

            connected = configureAndroid();
        } else {
            Serial.print(F("found possible device. swithcing to serial mode\n"));
    23fc:	87 e6       	ldi	r24, 0x67	; 103
    23fe:	95 e0       	ldi	r25, 0x05	; 5
    2400:	61 e1       	ldi	r22, 0x11	; 17
    2402:	72 e0       	ldi	r23, 0x02	; 2
    2404:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <_ZN5Print5printEPK19__FlashStringHelper>
            switchDevice(1);
    2408:	ce 01       	movw	r24, r28
    240a:	61 e0       	ldi	r22, 0x01	; 1
    240c:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <_ZN16AndroidAccessory12switchDeviceEh>
    2410:	e4 cf       	rjmp	.-56     	; 0x23da <_ZN16AndroidAccessory11isConnectedEv+0xce>

00002412 <_ZN16AndroidAccessory4readEPvij>:

  return numBytesInDataBuff - nextByteInDataBuffOffset;
}

int AndroidAccessory::read(void *buff, int len, unsigned int nakLimit)
{
    2412:	ef 92       	push	r14
    2414:	ff 92       	push	r15
    2416:	0f 93       	push	r16
    2418:	1f 93       	push	r17
    241a:	dc 01       	movw	r26, r24
    241c:	8b 01       	movw	r16, r22
    241e:	fa 01       	movw	r30, r20
    2420:	79 01       	movw	r14, r18
    return usb.newInTransfer(1, in, len, (char *)buff, nakLimit);
    2422:	49 96       	adiw	r24, 0x19	; 25
    2424:	61 e0       	ldi	r22, 0x01	; 1
    2426:	5b 96       	adiw	r26, 0x1b	; 27
    2428:	4c 91       	ld	r20, X
    242a:	9f 01       	movw	r18, r30
    242c:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <_ZN7UsbHost13newInTransferEhhjPcj>
}
    2430:	1f 91       	pop	r17
    2432:	0f 91       	pop	r16
    2434:	ff 90       	pop	r15
    2436:	ef 90       	pop	r14
    2438:	08 95       	ret

0000243a <_ZN16AndroidAccessory16refillDataBufferEv>:

bool AndroidAccessory::dataBufferIsEmpty() {
  return (numBytesInDataBuff == nextByteInDataBuffOffset);
}

void AndroidAccessory::refillDataBuffer() {
    243a:	cf 93       	push	r28
    243c:	df 93       	push	r29
  int bytesRead = 0;

  numBytesInDataBuff = nextByteInDataBuffOffset = 0;
    243e:	fc 01       	movw	r30, r24
    2440:	e9 56       	subi	r30, 0x69	; 105
    2442:	fe 4f       	sbci	r31, 0xFE	; 254
    2444:	11 82       	std	Z+1, r1	; 0x01
    2446:	10 82       	st	Z, r1
    2448:	ec 01       	movw	r28, r24
    244a:	cb 56       	subi	r28, 0x6B	; 107
    244c:	de 4f       	sbci	r29, 0xFE	; 254
    244e:	19 82       	std	Y+1, r1	; 0x01
    2450:	18 82       	st	Y, r1
  
  // TODO: Add is connected check?

  bytesRead = read(dataBuff, sizeof(dataBuff));
    2452:	bc 01       	movw	r22, r24
    2454:	6b 5a       	subi	r22, 0xAB	; 171
    2456:	7e 4f       	sbci	r23, 0xFE	; 254
    2458:	40 e4       	ldi	r20, 0x40	; 64
    245a:	50 e0       	ldi	r21, 0x00	; 0
    245c:	21 e0       	ldi	r18, 0x01	; 1
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	0e 94 09 12 	call	0x2412	; 0x2412 <_ZN16AndroidAccessory4readEPvij>

  if (bytesRead >= 1) {
    2464:	18 16       	cp	r1, r24
    2466:	19 06       	cpc	r1, r25
    2468:	14 f4       	brge	.+4      	; 0x246e <_ZN16AndroidAccessory16refillDataBufferEv+0x34>
    numBytesInDataBuff = bytesRead;
    246a:	99 83       	std	Y+1, r25	; 0x01
    246c:	88 83       	st	Y, r24
  }
}
    246e:	df 91       	pop	r29
    2470:	cf 91       	pop	r28
    2472:	08 95       	ret

00002474 <_ZN16AndroidAccessory9availableEv>:
  }

  return dataBufferIsEmpty() ? -1 : dataBuff[nextByteInDataBuffOffset];
}

int AndroidAccessory::available() {
    2474:	cf 93       	push	r28
    2476:	df 93       	push	r29
    2478:	ec 01       	movw	r28, r24

    return connected;
}

bool AndroidAccessory::dataBufferIsEmpty() {
  return (numBytesInDataBuff == nextByteInDataBuffOffset);
    247a:	dc 01       	movw	r26, r24
    247c:	ab 56       	subi	r26, 0x6B	; 107
    247e:	be 4f       	sbci	r27, 0xFE	; 254
    2480:	fc 01       	movw	r30, r24
    2482:	e9 56       	subi	r30, 0x69	; 105
    2484:	fe 4f       	sbci	r31, 0xFE	; 254
  // Strictly speaking this doesn't meet the "This is only for bytes
  // that have already arrived" definition from
  // <http://arduino.cc/en/Reference/StreamAvailable> but since the
  // data isn't handled by an ISR it's the only way to avoid hanging
  // waiting for `available()` to return true.
  if (dataBufferIsEmpty()) {
    2486:	2d 91       	ld	r18, X+
    2488:	3c 91       	ld	r19, X
    248a:	11 97       	sbiw	r26, 0x01	; 1
    248c:	80 81       	ld	r24, Z
    248e:	91 81       	ldd	r25, Z+1	; 0x01
    2490:	28 17       	cp	r18, r24
    2492:	39 07       	cpc	r19, r25
    2494:	19 f4       	brne	.+6      	; 0x249c <_ZN16AndroidAccessory9availableEv+0x28>
    refillDataBuffer();
    2496:	ce 01       	movw	r24, r28
    2498:	0e 94 1d 12 	call	0x243a	; 0x243a <_ZN16AndroidAccessory16refillDataBufferEv>
  }

  return numBytesInDataBuff - nextByteInDataBuffOffset;
    249c:	fe 01       	movw	r30, r28
    249e:	eb 56       	subi	r30, 0x6B	; 107
    24a0:	fe 4f       	sbci	r31, 0xFE	; 254
    24a2:	c9 56       	subi	r28, 0x69	; 105
    24a4:	de 4f       	sbci	r29, 0xFE	; 254
    24a6:	20 81       	ld	r18, Z
    24a8:	31 81       	ldd	r19, Z+1	; 0x01
    24aa:	88 81       	ld	r24, Y
    24ac:	99 81       	ldd	r25, Y+1	; 0x01
    24ae:	28 1b       	sub	r18, r24
    24b0:	39 0b       	sbc	r19, r25
}
    24b2:	c9 01       	movw	r24, r18
    24b4:	df 91       	pop	r29
    24b6:	cf 91       	pop	r28
    24b8:	08 95       	ret

000024ba <_ZN16AndroidAccessory4peekEv>:
  }

  return dataBufferIsEmpty() ? -1 : dataBuff[nextByteInDataBuffOffset++];
}

int AndroidAccessory::peek() {
    24ba:	cf 93       	push	r28
    24bc:	df 93       	push	r29
    24be:	ec 01       	movw	r28, r24

    return connected;
}

bool AndroidAccessory::dataBufferIsEmpty() {
  return (numBytesInDataBuff == nextByteInDataBuffOffset);
    24c0:	dc 01       	movw	r26, r24
    24c2:	ab 56       	subi	r26, 0x6B	; 107
    24c4:	be 4f       	sbci	r27, 0xFE	; 254
    24c6:	fc 01       	movw	r30, r24
    24c8:	e9 56       	subi	r30, 0x69	; 105
    24ca:	fe 4f       	sbci	r31, 0xFE	; 254
  return dataBufferIsEmpty() ? -1 : dataBuff[nextByteInDataBuffOffset++];
}

int AndroidAccessory::peek() {

  if (dataBufferIsEmpty()) {
    24cc:	2d 91       	ld	r18, X+
    24ce:	3c 91       	ld	r19, X
    24d0:	11 97       	sbiw	r26, 0x01	; 1
    24d2:	80 81       	ld	r24, Z
    24d4:	91 81       	ldd	r25, Z+1	; 0x01
    24d6:	28 17       	cp	r18, r24
    24d8:	39 07       	cpc	r19, r25
    24da:	19 f4       	brne	.+6      	; 0x24e2 <_ZN16AndroidAccessory4peekEv+0x28>
    refillDataBuffer();
    24dc:	ce 01       	movw	r24, r28
    24de:	0e 94 1d 12 	call	0x243a	; 0x243a <_ZN16AndroidAccessory16refillDataBufferEv>

    return connected;
}

bool AndroidAccessory::dataBufferIsEmpty() {
  return (numBytesInDataBuff == nextByteInDataBuffOffset);
    24e2:	fe 01       	movw	r30, r28
    24e4:	e9 56       	subi	r30, 0x69	; 105
    24e6:	fe 4f       	sbci	r31, 0xFE	; 254
    24e8:	80 81       	ld	r24, Z
    24ea:	91 81       	ldd	r25, Z+1	; 0x01
    24ec:	fe 01       	movw	r30, r28
    24ee:	eb 56       	subi	r30, 0x6B	; 107
    24f0:	fe 4f       	sbci	r31, 0xFE	; 254

  if (dataBufferIsEmpty()) {
    refillDataBuffer();
  }

  return dataBufferIsEmpty() ? -1 : dataBuff[nextByteInDataBuffOffset];
    24f2:	20 81       	ld	r18, Z
    24f4:	31 81       	ldd	r19, Z+1	; 0x01
    24f6:	28 17       	cp	r18, r24
    24f8:	39 07       	cpc	r19, r25
    24fa:	39 f0       	breq	.+14     	; 0x250a <_ZN16AndroidAccessory4peekEv+0x50>
    24fc:	c8 0f       	add	r28, r24
    24fe:	d9 1f       	adc	r29, r25
    2500:	cb 5a       	subi	r28, 0xAB	; 171
    2502:	de 4f       	sbci	r29, 0xFE	; 254
    2504:	28 81       	ld	r18, Y
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	02 c0       	rjmp	.+4      	; 0x250e <_ZN16AndroidAccessory4peekEv+0x54>
    250a:	2f ef       	ldi	r18, 0xFF	; 255
    250c:	3f ef       	ldi	r19, 0xFF	; 255
}
    250e:	c9 01       	movw	r24, r18
    2510:	df 91       	pop	r29
    2512:	cf 91       	pop	r28
    2514:	08 95       	ret

00002516 <_ZN16AndroidAccessory4readEv>:
  if (bytesRead >= 1) {
    numBytesInDataBuff = bytesRead;
  }
}

int AndroidAccessory::read() {
    2516:	cf 93       	push	r28
    2518:	df 93       	push	r29
    251a:	ec 01       	movw	r28, r24

    return connected;
}

bool AndroidAccessory::dataBufferIsEmpty() {
  return (numBytesInDataBuff == nextByteInDataBuffOffset);
    251c:	dc 01       	movw	r26, r24
    251e:	ab 56       	subi	r26, 0x6B	; 107
    2520:	be 4f       	sbci	r27, 0xFE	; 254
    2522:	fc 01       	movw	r30, r24
    2524:	e9 56       	subi	r30, 0x69	; 105
    2526:	fe 4f       	sbci	r31, 0xFE	; 254
  }
}

int AndroidAccessory::read() {

  if (dataBufferIsEmpty()) {
    2528:	2d 91       	ld	r18, X+
    252a:	3c 91       	ld	r19, X
    252c:	11 97       	sbiw	r26, 0x01	; 1
    252e:	80 81       	ld	r24, Z
    2530:	91 81       	ldd	r25, Z+1	; 0x01
    2532:	28 17       	cp	r18, r24
    2534:	39 07       	cpc	r19, r25
    2536:	19 f4       	brne	.+6      	; 0x253e <_ZN16AndroidAccessory4readEv+0x28>
    refillDataBuffer();
    2538:	ce 01       	movw	r24, r28
    253a:	0e 94 1d 12 	call	0x243a	; 0x243a <_ZN16AndroidAccessory16refillDataBufferEv>

    return connected;
}

bool AndroidAccessory::dataBufferIsEmpty() {
  return (numBytesInDataBuff == nextByteInDataBuffOffset);
    253e:	fe 01       	movw	r30, r28
    2540:	e9 56       	subi	r30, 0x69	; 105
    2542:	fe 4f       	sbci	r31, 0xFE	; 254
    2544:	80 81       	ld	r24, Z
    2546:	91 81       	ldd	r25, Z+1	; 0x01
    2548:	de 01       	movw	r26, r28
    254a:	ab 56       	subi	r26, 0x6B	; 107
    254c:	be 4f       	sbci	r27, 0xFE	; 254

  if (dataBufferIsEmpty()) {
    refillDataBuffer();
  }

  return dataBufferIsEmpty() ? -1 : dataBuff[nextByteInDataBuffOffset++];
    254e:	2d 91       	ld	r18, X+
    2550:	3c 91       	ld	r19, X
    2552:	11 97       	sbiw	r26, 0x01	; 1
    2554:	28 17       	cp	r18, r24
    2556:	39 07       	cpc	r19, r25
    2558:	51 f0       	breq	.+20     	; 0x256e <_ZN16AndroidAccessory4readEv+0x58>
    255a:	c8 0f       	add	r28, r24
    255c:	d9 1f       	adc	r29, r25
    255e:	cb 5a       	subi	r28, 0xAB	; 171
    2560:	de 4f       	sbci	r29, 0xFE	; 254
    2562:	28 81       	ld	r18, Y
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	01 96       	adiw	r24, 0x01	; 1
    2568:	91 83       	std	Z+1, r25	; 0x01
    256a:	80 83       	st	Z, r24
    256c:	02 c0       	rjmp	.+4      	; 0x2572 <_ZN16AndroidAccessory4readEv+0x5c>
    256e:	2f ef       	ldi	r18, 0xFF	; 255
    2570:	3f ef       	ldi	r19, 0xFF	; 255
}
    2572:	c9 01       	movw	r24, r18
    2574:	df 91       	pop	r29
    2576:	cf 91       	pop	r28
    2578:	08 95       	ret

0000257a <_ZN8MAX3421E8spi_initEv>:
        byte Task();
    private:
      static void spi_init() {
        uint8_t tmp;
        // initialize SPI pins
        pinMode(SCK_PIN, OUTPUT);
    257a:	84 e3       	ldi	r24, 0x34	; 52
    257c:	61 e0       	ldi	r22, 0x01	; 1
    257e:	0e 94 e6 06 	call	0xdcc	; 0xdcc <pinMode>
        pinMode(MOSI_PIN, OUTPUT);
    2582:	83 e3       	ldi	r24, 0x33	; 51
    2584:	61 e0       	ldi	r22, 0x01	; 1
    2586:	0e 94 e6 06 	call	0xdcc	; 0xdcc <pinMode>
        pinMode(MISO_PIN, INPUT);
    258a:	82 e3       	ldi	r24, 0x32	; 50
    258c:	60 e0       	ldi	r22, 0x00	; 0
    258e:	0e 94 e6 06 	call	0xdcc	; 0xdcc <pinMode>
        pinMode(SS_PIN, OUTPUT);
    2592:	85 e3       	ldi	r24, 0x35	; 53
    2594:	61 e0       	ldi	r22, 0x01	; 1
    2596:	0e 94 e6 06 	call	0xdcc	; 0xdcc <pinMode>
        digitalWrite( SS_PIN, HIGH ); 
    259a:	85 e3       	ldi	r24, 0x35	; 53
    259c:	61 e0       	ldi	r22, 0x01	; 1
    259e:	0e 94 2b 07 	call	0xe56	; 0xe56 <digitalWrite>
        /* mode 00 (CPOL=0, CPHA=0) master, fclk/2. Mode 11 (CPOL=11, CPHA=11) is also supported by MAX3421E */
        SPCR = 0x50;
    25a2:	80 e5       	ldi	r24, 0x50	; 80
    25a4:	8c bd       	out	0x2c, r24	; 44
        SPSR = 0x01;
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	8d bd       	out	0x2d, r24	; 45
        /**/
        tmp = SPSR;
    25aa:	8d b5       	in	r24, 0x2d	; 45
        tmp = SPDR;
    25ac:	8e b5       	in	r24, 0x2e	; 46
    }
    25ae:	08 95       	ret

000025b0 <_ZN8MAX3421EC1Ev>:
static byte vbusState;

/* Functions    */

/* Constructor */
MAX3421E::MAX3421E()
    25b0:	cf 93       	push	r28
    25b2:	df 93       	push	r29
{
    spi_init();  
    25b4:	0e 94 bd 12 	call	0x257a	; 0x257a <_ZN8MAX3421E8spi_initEv>
#if !defined(TARGET_MEGA_ADK)
    pinMode( MAX_INT, INPUT);
    pinMode( MAX_GPX, INPUT );
#else
    // "Internal" pins so can't use Arduino helper functions.
    INT_DDR &= ~_BV(INT);
    25b8:	6e 98       	cbi	0x0d, 6	; 13
    GPX_DDR &= ~_BV(GPX);
    25ba:	c4 e0       	ldi	r28, 0x04	; 4
    25bc:	d1 e0       	ldi	r29, 0x01	; 1
    25be:	88 81       	ld	r24, Y
    25c0:	87 7f       	andi	r24, 0xF7	; 247
    25c2:	88 83       	st	Y, r24
#endif
    pinMode( MAX_SS, OUTPUT );
    25c4:	85 e3       	ldi	r24, 0x35	; 53
    25c6:	61 e0       	ldi	r22, 0x01	; 1
    25c8:	0e 94 e6 06 	call	0xdcc	; 0xdcc <pinMode>
    digitalWrite(MAX_SS,HIGH);   
    25cc:	85 e3       	ldi	r24, 0x35	; 53
    25ce:	61 e0       	ldi	r22, 0x01	; 1
    25d0:	0e 94 2b 07 	call	0xe56	; 0xe56 <digitalWrite>
#if !defined(TARGET_MEGA_ADK)
    pinMode( MAX_RESET, OUTPUT );
    digitalWrite( MAX_RESET, HIGH );  //release MAX3421E from reset
#else
    // "Internal" pins so can't use Arduino helper functions.
    RST_DDR |= _BV(RST);
    25d4:	88 81       	ld	r24, Y
    25d6:	84 60       	ori	r24, 0x04	; 4
    25d8:	88 83       	st	Y, r24
    RST_PORT |= _BV(RST); // Equivalent to setRST(HIGH) from old code.
    25da:	e5 e0       	ldi	r30, 0x05	; 5
    25dc:	f1 e0       	ldi	r31, 0x01	; 1
    25de:	80 81       	ld	r24, Z
    25e0:	84 60       	ori	r24, 0x04	; 4
    25e2:	80 83       	st	Z, r24
#endif
}
    25e4:	df 91       	pop	r29
    25e6:	cf 91       	pop	r28
    25e8:	08 95       	ret

000025ea <_ZN8MAX3421E12getVbusStateEv>:

byte MAX3421E::getVbusState( void )
{ 
    return( vbusState );
}
    25ea:	80 91 f0 05 	lds	r24, 0x05F0
    25ee:	08 95       	ret

000025f0 <_ZN8MAX3421E5regWrEhh>:
//    digitalWrite( pin, HIGH );
//    digitalWrite( pin, LOW );
//}
/* Single host register write   */
void MAX3421E::regWr( byte reg, byte val)
{
    25f0:	0f 93       	push	r16
    25f2:	1f 93       	push	r17
    25f4:	08 2f       	mov	r16, r24
    25f6:	16 2f       	mov	r17, r22
      digitalWrite(MAX_SS,LOW);
    25f8:	85 e3       	ldi	r24, 0x35	; 53
    25fa:	60 e0       	ldi	r22, 0x00	; 0
    25fc:	0e 94 2b 07 	call	0xe56	; 0xe56 <digitalWrite>
      SPDR = ( reg | 0x02 );
    2600:	02 60       	ori	r16, 0x02	; 2
    2602:	0e bd       	out	0x2e, r16	; 46
      while(!( SPSR & ( 1 << SPIF )));
    2604:	0d b4       	in	r0, 0x2d	; 45
    2606:	07 fe       	sbrs	r0, 7
    2608:	fd cf       	rjmp	.-6      	; 0x2604 <_ZN8MAX3421E5regWrEhh+0x14>
      SPDR = val;
    260a:	1e bd       	out	0x2e, r17	; 46
      while(!( SPSR & ( 1 << SPIF )));
    260c:	0d b4       	in	r0, 0x2d	; 45
    260e:	07 fe       	sbrs	r0, 7
    2610:	fd cf       	rjmp	.-6      	; 0x260c <_ZN8MAX3421E5regWrEhh+0x1c>
      digitalWrite(MAX_SS,HIGH);
    2612:	85 e3       	ldi	r24, 0x35	; 53
    2614:	61 e0       	ldi	r22, 0x01	; 1
    2616:	0e 94 2b 07 	call	0xe56	; 0xe56 <digitalWrite>
      return;
}
    261a:	1f 91       	pop	r17
    261c:	0f 91       	pop	r16
    261e:	08 95       	ret

00002620 <_ZN8MAX3421E7bytesWrEhhPc>:
/* multiple-byte write */
/* returns a pointer to a memory position after last written */
char * MAX3421E::bytesWr( byte reg, byte nbytes, char * data )
{
    2620:	ef 92       	push	r14
    2622:	ff 92       	push	r15
    2624:	0f 93       	push	r16
    2626:	1f 93       	push	r17
    2628:	df 93       	push	r29
    262a:	cf 93       	push	r28
    262c:	0f 92       	push	r0
    262e:	cd b7       	in	r28, 0x3d	; 61
    2630:	de b7       	in	r29, 0x3e	; 62
    2632:	16 2f       	mov	r17, r22
    2634:	79 01       	movw	r14, r18
    digitalWrite(MAX_SS,LOW);
    2636:	85 e3       	ldi	r24, 0x35	; 53
    2638:	60 e0       	ldi	r22, 0x00	; 0
    263a:	49 83       	std	Y+1, r20	; 0x01
    263c:	0e 94 2b 07 	call	0xe56	; 0xe56 <digitalWrite>
    SPDR = ( reg | 0x02 );
    2640:	12 60       	ori	r17, 0x02	; 2
    2642:	1e bd       	out	0x2e, r17	; 46
    while( nbytes-- ) {
    2644:	49 81       	ldd	r20, Y+1	; 0x01
    2646:	84 2f       	mov	r24, r20
    2648:	f7 01       	movw	r30, r14
    264a:	06 c0       	rjmp	.+12     	; 0x2658 <_ZN8MAX3421E7bytesWrEhhPc+0x38>
      while(!( SPSR & ( 1 << SPIF )));  //check if previous byte was sent
    264c:	0d b4       	in	r0, 0x2d	; 45
    264e:	07 fe       	sbrs	r0, 7
    2650:	fd cf       	rjmp	.-6      	; 0x264c <_ZN8MAX3421E7bytesWrEhhPc+0x2c>
      SPDR = ( *data );               // send next data byte
    2652:	91 91       	ld	r25, Z+
    2654:	9e bd       	out	0x2e, r25	; 46
      data++;                         // advance data pointer
    2656:	81 50       	subi	r24, 0x01	; 1
/* returns a pointer to a memory position after last written */
char * MAX3421E::bytesWr( byte reg, byte nbytes, char * data )
{
    digitalWrite(MAX_SS,LOW);
    SPDR = ( reg | 0x02 );
    while( nbytes-- ) {
    2658:	88 23       	and	r24, r24
    265a:	c1 f7       	brne	.-16     	; 0x264c <_ZN8MAX3421E7bytesWrEhhPc+0x2c>
    265c:	87 01       	movw	r16, r14
    265e:	04 0f       	add	r16, r20
    2660:	11 1d       	adc	r17, r1
      while(!( SPSR & ( 1 << SPIF )));  //check if previous byte was sent
      SPDR = ( *data );               // send next data byte
      data++;                         // advance data pointer
    }
    while(!( SPSR & ( 1 << SPIF )));
    2662:	0d b4       	in	r0, 0x2d	; 45
    2664:	07 fe       	sbrs	r0, 7
    2666:	fd cf       	rjmp	.-6      	; 0x2662 <_ZN8MAX3421E7bytesWrEhhPc+0x42>
    digitalWrite(MAX_SS,HIGH);
    2668:	85 e3       	ldi	r24, 0x35	; 53
    266a:	61 e0       	ldi	r22, 0x01	; 1
    266c:	0e 94 2b 07 	call	0xe56	; 0xe56 <digitalWrite>
    return( data );
}
    2670:	c8 01       	movw	r24, r16
    2672:	0f 90       	pop	r0
    2674:	cf 91       	pop	r28
    2676:	df 91       	pop	r29
    2678:	1f 91       	pop	r17
    267a:	0f 91       	pop	r16
    267c:	ff 90       	pop	r15
    267e:	ef 90       	pop	r14
    2680:	08 95       	ret

00002682 <_ZN8MAX3421E5regRdEh>:
    
    return;     
}
/* Single host register read        */
byte MAX3421E::regRd( byte reg )    
{
    2682:	1f 93       	push	r17
    2684:	16 2f       	mov	r17, r22
  byte tmp;
    digitalWrite(MAX_SS,LOW);
    2686:	85 e3       	ldi	r24, 0x35	; 53
    2688:	60 e0       	ldi	r22, 0x00	; 0
    268a:	0e 94 2b 07 	call	0xe56	; 0xe56 <digitalWrite>
    SPDR = reg;
    268e:	1e bd       	out	0x2e, r17	; 46
    while(!( SPSR & ( 1 << SPIF )));
    2690:	0d b4       	in	r0, 0x2d	; 45
    2692:	07 fe       	sbrs	r0, 7
    2694:	fd cf       	rjmp	.-6      	; 0x2690 <_ZN8MAX3421E5regRdEh+0xe>
    SPDR = 0; //send empty byte
    2696:	1e bc       	out	0x2e, r1	; 46
    while(!( SPSR & ( 1 << SPIF )));
    2698:	0d b4       	in	r0, 0x2d	; 45
    269a:	07 fe       	sbrs	r0, 7
    269c:	fd cf       	rjmp	.-6      	; 0x2698 <_ZN8MAX3421E5regRdEh+0x16>
    digitalWrite(MAX_SS,HIGH); 
    269e:	85 e3       	ldi	r24, 0x35	; 53
    26a0:	61 e0       	ldi	r22, 0x01	; 1
    26a2:	0e 94 2b 07 	call	0xe56	; 0xe56 <digitalWrite>
    return( SPDR );
    26a6:	8e b5       	in	r24, 0x2e	; 46
}
    26a8:	1f 91       	pop	r17
    26aa:	08 95       	ret

000026ac <_ZN8MAX3421E7bytesRdEhhPc>:
/* multiple-bytes register read                             */
/* returns a pointer to a memory position after last read   */
char * MAX3421E::bytesRd ( byte reg, byte nbytes, char  * data )
{
    26ac:	ef 92       	push	r14
    26ae:	ff 92       	push	r15
    26b0:	0f 93       	push	r16
    26b2:	1f 93       	push	r17
    26b4:	cf 93       	push	r28
    26b6:	df 93       	push	r29
    26b8:	16 2f       	mov	r17, r22
    26ba:	04 2f       	mov	r16, r20
    26bc:	e9 01       	movw	r28, r18
    digitalWrite(MAX_SS,LOW);
    26be:	85 e3       	ldi	r24, 0x35	; 53
    26c0:	60 e0       	ldi	r22, 0x00	; 0
    26c2:	0e 94 2b 07 	call	0xe56	; 0xe56 <digitalWrite>
    SPDR = reg;      
    26c6:	1e bd       	out	0x2e, r17	; 46
    while(!( SPSR & ( 1 << SPIF )));    //wait
    26c8:	0d b4       	in	r0, 0x2d	; 45
    26ca:	07 fe       	sbrs	r0, 7
    26cc:	fd cf       	rjmp	.-6      	; 0x26c8 <_ZN8MAX3421E7bytesRdEhhPc+0x1c>
    26ce:	fe 01       	movw	r30, r28
    26d0:	80 2f       	mov	r24, r16
    26d2:	07 c0       	rjmp	.+14     	; 0x26e2 <_ZN8MAX3421E7bytesRdEhhPc+0x36>
    while( nbytes ) {
      SPDR = 0; //send empty byte
    26d4:	1e bc       	out	0x2e, r1	; 46
      nbytes--;
    26d6:	81 50       	subi	r24, 0x01	; 1
      while(!( SPSR & ( 1 << SPIF )));
    26d8:	0d b4       	in	r0, 0x2d	; 45
    26da:	07 fe       	sbrs	r0, 7
    26dc:	fd cf       	rjmp	.-6      	; 0x26d8 <_ZN8MAX3421E7bytesRdEhhPc+0x2c>
      *data = SPDR;
    26de:	9e b5       	in	r25, 0x2e	; 46
    26e0:	91 93       	st	Z+, r25
char * MAX3421E::bytesRd ( byte reg, byte nbytes, char  * data )
{
    digitalWrite(MAX_SS,LOW);
    SPDR = reg;      
    while(!( SPSR & ( 1 << SPIF )));    //wait
    while( nbytes ) {
    26e2:	88 23       	and	r24, r24
    26e4:	b9 f7       	brne	.-18     	; 0x26d4 <_ZN8MAX3421E7bytesRdEhhPc+0x28>
      nbytes--;
      while(!( SPSR & ( 1 << SPIF )));
      *data = SPDR;
      data++;
    }
    digitalWrite(MAX_SS,HIGH);
    26e6:	85 e3       	ldi	r24, 0x35	; 53
    26e8:	61 e0       	ldi	r22, 0x01	; 1
    26ea:	0e 94 2b 07 	call	0xe56	; 0xe56 <digitalWrite>
    26ee:	c0 0f       	add	r28, r16
    26f0:	d1 1d       	adc	r29, r1
    return( data );   
}
    26f2:	ce 01       	movw	r24, r28
    26f4:	df 91       	pop	r29
    26f6:	cf 91       	pop	r28
    26f8:	1f 91       	pop	r17
    26fa:	0f 91       	pop	r16
    26fc:	ff 90       	pop	r15
    26fe:	ef 90       	pop	r14
    2700:	08 95       	ret

00002702 <_ZN8MAX3421E5resetEv>:
    tmpbyte |= ( regRd( rIOPINS1 ) >>4 ) ;  //shift low bits and OR with upper from previous operation. Upper nibble zeroes during shift, at least with this compiler
    return( tmpbyte );
}
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
boolean MAX3421E::reset()
{
    2702:	0f 93       	push	r16
    2704:	1f 93       	push	r17
    2706:	cf 93       	push	r28
    2708:	df 93       	push	r29
    270a:	8c 01       	movw	r16, r24
  unsigned short tmp = 0;
    regWr( rUSBCTL, bmCHIPRES );                        //Chip reset. This stops the oscillator
    270c:	88 e7       	ldi	r24, 0x78	; 120
    270e:	60 e2       	ldi	r22, 0x20	; 32
    2710:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
    regWr( rUSBCTL, 0x00 );                             //Remove the reset
    2714:	88 e7       	ldi	r24, 0x78	; 120
    2716:	60 e0       	ldi	r22, 0x00	; 0
    2718:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
    while(!(regRd( rUSBIRQ ) & bmOSCOKIRQ )) {          //wait until the PLL is stable
    271c:	c0 e0       	ldi	r28, 0x00	; 0
    271e:	d0 e0       	ldi	r29, 0x00	; 0
    2720:	02 c0       	rjmp	.+4      	; 0x2726 <_ZN8MAX3421E5resetEv+0x24>
    2722:	21 97       	sbiw	r28, 0x01	; 1
        tmp++;                                          //timeout after 256 attempts
        if( tmp == 0 ) {
    2724:	41 f0       	breq	.+16     	; 0x2736 <_ZN8MAX3421E5resetEv+0x34>
boolean MAX3421E::reset()
{
  unsigned short tmp = 0;
    regWr( rUSBCTL, bmCHIPRES );                        //Chip reset. This stops the oscillator
    regWr( rUSBCTL, 0x00 );                             //Remove the reset
    while(!(regRd( rUSBIRQ ) & bmOSCOKIRQ )) {          //wait until the PLL is stable
    2726:	c8 01       	movw	r24, r16
    2728:	68 e6       	ldi	r22, 0x68	; 104
    272a:	0e 94 41 13 	call	0x2682	; 0x2682 <_ZN8MAX3421E5regRdEh>
    272e:	80 ff       	sbrs	r24, 0
    2730:	f8 cf       	rjmp	.-16     	; 0x2722 <_ZN8MAX3421E5resetEv+0x20>
        tmp++;                                          //timeout after 256 attempts
        if( tmp == 0 ) {
            return( false );
        }
    }
    return( true );
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	01 c0       	rjmp	.+2      	; 0x2738 <_ZN8MAX3421E5resetEv+0x36>
    regWr( rUSBCTL, bmCHIPRES );                        //Chip reset. This stops the oscillator
    regWr( rUSBCTL, 0x00 );                             //Remove the reset
    while(!(regRd( rUSBIRQ ) & bmOSCOKIRQ )) {          //wait until the PLL is stable
        tmp++;                                          //timeout after 256 attempts
        if( tmp == 0 ) {
            return( false );
    2736:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
    return( true );
}
    2738:	df 91       	pop	r29
    273a:	cf 91       	pop	r28
    273c:	1f 91       	pop	r17
    273e:	0f 91       	pop	r16
    2740:	08 95       	ret

00002742 <_ZN8MAX3421E8busprobeEv>:
//    }                      
    return( true );                                             // power on/off successful                       
}
/* probe bus to determine device presense and speed and switch host to this speed */
void MAX3421E::busprobe( void )
{
    2742:	cf 93       	push	r28
    2744:	df 93       	push	r29
    2746:	ec 01       	movw	r28, r24
 byte bus_sample;
    bus_sample = regRd( rHRSL );            //Get J,K status
    2748:	68 ef       	ldi	r22, 0xF8	; 248
    274a:	0e 94 41 13 	call	0x2682	; 0x2682 <_ZN8MAX3421E5regRdEh>
    bus_sample &= ( bmJSTATUS|bmKSTATUS );      //zero the rest of the byte
    274e:	80 7c       	andi	r24, 0xC0	; 192
    switch( bus_sample ) {                          //start full-speed or low-speed host 
    2750:	80 34       	cpi	r24, 0x40	; 64
    2752:	89 f0       	breq	.+34     	; 0x2776 <_ZN8MAX3421E8busprobeEv+0x34>
    2754:	81 34       	cpi	r24, 0x41	; 65
    2756:	18 f4       	brcc	.+6      	; 0x275e <_ZN8MAX3421E8busprobeEv+0x1c>
    2758:	88 23       	and	r24, r24
    275a:	19 f1       	breq	.+70     	; 0x27a2 <_ZN8MAX3421E8busprobeEv+0x60>
    275c:	28 c0       	rjmp	.+80     	; 0x27ae <_ZN8MAX3421E8busprobeEv+0x6c>
    275e:	80 38       	cpi	r24, 0x80	; 128
    2760:	19 f0       	breq	.+6      	; 0x2768 <_ZN8MAX3421E8busprobeEv+0x26>
    2762:	80 3c       	cpi	r24, 0xC0	; 192
    2764:	21 f5       	brne	.+72     	; 0x27ae <_ZN8MAX3421E8busprobeEv+0x6c>
    2766:	19 c0       	rjmp	.+50     	; 0x279a <_ZN8MAX3421E8busprobeEv+0x58>
        case( bmJSTATUS ):
            if(( regRd( rMODE ) & bmLOWSPEED ) == 0 ) {
    2768:	ce 01       	movw	r24, r28
    276a:	68 ed       	ldi	r22, 0xD8	; 216
    276c:	0e 94 41 13 	call	0x2682	; 0x2682 <_ZN8MAX3421E5regRdEh>
    2770:	81 fd       	sbrc	r24, 1
    2772:	07 c0       	rjmp	.+14     	; 0x2782 <_ZN8MAX3421E8busprobeEv+0x40>
    2774:	0c c0       	rjmp	.+24     	; 0x278e <_ZN8MAX3421E8busprobeEv+0x4c>
                regWr( rMODE, MODE_LS_HOST);        //start low-speed host
                vbusState = LSHOST;
            }
            break;
        case( bmKSTATUS ):
            if(( regRd( rMODE ) & bmLOWSPEED ) == 0 ) {
    2776:	ce 01       	movw	r24, r28
    2778:	68 ed       	ldi	r22, 0xD8	; 216
    277a:	0e 94 41 13 	call	0x2682	; 0x2682 <_ZN8MAX3421E5regRdEh>
    277e:	81 fd       	sbrc	r24, 1
    2780:	06 c0       	rjmp	.+12     	; 0x278e <_ZN8MAX3421E8busprobeEv+0x4c>
                regWr( rMODE, MODE_LS_HOST );       //start low-speed host
    2782:	88 ed       	ldi	r24, 0xD8	; 216
    2784:	6b ec       	ldi	r22, 0xCB	; 203
    2786:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
                vbusState = LSHOST;
    278a:	83 e0       	ldi	r24, 0x03	; 3
    278c:	07 c0       	rjmp	.+14     	; 0x279c <_ZN8MAX3421E8busprobeEv+0x5a>
            }
            else {
                regWr( rMODE, MODE_FS_HOST );       //start full-speed host
    278e:	88 ed       	ldi	r24, 0xD8	; 216
    2790:	69 ec       	ldi	r22, 0xC9	; 201
    2792:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
                vbusState = FSHOST;
    2796:	82 e0       	ldi	r24, 0x02	; 2
    2798:	01 c0       	rjmp	.+2      	; 0x279c <_ZN8MAX3421E8busprobeEv+0x5a>
            }
            break;
        case( bmSE1 ):              //illegal state
            vbusState = SE1;
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	80 93 f0 05 	sts	0x05F0, r24
            break;
    27a0:	06 c0       	rjmp	.+12     	; 0x27ae <_ZN8MAX3421E8busprobeEv+0x6c>
        case( bmSE0 ):              //disconnected state
            regWr( rMODE, bmDPPULLDN|bmDMPULLDN|bmHOST|bmSEPIRQ);
    27a2:	88 ed       	ldi	r24, 0xD8	; 216
    27a4:	61 ed       	ldi	r22, 0xD1	; 209
    27a6:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
            vbusState = SE0;
    27aa:	10 92 f0 05 	sts	0x05F0, r1
            break;
        }//end switch( bus_sample )
}
    27ae:	df 91       	pop	r29
    27b0:	cf 91       	pop	r28
    27b2:	08 95       	ret

000027b4 <_ZN8MAX3421E7powerOnEv>:
/* MAX3421E initialization after power-on   */
void MAX3421E::powerOn()
{
    27b4:	cf 93       	push	r28
    27b6:	df 93       	push	r29
    27b8:	ec 01       	movw	r28, r24
    /* Configure full-duplex SPI, interrupt pulse   */
    regWr( rPINCTL,( bmFDUPSPI + bmINTLEVEL + bmGPXB ));    //Full-duplex SPI, level interrupt, GPX
    27ba:	88 e8       	ldi	r24, 0x88	; 136
    27bc:	6a e1       	ldi	r22, 0x1A	; 26
    27be:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
    if( reset() == false ) {                                //stop/start the oscillator
    27c2:	ce 01       	movw	r24, r28
    27c4:	0e 94 81 13 	call	0x2702	; 0x2702 <_ZN8MAX3421E5resetEv>
    27c8:	88 23       	and	r24, r24
    27ca:	31 f4       	brne	.+12     	; 0x27d8 <_ZN8MAX3421E7powerOnEv+0x24>
        Serial.println("Error: OSCOKIRQ failed to assert");
    27cc:	87 e6       	ldi	r24, 0x67	; 103
    27ce:	95 e0       	ldi	r25, 0x05	; 5
    27d0:	61 e0       	ldi	r22, 0x01	; 1
    27d2:	72 e0       	ldi	r23, 0x02	; 2
    27d4:	0e 94 48 0c 	call	0x1890	; 0x1890 <_ZN5Print7printlnEPKc>
    }

    /* configure host operation */
    regWr( rMODE, bmDPPULLDN|bmDMPULLDN|bmHOST|bmSEPIRQ );      // set pull-downs, Host, Separate GPIN IRQ on GPX
    27d8:	88 ed       	ldi	r24, 0xD8	; 216
    27da:	61 ed       	ldi	r22, 0xD1	; 209
    27dc:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
    regWr( rHIEN, bmCONDETIE|bmFRAMEIE );                                             //connection detection
    27e0:	80 ed       	ldi	r24, 0xD0	; 208
    27e2:	60 e6       	ldi	r22, 0x60	; 96
    27e4:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
    /* check if device is connected */
    regWr( rHCTL,bmSAMPLEBUS );                                             // sample USB bus
    27e8:	88 ee       	ldi	r24, 0xE8	; 232
    27ea:	64 e0       	ldi	r22, 0x04	; 4
    27ec:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
    while(!(regRd( rHCTL ) & bmSAMPLEBUS ));                                //wait for sample operation to finish
    27f0:	ce 01       	movw	r24, r28
    27f2:	68 ee       	ldi	r22, 0xE8	; 232
    27f4:	0e 94 41 13 	call	0x2682	; 0x2682 <_ZN8MAX3421E5regRdEh>
    27f8:	82 ff       	sbrs	r24, 2
    27fa:	fa cf       	rjmp	.-12     	; 0x27f0 <_ZN8MAX3421E7powerOnEv+0x3c>
    busprobe();                                                             //check if anything is connected
    27fc:	ce 01       	movw	r24, r28
    27fe:	0e 94 a1 13 	call	0x2742	; 0x2742 <_ZN8MAX3421E8busprobeEv>
    regWr( rHIRQ, bmCONDETIRQ );                                            //clear connection detect interrupt                 
    2802:	88 ec       	ldi	r24, 0xC8	; 200
    2804:	60 e2       	ldi	r22, 0x20	; 32
    2806:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
    regWr( rCPUCTL, 0x01 );                                                 //enable interrupt pin
    280a:	80 e8       	ldi	r24, 0x80	; 128
    280c:	61 e0       	ldi	r22, 0x01	; 1
    280e:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
}
    2812:	df 91       	pop	r29
    2814:	cf 91       	pop	r28
    2816:	08 95       	ret

00002818 <_ZN8MAX3421E10IntHandlerEv>:
    }
//    usbSM();                                //USB state machine                            
    return( rcode );   
}   
byte MAX3421E::IntHandler()
{
    2818:	1f 93       	push	r17
    281a:	cf 93       	push	r28
    281c:	df 93       	push	r29
    281e:	ec 01       	movw	r28, r24
 byte HIRQ;
 byte HIRQ_sendback = 0x00;
    HIRQ = regRd( rHIRQ );                  //determine interrupt source
    2820:	68 ec       	ldi	r22, 0xC8	; 200
    2822:	0e 94 41 13 	call	0x2682	; 0x2682 <_ZN8MAX3421E5regRdEh>
    //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
    //    HIRQ_sendback |= bmFRAMEIRQ;
    //}//end FRAMEIRQ handling
    if( HIRQ & bmCONDETIRQ ) {
    2826:	85 ff       	sbrs	r24, 5
    2828:	05 c0       	rjmp	.+10     	; 0x2834 <_ZN8MAX3421E10IntHandlerEv+0x1c>
        busprobe();
    282a:	ce 01       	movw	r24, r28
    282c:	0e 94 a1 13 	call	0x2742	; 0x2742 <_ZN8MAX3421E8busprobeEv>
        HIRQ_sendback |= bmCONDETIRQ;
    2830:	10 e2       	ldi	r17, 0x20	; 32
    2832:	01 c0       	rjmp	.+2      	; 0x2836 <_ZN8MAX3421E10IntHandlerEv+0x1e>
    return( rcode );   
}   
byte MAX3421E::IntHandler()
{
 byte HIRQ;
 byte HIRQ_sendback = 0x00;
    2834:	10 e0       	ldi	r17, 0x00	; 0
    if( HIRQ & bmCONDETIRQ ) {
        busprobe();
        HIRQ_sendback |= bmCONDETIRQ;
    }
    /* End HIRQ interrupts handling, clear serviced IRQs    */
    regWr( rHIRQ, HIRQ_sendback );
    2836:	88 ec       	ldi	r24, 0xC8	; 200
    2838:	61 2f       	mov	r22, r17
    283a:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
    return( HIRQ_sendback );
}
    283e:	81 2f       	mov	r24, r17
    2840:	df 91       	pop	r29
    2842:	cf 91       	pop	r28
    2844:	1f 91       	pop	r17
    2846:	08 95       	ret

00002848 <_ZN8MAX3421E10GpxHandlerEv>:
byte MAX3421E::GpxHandler()
{
 byte GPINIRQ = regRd( rGPINIRQ );          //read GPIN IRQ register
    2848:	60 eb       	ldi	r22, 0xB0	; 176
    284a:	0e 94 41 13 	call	0x2682	; 0x2682 <_ZN8MAX3421E5regRdEh>
//        delay( 1000 );
//        vbusPwr( ON );
//        regWr( rGPINIRQ, bmGPINIRQ7 );
//    }       
    return( GPINIRQ );
}
    284e:	08 95       	ret

00002850 <_ZN8MAX3421E4TaskEv>:
    regWr( rHIRQ, bmCONDETIRQ );                                            //clear connection detect interrupt                 
    regWr( rCPUCTL, 0x01 );                                                 //enable interrupt pin
}
/* MAX3421 state change task and interrupt handler */
byte MAX3421E::Task( void )
{
    2850:	1f 93       	push	r17
    2852:	cf 93       	push	r28
    2854:	df 93       	push	r29
    2856:	ec 01       	movw	r28, r24

#if !defined(TARGET_MEGA_ADK)
    pinvalue = digitalRead( MAX_INT );    
#else
    // "Internal" pin so can't use Arduino helper functions.
    pinvalue = INT_PIN & _BV(INT) ? HIGH : LOW; // from old `readINT()`
    2858:	66 9b       	sbis	0x0c, 6	; 12
    285a:	0a c0       	rjmp	.+20     	; 0x2870 <_ZN8MAX3421E4TaskEv+0x20>
    regWr( rCPUCTL, 0x01 );                                                 //enable interrupt pin
}
/* MAX3421 state change task and interrupt handler */
byte MAX3421E::Task( void )
{
 byte rcode = 0;
    285c:	10 e0       	ldi	r17, 0x00	; 0

#if !defined(TARGET_MEGA_ADK)
    pinvalue = digitalRead( MAX_GPX );
#else
    // "Internal" pin so can't use Arduino helper functions.
    pinvalue = GPX_PIN & _BV(GPX) ? HIGH : LOW; // from old `readGPX()`
    285e:	80 91 03 01 	lds	r24, 0x0103
    2862:	83 ff       	sbrs	r24, 3
    2864:	09 c0       	rjmp	.+18     	; 0x2878 <_ZN8MAX3421E4TaskEv+0x28>
    if( pinvalue == LOW ) {
        GpxHandler();
    }
//    usbSM();                                //USB state machine                            
    return( rcode );   
}   
    2866:	81 2f       	mov	r24, r17
    2868:	df 91       	pop	r29
    286a:	cf 91       	pop	r28
    286c:	1f 91       	pop	r17
    286e:	08 95       	ret
#else
    // "Internal" pin so can't use Arduino helper functions.
    pinvalue = INT_PIN & _BV(INT) ? HIGH : LOW; // from old `readINT()`
#endif
    if( pinvalue  == LOW ) {
        rcode = IntHandler();
    2870:	0e 94 0c 14 	call	0x2818	; 0x2818 <_ZN8MAX3421E10IntHandlerEv>
    2874:	18 2f       	mov	r17, r24
    2876:	f3 cf       	rjmp	.-26     	; 0x285e <_ZN8MAX3421E4TaskEv+0xe>
#else
    // "Internal" pin so can't use Arduino helper functions.
    pinvalue = GPX_PIN & _BV(GPX) ? HIGH : LOW; // from old `readGPX()`
#endif
    if( pinvalue == LOW ) {
        GpxHandler();
    2878:	ce 01       	movw	r24, r28
    287a:	0e 94 24 14 	call	0x2848	; 0x2848 <_ZN8MAX3421E10GpxHandlerEv>
    287e:	f3 cf       	rjmp	.-26     	; 0x2866 <_ZN8MAX3421E4TaskEv+0x16>

00002880 <_ZN7UsbHost4initEv>:
void UsbHost::init()
{
  byte i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    2880:	10 92 f3 05 	sts	0x05F3, r1
/* Initialize data structures */
void UsbHost::init()
{
  byte i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
        devtable[ i ].epinfo = NULL;       //clear device table
    2884:	10 92 f5 05 	sts	0x05F5, r1
    2888:	10 92 f4 05 	sts	0x05F4, r1
        devtable[ i ].devclass = 0;
    288c:	10 92 f6 05 	sts	0x05F6, r1
/* Initialize data structures */
void UsbHost::init()
{
  byte i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
        devtable[ i ].epinfo = NULL;       //clear device table
    2890:	10 92 f8 05 	sts	0x05F8, r1
    2894:	10 92 f7 05 	sts	0x05F7, r1
        devtable[ i ].devclass = 0;
    2898:	10 92 f9 05 	sts	0x05F9, r1
    }
    devtable[ 0 ].epinfo = &dev0ep; //set single ep for uninitialized device  
    289c:	8a ef       	ldi	r24, 0xFA	; 250
    289e:	95 e0       	ldi	r25, 0x05	; 5
    28a0:	90 93 f2 05 	sts	0x05F2, r25
    28a4:	80 93 f1 05 	sts	0x05F1, r24
    // not necessary dev0ep.MaxPktSize = 8;          //minimum possible                        	
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
    28a8:	80 e4       	ldi	r24, 0x40	; 64
    28aa:	80 93 ff 05 	sts	0x05FF, r24
    dev0ep.rcvToggle = bmRCVTOG0;
    28ae:	80 e1       	ldi	r24, 0x10	; 16
    28b0:	80 93 00 06 	sts	0x0600, r24
}
    28b4:	08 95       	ret

000028b6 <_ZN7UsbHostC1Ev>:
EP_RECORD dev0ep;           //Endpoint data structure used during enumeration for uninitialized device


/* constructor */

UsbHost::UsbHost () {
    28b6:	cf 93       	push	r28
    28b8:	df 93       	push	r29
    28ba:	ec 01       	movw	r28, r24
    28bc:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <_ZN8MAX3421EC1Ev>
    usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;  //set up state machine
    28c0:	81 e1       	ldi	r24, 0x11	; 17
    28c2:	80 93 01 06 	sts	0x0601, r24
    init(); 
    28c6:	ce 01       	movw	r24, r28
    28c8:	0e 94 40 14 	call	0x2880	; 0x2880 <_ZN7UsbHost4initEv>
}
    28cc:	df 91       	pop	r29
    28ce:	cf 91       	pop	r28
    28d0:	08 95       	ret

000028d2 <_ZN7UsbHost15getUsbTaskStateEv>:
    dev0ep.rcvToggle = bmRCVTOG0;
}
byte UsbHost::getUsbTaskState( void )
{
    return( usb_task_state );
}
    28d2:	80 91 01 06 	lds	r24, 0x0601
    28d6:	08 95       	ret

000028d8 <_ZN7UsbHost15setUsbTaskStateEh>:
void UsbHost::setUsbTaskState( byte state )
{
    usb_task_state = state;
    28d8:	60 93 01 06 	sts	0x0601, r22
}     
    28dc:	08 95       	ret

000028de <_ZN7UsbHost16getDevTableEntryEhh>:
EP_RECORD* UsbHost::getDevTableEntry( byte addr, byte ep )
{
  EP_RECORD* ptr;
    ptr = devtable[ addr ].epinfo;
    28de:	70 e0       	ldi	r23, 0x00	; 0
    28e0:	fb 01       	movw	r30, r22
    28e2:	ee 0f       	add	r30, r30
    28e4:	ff 1f       	adc	r31, r31
    28e6:	e6 0f       	add	r30, r22
    28e8:	f7 1f       	adc	r31, r23
    28ea:	ef 50       	subi	r30, 0x0F	; 15
    28ec:	fa 4f       	sbci	r31, 0xFA	; 250
    28ee:	20 81       	ld	r18, Z
    28f0:	31 81       	ldd	r19, Z+1	; 0x01
    ptr += ep;
    28f2:	87 e0       	ldi	r24, 0x07	; 7
    28f4:	48 9f       	mul	r20, r24
    28f6:	a0 01       	movw	r20, r0
    28f8:	11 24       	eor	r1, r1
    28fa:	24 0f       	add	r18, r20
    28fc:	35 1f       	adc	r19, r21
    return( ptr );
}
    28fe:	c9 01       	movw	r24, r18
    2900:	08 95       	ret

00002902 <_ZN7UsbHost16setDevTableEntryEhP9EP_RECORD>:
/* set device table entry */
/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
void UsbHost::setDevTableEntry( byte addr, EP_RECORD* eprecord_ptr )
{
    devtable[ addr ].epinfo = eprecord_ptr;
    2902:	70 e0       	ldi	r23, 0x00	; 0
    2904:	fb 01       	movw	r30, r22
    2906:	ee 0f       	add	r30, r30
    2908:	ff 1f       	adc	r31, r31
    290a:	e6 0f       	add	r30, r22
    290c:	f7 1f       	adc	r31, r23
    290e:	ef 50       	subi	r30, 0x0F	; 15
    2910:	fa 4f       	sbci	r31, 0xFA	; 250
    2912:	51 83       	std	Z+1, r21	; 0x01
    2914:	40 83       	st	Z, r20
    //return();
}
    2916:	08 95       	ret

00002918 <_ZN7UsbHost11outTransferEhhjPcj>:
/* OUT transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */
/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
/* major part of this function borrowed from code shared by Richard Ibbotson    */
byte UsbHost::outTransfer( byte addr, byte ep, unsigned int nbytes, char* data, unsigned int nak_limit )
{
    2918:	2f 92       	push	r2
    291a:	3f 92       	push	r3
    291c:	4f 92       	push	r4
    291e:	5f 92       	push	r5
    2920:	6f 92       	push	r6
    2922:	7f 92       	push	r7
    2924:	8f 92       	push	r8
    2926:	9f 92       	push	r9
    2928:	af 92       	push	r10
    292a:	bf 92       	push	r11
    292c:	cf 92       	push	r12
    292e:	df 92       	push	r13
    2930:	ef 92       	push	r14
    2932:	ff 92       	push	r15
    2934:	0f 93       	push	r16
    2936:	1f 93       	push	r17
    2938:	df 93       	push	r29
    293a:	cf 93       	push	r28
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
    2940:	2b 97       	sbiw	r28, 0x0b	; 11
    2942:	0f b6       	in	r0, 0x3f	; 63
    2944:	f8 94       	cli
    2946:	de bf       	out	0x3e, r29	; 62
    2948:	0f be       	out	0x3f, r0	; 63
    294a:	cd bf       	out	0x3d, r28	; 61
    294c:	d8 2e       	mov	r13, r24
    294e:	c9 2e       	mov	r12, r25
    2950:	22 2e       	mov	r2, r18
    2952:	83 2e       	mov	r8, r19
    2954:	f8 86       	std	Y+8, r15	; 0x08
    2956:	ef 82       	std	Y+7, r14	; 0x07
 byte rcode, retry_count;
 char* data_p = data;   //local copy of the data pointer
 unsigned int bytes_tosend, nak_count;
 unsigned int bytes_left = nbytes;
 byte maxpktsize = devtable[ addr ].epinfo[ ep ].MaxPktSize; 
    2958:	66 2e       	mov	r6, r22
    295a:	77 24       	eor	r7, r7
    295c:	87 e0       	ldi	r24, 0x07	; 7
    295e:	48 9f       	mul	r20, r24
    2960:	20 01       	movw	r4, r0
    2962:	11 24       	eor	r1, r1
    2964:	73 01       	movw	r14, r6
    2966:	ee 0c       	add	r14, r14
    2968:	ff 1c       	adc	r15, r15
    296a:	e6 0c       	add	r14, r6
    296c:	f7 1c       	adc	r15, r7
    296e:	21 ef       	ldi	r18, 0xF1	; 241
    2970:	35 e0       	ldi	r19, 0x05	; 5
    2972:	e2 0e       	add	r14, r18
    2974:	f3 1e       	adc	r15, r19
    2976:	d7 01       	movw	r26, r14
    2978:	ed 91       	ld	r30, X+
    297a:	fc 91       	ld	r31, X
    297c:	e4 0d       	add	r30, r4
    297e:	f5 1d       	adc	r31, r5
    2980:	a2 80       	ldd	r10, Z+2	; 0x02
 unsigned long timeout = millis() + USB_XFER_TIMEOUT;
    2982:	49 87       	std	Y+9, r20	; 0x09
    2984:	0e 94 95 04 	call	0x92a	; 0x92a <millis>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	88 57       	subi	r24, 0x78	; 120
    298e:	9c 4e       	sbci	r25, 0xEC	; 236
    2990:	af 4f       	sbci	r26, 0xFF	; 255
    2992:	bf 4f       	sbci	r27, 0xFF	; 255
    2994:	89 83       	std	Y+1, r24	; 0x01
    2996:	9a 83       	std	Y+2, r25	; 0x02
    2998:	ab 83       	std	Y+3, r26	; 0x03
    299a:	bc 83       	std	Y+4, r27	; 0x04
 
  if (!maxpktsize) { //todo: move this check close to epinfo init. Make it 1< pktsize <64
    299c:	aa 20       	and	r10, r10
    299e:	09 f4       	brne	.+2      	; 0x29a2 <_ZN7UsbHost11outTransferEhhjPcj+0x8a>
    29a0:	ae c0       	rjmp	.+348    	; 0x2afe <_ZN7UsbHost11outTransferEhhjPcj+0x1e6>
    return 0xFE;
  }
 
  regWr( rHCTL, devtable[ addr ].epinfo[ ep ].sndToggle );    //set toggle value
    29a2:	d7 01       	movw	r26, r14
    29a4:	ed 91       	ld	r30, X+
    29a6:	fc 91       	ld	r31, X
    29a8:	e4 0d       	add	r30, r4
    29aa:	f5 1d       	adc	r31, r5
    29ac:	88 ee       	ldi	r24, 0xE8	; 232
    29ae:	65 81       	ldd	r22, Z+5	; 0x05
    29b0:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
byte UsbHost::outTransfer( byte addr, byte ep, unsigned int nbytes, char* data, unsigned int nak_limit )
{
 byte rcode, retry_count;
 char* data_p = data;   //local copy of the data pointer
 unsigned int bytes_tosend, nak_count;
 unsigned int bytes_left = nbytes;
    29b4:	62 2d       	mov	r22, r2
    29b6:	78 2d       	mov	r23, r8
    29b8:	7b 87       	std	Y+11, r23	; 0x0b
    29ba:	6a 87       	std	Y+10, r22	; 0x0a
/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
/* major part of this function borrowed from code shared by Richard Ibbotson    */
byte UsbHost::outTransfer( byte addr, byte ep, unsigned int nbytes, char* data, unsigned int nak_limit )
{
 byte rcode, retry_count;
 char* data_p = data;   //local copy of the data pointer
    29bc:	e0 2e       	mov	r14, r16
    29be:	f1 2e       	mov	r15, r17
 
  regWr( rHCTL, devtable[ addr ].epinfo[ ep ].sndToggle );    //set toggle value
  while( bytes_left ) {
    retry_count = 0;
    nak_count = 0;
    bytes_tosend = ( bytes_left >= maxpktsize ) ? maxpktsize : bytes_left;
    29c0:	2a 2c       	mov	r2, r10
    29c2:	33 24       	eor	r3, r3
    bytesWr( rSNDFIFO, bytes_tosend, data_p );      //filling output FIFO
    regWr( rSNDBC, bytes_tosend );                  //set number of bytes    
    regWr( rHXFR, ( tokOUT | ep ));                 //dispatch packet
    29c4:	49 85       	ldd	r20, Y+9	; 0x09
    29c6:	40 62       	ori	r20, 0x20	; 32
    29c8:	4d 83       	std	Y+5, r20	; 0x05
  if (!maxpktsize) { //todo: move this check close to epinfo init. Make it 1< pktsize <64
    return 0xFE;
  }
 
  regWr( rHCTL, devtable[ addr ].epinfo[ ep ].sndToggle );    //set toggle value
  while( bytes_left ) {
    29ca:	79 c0       	rjmp	.+242    	; 0x2abe <_ZN7UsbHost11outTransferEhhjPcj+0x1a6>
    retry_count = 0;
    nak_count = 0;
    bytes_tosend = ( bytes_left >= maxpktsize ) ? maxpktsize : bytes_left;
    29cc:	0a 85       	ldd	r16, Y+10	; 0x0a
    29ce:	1b 85       	ldd	r17, Y+11	; 0x0b
    29d0:	20 16       	cp	r2, r16
    29d2:	31 06       	cpc	r3, r17
    29d4:	08 f4       	brcc	.+2      	; 0x29d8 <_ZN7UsbHost11outTransferEhhjPcj+0xc0>
    29d6:	81 01       	movw	r16, r2
    bytesWr( rSNDFIFO, bytes_tosend, data_p );      //filling output FIFO
    29d8:	0e 83       	std	Y+6, r16	; 0x06
    29da:	8d 2d       	mov	r24, r13
    29dc:	9c 2d       	mov	r25, r12
    29de:	60 e1       	ldi	r22, 0x10	; 16
    29e0:	40 2f       	mov	r20, r16
    29e2:	97 01       	movw	r18, r14
    29e4:	0e 94 10 13 	call	0x2620	; 0x2620 <_ZN8MAX3421E7bytesWrEhhPc>
    regWr( rSNDBC, bytes_tosend );                  //set number of bytes    
    29e8:	88 e3       	ldi	r24, 0x38	; 56
    29ea:	60 2f       	mov	r22, r16
    29ec:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
    regWr( rHXFR, ( tokOUT | ep ));                 //dispatch packet
    29f0:	80 ef       	ldi	r24, 0xF0	; 240
    29f2:	6d 81       	ldd	r22, Y+5	; 0x05
    29f4:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
    while(!(regRd( rHIRQ ) & bmHXFRDNIRQ ));        //wait for the completion IRQ
    29f8:	8d 2d       	mov	r24, r13
    29fa:	9c 2d       	mov	r25, r12
    29fc:	68 ec       	ldi	r22, 0xC8	; 200
    29fe:	0e 94 41 13 	call	0x2682	; 0x2682 <_ZN8MAX3421E5regRdEh>
    2a02:	87 ff       	sbrs	r24, 7
    2a04:	f9 cf       	rjmp	.-14     	; 0x29f8 <_ZN7UsbHost11outTransferEhhjPcj+0xe0>
    regWr( rHIRQ, bmHXFRDNIRQ );                    //clear IRQ
    2a06:	88 ec       	ldi	r24, 0xC8	; 200
    2a08:	60 e8       	ldi	r22, 0x80	; 128
    2a0a:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
    rcode = ( regRd( rHRSL ) & 0x0f );
    2a0e:	8d 2d       	mov	r24, r13
    2a10:	9c 2d       	mov	r25, r12
    2a12:	68 ef       	ldi	r22, 0xF8	; 248
    2a14:	0e 94 41 13 	call	0x2682	; 0x2682 <_ZN8MAX3421E5regRdEh>
    2a18:	5f e0       	ldi	r21, 0x0F	; 15
    2a1a:	b5 2e       	mov	r11, r21
    2a1c:	b8 22       	and	r11, r24
  }
 
  regWr( rHCTL, devtable[ addr ].epinfo[ ep ].sndToggle );    //set toggle value
  while( bytes_left ) {
    retry_count = 0;
    nak_count = 0;
    2a1e:	88 24       	eor	r8, r8
    2a20:	99 24       	eor	r9, r9
    return 0xFE;
  }
 
  regWr( rHCTL, devtable[ addr ].epinfo[ ep ].sndToggle );    //set toggle value
  while( bytes_left ) {
    retry_count = 0;
    2a22:	aa 24       	eor	r10, r10
    regWr( rSNDBC, bytes_tosend );                  //set number of bytes    
    regWr( rHXFR, ( tokOUT | ep ));                 //dispatch packet
    while(!(regRd( rHIRQ ) & bmHXFRDNIRQ ));        //wait for the completion IRQ
    regWr( rHIRQ, bmHXFRDNIRQ );                    //clear IRQ
    rcode = ( regRd( rHRSL ) & 0x0f );
    while( rcode && ( timeout > millis())) {
    2a24:	36 c0       	rjmp	.+108    	; 0x2a92 <_ZN7UsbHost11outTransferEhhjPcj+0x17a>
      switch( rcode ) {
        case hrNAK:
          nak_count++;
    2a26:	08 94       	sec
    2a28:	81 1c       	adc	r8, r1
    2a2a:	91 1c       	adc	r9, r1
          if( nak_limit && ( nak_count == USB_NAK_LIMIT )) {
    2a2c:	ef 81       	ldd	r30, Y+7	; 0x07
    2a2e:	f8 85       	ldd	r31, Y+8	; 0x08
    2a30:	30 97       	sbiw	r30, 0x00	; 0
    2a32:	59 f0       	breq	.+22     	; 0x2a4a <_ZN7UsbHost11outTransferEhhjPcj+0x132>
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	8f 16       	cp	r8, r31
    2a38:	fd e7       	ldi	r31, 0x7D	; 125
    2a3a:	9f 06       	cpc	r9, r31
    2a3c:	31 f4       	brne	.+12     	; 0x2a4a <_ZN7UsbHost11outTransferEhhjPcj+0x132>
    2a3e:	61 c0       	rjmp	.+194    	; 0x2b02 <_ZN7UsbHost11outTransferEhhjPcj+0x1ea>
            return( rcode);                                   //return NAK
          }
          break;
        case hrTIMEOUT:
          retry_count++;
    2a40:	a3 94       	inc	r10
          if( retry_count == USB_RETRY_LIMIT ) {
    2a42:	2a 2d       	mov	r18, r10
    2a44:	23 30       	cpi	r18, 0x03	; 3
    2a46:	09 f4       	brne	.+2      	; 0x2a4a <_ZN7UsbHost11outTransferEhhjPcj+0x132>
    2a48:	5c c0       	rjmp	.+184    	; 0x2b02 <_ZN7UsbHost11outTransferEhhjPcj+0x1ea>
          break;
        default:  
          return( rcode );
      }//switch( rcode...
      /* process NAK according to Host out NAK bug */
      regWr( rSNDBC, 0 );
    2a4a:	88 e3       	ldi	r24, 0x38	; 56
    2a4c:	60 e0       	ldi	r22, 0x00	; 0
    2a4e:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
      regWr( rSNDFIFO, *data_p );
    2a52:	80 e1       	ldi	r24, 0x10	; 16
    2a54:	d7 01       	movw	r26, r14
    2a56:	6c 91       	ld	r22, X
    2a58:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
      regWr( rSNDBC, bytes_tosend );
    2a5c:	88 e3       	ldi	r24, 0x38	; 56
    2a5e:	6e 81       	ldd	r22, Y+6	; 0x06
    2a60:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
      regWr( rHXFR, ( tokOUT | ep ));                 //dispatch packet
    2a64:	80 ef       	ldi	r24, 0xF0	; 240
    2a66:	6d 81       	ldd	r22, Y+5	; 0x05
    2a68:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
      while(!(regRd( rHIRQ ) & bmHXFRDNIRQ ));        //wait for the completion IRQ
    2a6c:	8d 2d       	mov	r24, r13
    2a6e:	9c 2d       	mov	r25, r12
    2a70:	68 ec       	ldi	r22, 0xC8	; 200
    2a72:	0e 94 41 13 	call	0x2682	; 0x2682 <_ZN8MAX3421E5regRdEh>
    2a76:	87 ff       	sbrs	r24, 7
    2a78:	f9 cf       	rjmp	.-14     	; 0x2a6c <_ZN7UsbHost11outTransferEhhjPcj+0x154>
      regWr( rHIRQ, bmHXFRDNIRQ );                    //clear IRQ
    2a7a:	88 ec       	ldi	r24, 0xC8	; 200
    2a7c:	60 e8       	ldi	r22, 0x80	; 128
    2a7e:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
      rcode = ( regRd( rHRSL ) & 0x0f );
    2a82:	8d 2d       	mov	r24, r13
    2a84:	9c 2d       	mov	r25, r12
    2a86:	68 ef       	ldi	r22, 0xF8	; 248
    2a88:	0e 94 41 13 	call	0x2682	; 0x2682 <_ZN8MAX3421E5regRdEh>
    2a8c:	4f e0       	ldi	r20, 0x0F	; 15
    2a8e:	b4 2e       	mov	r11, r20
    2a90:	b8 22       	and	r11, r24
    regWr( rSNDBC, bytes_tosend );                  //set number of bytes    
    regWr( rHXFR, ( tokOUT | ep ));                 //dispatch packet
    while(!(regRd( rHIRQ ) & bmHXFRDNIRQ ));        //wait for the completion IRQ
    regWr( rHIRQ, bmHXFRDNIRQ );                    //clear IRQ
    rcode = ( regRd( rHRSL ) & 0x0f );
    while( rcode && ( timeout > millis())) {
    2a92:	bb 20       	and	r11, r11
    2a94:	09 f4       	brne	.+2      	; 0x2a98 <_ZN7UsbHost11outTransferEhhjPcj+0x180>
    2a96:	4f c0       	rjmp	.+158    	; 0x2b36 <_ZN7UsbHost11outTransferEhhjPcj+0x21e>
    2a98:	0e 94 95 04 	call	0x92a	; 0x92a <millis>
    2a9c:	29 81       	ldd	r18, Y+1	; 0x01
    2a9e:	3a 81       	ldd	r19, Y+2	; 0x02
    2aa0:	4b 81       	ldd	r20, Y+3	; 0x03
    2aa2:	5c 81       	ldd	r21, Y+4	; 0x04
    2aa4:	62 17       	cp	r22, r18
    2aa6:	73 07       	cpc	r23, r19
    2aa8:	84 07       	cpc	r24, r20
    2aaa:	95 07       	cpc	r25, r21
    2aac:	08 f0       	brcs	.+2      	; 0x2ab0 <_ZN7UsbHost11outTransferEhhjPcj+0x198>
    2aae:	43 c0       	rjmp	.+134    	; 0x2b36 <_ZN7UsbHost11outTransferEhhjPcj+0x21e>
      switch( rcode ) {
    2ab0:	3b 2d       	mov	r19, r11
    2ab2:	34 30       	cpi	r19, 0x04	; 4
    2ab4:	09 f4       	brne	.+2      	; 0x2ab8 <_ZN7UsbHost11outTransferEhhjPcj+0x1a0>
    2ab6:	b7 cf       	rjmp	.-146    	; 0x2a26 <_ZN7UsbHost11outTransferEhhjPcj+0x10e>
    2ab8:	3e 30       	cpi	r19, 0x0E	; 14
    2aba:	19 f5       	brne	.+70     	; 0x2b02 <_ZN7UsbHost11outTransferEhhjPcj+0x1ea>
    2abc:	c1 cf       	rjmp	.-126    	; 0x2a40 <_ZN7UsbHost11outTransferEhhjPcj+0x128>
  if (!maxpktsize) { //todo: move this check close to epinfo init. Make it 1< pktsize <64
    return 0xFE;
  }
 
  regWr( rHCTL, devtable[ addr ].epinfo[ ep ].sndToggle );    //set toggle value
  while( bytes_left ) {
    2abe:	4a 85       	ldd	r20, Y+10	; 0x0a
    2ac0:	5b 85       	ldd	r21, Y+11	; 0x0b
    2ac2:	41 15       	cp	r20, r1
    2ac4:	51 05       	cpc	r21, r1
    2ac6:	09 f0       	breq	.+2      	; 0x2aca <_ZN7UsbHost11outTransferEhhjPcj+0x1b2>
    2ac8:	81 cf       	rjmp	.-254    	; 0x29cc <_ZN7UsbHost11outTransferEhhjPcj+0xb4>
      rcode = ( regRd( rHRSL ) & 0x0f );
    }//while( rcode && ....
    bytes_left -= bytes_tosend;
    data_p += bytes_tosend;
  }//while( bytes_left...
  devtable[ addr ].epinfo[ ep ].sndToggle = ( regRd( rHRSL ) & bmSNDTOGRD ) ? bmSNDTOG1 : bmSNDTOG0;  //update toggle
    2aca:	f3 01       	movw	r30, r6
    2acc:	ee 0f       	add	r30, r30
    2ace:	ff 1f       	adc	r31, r31
    2ad0:	e6 0d       	add	r30, r6
    2ad2:	f7 1d       	adc	r31, r7
    2ad4:	ef 50       	subi	r30, 0x0F	; 15
    2ad6:	fa 4f       	sbci	r31, 0xFA	; 250
    2ad8:	00 81       	ld	r16, Z
    2ada:	11 81       	ldd	r17, Z+1	; 0x01
    2adc:	04 0d       	add	r16, r4
    2ade:	15 1d       	adc	r17, r5
    2ae0:	8d 2d       	mov	r24, r13
    2ae2:	9c 2d       	mov	r25, r12
    2ae4:	68 ef       	ldi	r22, 0xF8	; 248
    2ae6:	0e 94 41 13 	call	0x2682	; 0x2682 <_ZN8MAX3421E5regRdEh>
    2aea:	85 ff       	sbrs	r24, 5
    2aec:	02 c0       	rjmp	.+4      	; 0x2af2 <_ZN7UsbHost11outTransferEhhjPcj+0x1da>
    2aee:	80 e8       	ldi	r24, 0x80	; 128
    2af0:	01 c0       	rjmp	.+2      	; 0x2af4 <_ZN7UsbHost11outTransferEhhjPcj+0x1dc>
    2af2:	80 e4       	ldi	r24, 0x40	; 64
    2af4:	d8 01       	movw	r26, r16
    2af6:	15 96       	adiw	r26, 0x05	; 5
    2af8:	8c 93       	st	X, r24
    2afa:	15 97       	sbiw	r26, 0x05	; 5
  return( rcode );    //should be 0 in all cases
    2afc:	02 c0       	rjmp	.+4      	; 0x2b02 <_ZN7UsbHost11outTransferEhhjPcj+0x1ea>
 unsigned int bytes_left = nbytes;
 byte maxpktsize = devtable[ addr ].epinfo[ ep ].MaxPktSize; 
 unsigned long timeout = millis() + USB_XFER_TIMEOUT;
 
  if (!maxpktsize) { //todo: move this check close to epinfo init. Make it 1< pktsize <64
    return 0xFE;
    2afe:	2e ef       	ldi	r18, 0xFE	; 254
    2b00:	b2 2e       	mov	r11, r18
    bytes_left -= bytes_tosend;
    data_p += bytes_tosend;
  }//while( bytes_left...
  devtable[ addr ].epinfo[ ep ].sndToggle = ( regRd( rHRSL ) & bmSNDTOGRD ) ? bmSNDTOG1 : bmSNDTOG0;  //update toggle
  return( rcode );    //should be 0 in all cases
}
    2b02:	8b 2d       	mov	r24, r11
    2b04:	2b 96       	adiw	r28, 0x0b	; 11
    2b06:	0f b6       	in	r0, 0x3f	; 63
    2b08:	f8 94       	cli
    2b0a:	de bf       	out	0x3e, r29	; 62
    2b0c:	0f be       	out	0x3f, r0	; 63
    2b0e:	cd bf       	out	0x3d, r28	; 61
    2b10:	cf 91       	pop	r28
    2b12:	df 91       	pop	r29
    2b14:	1f 91       	pop	r17
    2b16:	0f 91       	pop	r16
    2b18:	ff 90       	pop	r15
    2b1a:	ef 90       	pop	r14
    2b1c:	df 90       	pop	r13
    2b1e:	cf 90       	pop	r12
    2b20:	bf 90       	pop	r11
    2b22:	af 90       	pop	r10
    2b24:	9f 90       	pop	r9
    2b26:	8f 90       	pop	r8
    2b28:	7f 90       	pop	r7
    2b2a:	6f 90       	pop	r6
    2b2c:	5f 90       	pop	r5
    2b2e:	4f 90       	pop	r4
    2b30:	3f 90       	pop	r3
    2b32:	2f 90       	pop	r2
    2b34:	08 95       	ret
      regWr( rHXFR, ( tokOUT | ep ));                 //dispatch packet
      while(!(regRd( rHIRQ ) & bmHXFRDNIRQ ));        //wait for the completion IRQ
      regWr( rHIRQ, bmHXFRDNIRQ );                    //clear IRQ
      rcode = ( regRd( rHRSL ) & 0x0f );
    }//while( rcode && ....
    bytes_left -= bytes_tosend;
    2b36:	ea 85       	ldd	r30, Y+10	; 0x0a
    2b38:	fb 85       	ldd	r31, Y+11	; 0x0b
    2b3a:	e0 1b       	sub	r30, r16
    2b3c:	f1 0b       	sbc	r31, r17
    2b3e:	fb 87       	std	Y+11, r31	; 0x0b
    2b40:	ea 87       	std	Y+10, r30	; 0x0a
    data_p += bytes_tosend;
    2b42:	e0 0e       	add	r14, r16
    2b44:	f1 1e       	adc	r15, r17
    2b46:	bb cf       	rjmp	.-138    	; 0x2abe <_ZN7UsbHost11outTransferEhhjPcj+0x1a6>

00002b48 <_ZN7UsbHost11dispatchPktEhhj>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
byte UsbHost::dispatchPkt( byte token, byte ep, unsigned int nak_limit )
{
    2b48:	4f 92       	push	r4
    2b4a:	5f 92       	push	r5
    2b4c:	7f 92       	push	r7
    2b4e:	8f 92       	push	r8
    2b50:	9f 92       	push	r9
    2b52:	af 92       	push	r10
    2b54:	bf 92       	push	r11
    2b56:	cf 92       	push	r12
    2b58:	df 92       	push	r13
    2b5a:	ef 92       	push	r14
    2b5c:	ff 92       	push	r15
    2b5e:	0f 93       	push	r16
    2b60:	1f 93       	push	r17
    2b62:	df 93       	push	r29
    2b64:	cf 93       	push	r28
    2b66:	0f 92       	push	r0
    2b68:	cd b7       	in	r28, 0x3d	; 61
    2b6a:	de b7       	in	r29, 0x3e	; 62
    2b6c:	98 2e       	mov	r9, r24
    2b6e:	89 2e       	mov	r8, r25
    2b70:	76 2e       	mov	r7, r22
    2b72:	d4 2e       	mov	r13, r20
    2b74:	59 01       	movw	r10, r18
 unsigned long timeout = millis() + USB_XFER_TIMEOUT;
    2b76:	59 83       	std	Y+1, r21	; 0x01
    2b78:	0e 94 95 04 	call	0x92a	; 0x92a <millis>
    2b7c:	7b 01       	movw	r14, r22
    2b7e:	8c 01       	movw	r16, r24
    2b80:	88 e8       	ldi	r24, 0x88	; 136
    2b82:	93 e1       	ldi	r25, 0x13	; 19
    2b84:	a0 e0       	ldi	r26, 0x00	; 0
    2b86:	b0 e0       	ldi	r27, 0x00	; 0
    2b88:	e8 0e       	add	r14, r24
    2b8a:	f9 1e       	adc	r15, r25
    2b8c:	0a 1f       	adc	r16, r26
    2b8e:	1b 1f       	adc	r17, r27
 byte tmpdata;   
 byte rcode;
 unsigned int nak_count = 0;
 char retry_count = 0;
    2b90:	cc 24       	eor	r12, r12
byte UsbHost::dispatchPkt( byte token, byte ep, unsigned int nak_limit )
{
 unsigned long timeout = millis() + USB_XFER_TIMEOUT;
 byte tmpdata;   
 byte rcode;
 unsigned int nak_count = 0;
    2b92:	44 24       	eor	r4, r4
    2b94:	55 24       	eor	r5, r5
 char retry_count = 0;

  while( timeout > millis() ) {
    regWr( rHXFR, ( token|ep ));            //launch the transfer
    2b96:	d7 28       	or	r13, r7
 byte tmpdata;   
 byte rcode;
 unsigned int nak_count = 0;
 char retry_count = 0;

  while( timeout > millis() ) {
    2b98:	59 81       	ldd	r21, Y+1	; 0x01
    2b9a:	33 c0       	rjmp	.+102    	; 0x2c02 <_ZN7UsbHost11dispatchPktEhhj+0xba>
    regWr( rHXFR, ( token|ep ));            //launch the transfer
    2b9c:	80 ef       	ldi	r24, 0xF0	; 240
    2b9e:	6d 2d       	mov	r22, r13
    2ba0:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
    rcode = 0xff;   
    while( millis() < timeout ) {           //wait for transfer completion
    2ba4:	17 c0       	rjmp	.+46     	; 0x2bd4 <_ZN7UsbHost11dispatchPktEhhj+0x8c>
      tmpdata = regRd( rHIRQ );
    2ba6:	89 2d       	mov	r24, r9
    2ba8:	98 2d       	mov	r25, r8
    2baa:	68 ec       	ldi	r22, 0xC8	; 200
    2bac:	0e 94 41 13 	call	0x2682	; 0x2682 <_ZN8MAX3421E5regRdEh>
      if( tmpdata & bmHXFRDNIRQ ) {
    2bb0:	87 ff       	sbrs	r24, 7
    2bb2:	10 c0       	rjmp	.+32     	; 0x2bd4 <_ZN7UsbHost11dispatchPktEhhj+0x8c>
        regWr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
    2bb4:	88 ec       	ldi	r24, 0xC8	; 200
    2bb6:	60 e8       	ldi	r22, 0x80	; 128
    2bb8:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
      }//if( tmpdata & bmHXFRDNIRQ
    }//while ( millis() < timeout
    if( rcode != 0x00 ) {                //exit if timeout
      return( rcode );
    }
    rcode = ( regRd( rHRSL ) & 0x0f );  //analyze transfer result
    2bbc:	89 2d       	mov	r24, r9
    2bbe:	98 2d       	mov	r25, r8
    2bc0:	68 ef       	ldi	r22, 0xF8	; 248
    2bc2:	0e 94 41 13 	call	0x2682	; 0x2682 <_ZN8MAX3421E5regRdEh>
    2bc6:	58 2f       	mov	r21, r24
    2bc8:	5f 70       	andi	r21, 0x0F	; 15
    switch( rcode ) {
    2bca:	54 30       	cpi	r21, 0x04	; 4
    2bcc:	61 f0       	breq	.+24     	; 0x2be6 <_ZN7UsbHost11dispatchPktEhhj+0x9e>
    2bce:	5e 30       	cpi	r21, 0x0E	; 14
    2bd0:	09 f5       	brne	.+66     	; 0x2c14 <_ZN7UsbHost11dispatchPktEhhj+0xcc>
    2bd2:	13 c0       	rjmp	.+38     	; 0x2bfa <_ZN7UsbHost11dispatchPktEhhj+0xb2>
 char retry_count = 0;

  while( timeout > millis() ) {
    regWr( rHXFR, ( token|ep ));            //launch the transfer
    rcode = 0xff;   
    while( millis() < timeout ) {           //wait for transfer completion
    2bd4:	0e 94 95 04 	call	0x92a	; 0x92a <millis>
    2bd8:	6e 15       	cp	r22, r14
    2bda:	7f 05       	cpc	r23, r15
    2bdc:	80 07       	cpc	r24, r16
    2bde:	91 07       	cpc	r25, r17
    2be0:	10 f3       	brcs	.-60     	; 0x2ba6 <_ZN7UsbHost11dispatchPktEhhj+0x5e>
 unsigned int nak_count = 0;
 char retry_count = 0;

  while( timeout > millis() ) {
    regWr( rHXFR, ( token|ep ));            //launch the transfer
    rcode = 0xff;   
    2be2:	5f ef       	ldi	r21, 0xFF	; 255
    2be4:	17 c0       	rjmp	.+46     	; 0x2c14 <_ZN7UsbHost11dispatchPktEhhj+0xcc>
      return( rcode );
    }
    rcode = ( regRd( rHRSL ) & 0x0f );  //analyze transfer result
    switch( rcode ) {
      case hrNAK:
        nak_count ++;
    2be6:	08 94       	sec
    2be8:	41 1c       	adc	r4, r1
    2bea:	51 1c       	adc	r5, r1
        if( nak_limit && ( nak_count == nak_limit )) {
    2bec:	a1 14       	cp	r10, r1
    2bee:	b1 04       	cpc	r11, r1
    2bf0:	41 f0       	breq	.+16     	; 0x2c02 <_ZN7UsbHost11dispatchPktEhhj+0xba>
    2bf2:	4a 14       	cp	r4, r10
    2bf4:	5b 04       	cpc	r5, r11
    2bf6:	29 f4       	brne	.+10     	; 0x2c02 <_ZN7UsbHost11dispatchPktEhhj+0xba>
    2bf8:	0d c0       	rjmp	.+26     	; 0x2c14 <_ZN7UsbHost11dispatchPktEhhj+0xcc>
          return( rcode );
        }
        break;
      case hrTIMEOUT:
        retry_count ++;
    2bfa:	c3 94       	inc	r12
        if( retry_count == USB_RETRY_LIMIT ) {
    2bfc:	9c 2d       	mov	r25, r12
    2bfe:	93 30       	cpi	r25, 0x03	; 3
    2c00:	49 f0       	breq	.+18     	; 0x2c14 <_ZN7UsbHost11dispatchPktEhhj+0xcc>
 byte tmpdata;   
 byte rcode;
 unsigned int nak_count = 0;
 char retry_count = 0;

  while( timeout > millis() ) {
    2c02:	59 83       	std	Y+1, r21	; 0x01
    2c04:	0e 94 95 04 	call	0x92a	; 0x92a <millis>
    2c08:	59 81       	ldd	r21, Y+1	; 0x01
    2c0a:	6e 15       	cp	r22, r14
    2c0c:	7f 05       	cpc	r23, r15
    2c0e:	80 07       	cpc	r24, r16
    2c10:	91 07       	cpc	r25, r17
    2c12:	20 f2       	brcs	.-120    	; 0x2b9c <_ZN7UsbHost11dispatchPktEhhj+0x54>
      default:
        return( rcode );
    }//switch( rcode
  }//while( timeout > millis() 
  return( rcode );
}
    2c14:	85 2f       	mov	r24, r21
    2c16:	0f 90       	pop	r0
    2c18:	cf 91       	pop	r28
    2c1a:	df 91       	pop	r29
    2c1c:	1f 91       	pop	r17
    2c1e:	0f 91       	pop	r16
    2c20:	ff 90       	pop	r15
    2c22:	ef 90       	pop	r14
    2c24:	df 90       	pop	r13
    2c26:	cf 90       	pop	r12
    2c28:	bf 90       	pop	r11
    2c2a:	af 90       	pop	r10
    2c2c:	9f 90       	pop	r9
    2c2e:	8f 90       	pop	r8
    2c30:	7f 90       	pop	r7
    2c32:	5f 90       	pop	r5
    2c34:	4f 90       	pop	r4
    2c36:	08 95       	ret

00002c38 <_ZN7UsbHost13newInTransferEhhjPcj>:
  }//while( 1 )
}

/* Google variant of inTransfer. Pasted verbatim from ADK. Returns length instead of error code. Provided for compatibility with Google Open Accessory code */
int UsbHost::newInTransfer( byte addr, byte ep, unsigned int nbytes, char* data, unsigned int nak_limit )
{
    2c38:	3f 92       	push	r3
    2c3a:	4f 92       	push	r4
    2c3c:	5f 92       	push	r5
    2c3e:	6f 92       	push	r6
    2c40:	7f 92       	push	r7
    2c42:	8f 92       	push	r8
    2c44:	9f 92       	push	r9
    2c46:	af 92       	push	r10
    2c48:	bf 92       	push	r11
    2c4a:	cf 92       	push	r12
    2c4c:	df 92       	push	r13
    2c4e:	ef 92       	push	r14
    2c50:	ff 92       	push	r15
    2c52:	0f 93       	push	r16
    2c54:	1f 93       	push	r17
    2c56:	cf 93       	push	r28
    2c58:	df 93       	push	r29
    2c5a:	d8 2e       	mov	r13, r24
    2c5c:	c9 2e       	mov	r12, r25
    2c5e:	a4 2e       	mov	r10, r20
    2c60:	49 01       	movw	r8, r18
    2c62:	38 01       	movw	r6, r16
    2c64:	27 01       	movw	r4, r14
 byte rcode;
 byte pktsize;
 byte maxpktsize = devtable[ addr ].epinfo[ ep ].MaxPktSize; 
    2c66:	06 2f       	mov	r16, r22
    2c68:	10 e0       	ldi	r17, 0x00	; 0
    2c6a:	87 e0       	ldi	r24, 0x07	; 7
    2c6c:	48 9f       	mul	r20, r24
    2c6e:	70 01       	movw	r14, r0
    2c70:	11 24       	eor	r1, r1
    2c72:	f8 01       	movw	r30, r16
    2c74:	ee 0f       	add	r30, r30
    2c76:	ff 1f       	adc	r31, r31
    2c78:	e0 0f       	add	r30, r16
    2c7a:	f1 1f       	adc	r31, r17
    2c7c:	ef 50       	subi	r30, 0x0F	; 15
    2c7e:	fa 4f       	sbci	r31, 0xFA	; 250
    2c80:	01 90       	ld	r0, Z+
    2c82:	f0 81       	ld	r31, Z
    2c84:	e0 2d       	mov	r30, r0
    2c86:	ee 0d       	add	r30, r14
    2c88:	ff 1d       	adc	r31, r15
    2c8a:	32 80       	ldd	r3, Z+2	; 0x02
 unsigned int xfrlen = 0;
    regWr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
    2c8c:	88 ee       	ldi	r24, 0xE8	; 232
    2c8e:	66 81       	ldd	r22, Z+6	; 0x06
    2c90:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
int UsbHost::newInTransfer( byte addr, byte ep, unsigned int nbytes, char* data, unsigned int nak_limit )
{
 byte rcode;
 byte pktsize;
 byte maxpktsize = devtable[ addr ].epinfo[ ep ].MaxPktSize; 
 unsigned int xfrlen = 0;
    2c94:	c0 e0       	ldi	r28, 0x00	; 0
    2c96:	d0 e0       	ldi	r29, 0x00	; 0
    regWr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
    while( 1 ) { // use a 'return' to exit this loop
        rcode = dispatchPkt( tokIN, ep, nak_limit );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
    2c98:	8d 2d       	mov	r24, r13
    2c9a:	9c 2d       	mov	r25, r12
    2c9c:	60 e0       	ldi	r22, 0x00	; 0
    2c9e:	4a 2d       	mov	r20, r10
    2ca0:	92 01       	movw	r18, r4
    2ca2:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <_ZN7UsbHost11dispatchPktEhhj>
        if( rcode ) {
    2ca6:	88 23       	and	r24, r24
    2ca8:	09 f0       	breq	.+2      	; 0x2cac <_ZN7UsbHost13newInTransferEhhjPcj+0x74>
    2caa:	48 c0       	rjmp	.+144    	; 0x2d3c <_ZN7UsbHost13newInTransferEhhjPcj+0x104>
		return -1;                            //should be 0, indicating ACK. Else return error code.
        }
        /* check for RCVDAVIRQ and generate error if not present */ 
        /* the only case when absense of RCVDAVIRQ makes sense is when toggle error occured. Need to add handling for that */
        if(( regRd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
    2cac:	8d 2d       	mov	r24, r13
    2cae:	9c 2d       	mov	r25, r12
    2cb0:	68 ec       	ldi	r22, 0xC8	; 200
    2cb2:	0e 94 41 13 	call	0x2682	; 0x2682 <_ZN8MAX3421E5regRdEh>
    2cb6:	82 ff       	sbrs	r24, 2
    2cb8:	41 c0       	rjmp	.+130    	; 0x2d3c <_ZN7UsbHost13newInTransferEhhjPcj+0x104>
            return -1;                            //receive error
        }
        pktsize = regRd( rRCVBC );                      //number of received bytes
    2cba:	8d 2d       	mov	r24, r13
    2cbc:	9c 2d       	mov	r25, r12
    2cbe:	60 e3       	ldi	r22, 0x30	; 48
    2cc0:	0e 94 41 13 	call	0x2682	; 0x2682 <_ZN8MAX3421E5regRdEh>
    2cc4:	b8 2e       	mov	r11, r24
	if (xfrlen+pktsize <= nbytes) {
    2cc6:	c8 0f       	add	r28, r24
    2cc8:	d1 1d       	adc	r29, r1
    2cca:	8c 16       	cp	r8, r28
    2ccc:	9d 06       	cpc	r9, r29
    2cce:	40 f0       	brcs	.+16     	; 0x2ce0 <_ZN7UsbHost13newInTransferEhhjPcj+0xa8>
	  // Only copy the data to the buffer if the buffer's large enough.
	  data = bytesRd( rRCVFIFO, pktsize, data );
    2cd0:	8d 2d       	mov	r24, r13
    2cd2:	9c 2d       	mov	r25, r12
    2cd4:	68 e0       	ldi	r22, 0x08	; 8
    2cd6:	4b 2d       	mov	r20, r11
    2cd8:	93 01       	movw	r18, r6
    2cda:	0e 94 56 13 	call	0x26ac	; 0x26ac <_ZN8MAX3421E7bytesRdEhhPc>
    2cde:	3c 01       	movw	r6, r24
	}
        regWr( rHIRQ, bmRCVDAVIRQ );                    // Clear the IRQ & free the buffer
    2ce0:	88 ec       	ldi	r24, 0xC8	; 200
    2ce2:	64 e0       	ldi	r22, 0x04	; 4
    2ce4:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {      // have we transferred 'nbytes' bytes?
    2ce8:	b3 14       	cp	r11, r3
    2cea:	18 f0       	brcs	.+6      	; 0x2cf2 <_ZN7UsbHost13newInTransferEhhjPcj+0xba>
    2cec:	c8 15       	cp	r28, r8
    2cee:	d9 05       	cpc	r29, r9
    2cf0:	98 f2       	brcs	.-90     	; 0x2c98 <_ZN7UsbHost13newInTransferEhhjPcj+0x60>
            if( regRd( rHRSL ) & bmRCVTOGRD ) {                     //save toggle value
    2cf2:	8d 2d       	mov	r24, r13
    2cf4:	9c 2d       	mov	r25, r12
    2cf6:	68 ef       	ldi	r22, 0xF8	; 248
    2cf8:	0e 94 41 13 	call	0x2682	; 0x2682 <_ZN8MAX3421E5regRdEh>
    2cfc:	98 01       	movw	r18, r16
    2cfe:	22 0f       	add	r18, r18
    2d00:	33 1f       	adc	r19, r19
    2d02:	84 ff       	sbrs	r24, 4
    2d04:	0c c0       	rjmp	.+24     	; 0x2d1e <_ZN7UsbHost13newInTransferEhhjPcj+0xe6>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
    2d06:	02 0f       	add	r16, r18
    2d08:	13 1f       	adc	r17, r19
    2d0a:	0f 50       	subi	r16, 0x0F	; 15
    2d0c:	1a 4f       	sbci	r17, 0xFA	; 250
    2d0e:	d8 01       	movw	r26, r16
    2d10:	ed 91       	ld	r30, X+
    2d12:	fc 91       	ld	r31, X
    2d14:	11 97       	sbiw	r26, 0x01	; 1
    2d16:	ee 0d       	add	r30, r14
    2d18:	ff 1d       	adc	r31, r15
    2d1a:	80 e2       	ldi	r24, 0x20	; 32
    2d1c:	0b c0       	rjmp	.+22     	; 0x2d34 <_ZN7UsbHost13newInTransferEhhjPcj+0xfc>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
    2d1e:	02 0f       	add	r16, r18
    2d20:	13 1f       	adc	r17, r19
    2d22:	0f 50       	subi	r16, 0x0F	; 15
    2d24:	1a 4f       	sbci	r17, 0xFA	; 250
    2d26:	d8 01       	movw	r26, r16
    2d28:	ed 91       	ld	r30, X+
    2d2a:	fc 91       	ld	r31, X
    2d2c:	11 97       	sbiw	r26, 0x01	; 1
    2d2e:	ee 0d       	add	r30, r14
    2d30:	ff 1d       	adc	r31, r15
    2d32:	80 e1       	ldi	r24, 0x10	; 16
    2d34:	86 83       	std	Z+6, r24	; 0x06
            }
	    if (xfrlen <= nbytes) {
    2d36:	8c 16       	cp	r8, r28
    2d38:	9d 06       	cpc	r9, r29
    2d3a:	10 f4       	brcc	.+4      	; 0x2d40 <_ZN7UsbHost13newInTransferEhhjPcj+0x108>
	      return xfrlen;
	    } else {
	      // Buffer overflow avoided so treat it as an error rather
	      // than return partial data.
	      return -1;
    2d3c:	cf ef       	ldi	r28, 0xFF	; 255
    2d3e:	df ef       	ldi	r29, 0xFF	; 255
	    }
        }
  }//while( 1 )
}
    2d40:	ce 01       	movw	r24, r28
    2d42:	df 91       	pop	r29
    2d44:	cf 91       	pop	r28
    2d46:	1f 91       	pop	r17
    2d48:	0f 91       	pop	r16
    2d4a:	ff 90       	pop	r15
    2d4c:	ef 90       	pop	r14
    2d4e:	df 90       	pop	r13
    2d50:	cf 90       	pop	r12
    2d52:	bf 90       	pop	r11
    2d54:	af 90       	pop	r10
    2d56:	9f 90       	pop	r9
    2d58:	8f 90       	pop	r8
    2d5a:	7f 90       	pop	r7
    2d5c:	6f 90       	pop	r6
    2d5e:	5f 90       	pop	r5
    2d60:	4f 90       	pop	r4
    2d62:	3f 90       	pop	r3
    2d64:	08 95       	ret

00002d66 <_ZN7UsbHost10inTransferEhhjPcj>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */
/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
byte UsbHost::inTransfer( byte addr, byte ep, unsigned int nbytes, char* data, unsigned int nak_limit )
{
    2d66:	2f 92       	push	r2
    2d68:	3f 92       	push	r3
    2d6a:	4f 92       	push	r4
    2d6c:	5f 92       	push	r5
    2d6e:	6f 92       	push	r6
    2d70:	7f 92       	push	r7
    2d72:	8f 92       	push	r8
    2d74:	9f 92       	push	r9
    2d76:	af 92       	push	r10
    2d78:	bf 92       	push	r11
    2d7a:	cf 92       	push	r12
    2d7c:	df 92       	push	r13
    2d7e:	ef 92       	push	r14
    2d80:	ff 92       	push	r15
    2d82:	0f 93       	push	r16
    2d84:	1f 93       	push	r17
    2d86:	cf 93       	push	r28
    2d88:	df 93       	push	r29
    2d8a:	d8 2e       	mov	r13, r24
    2d8c:	c9 2e       	mov	r12, r25
    2d8e:	54 2e       	mov	r5, r20
    2d90:	19 01       	movw	r2, r18
    2d92:	48 01       	movw	r8, r16
    2d94:	37 01       	movw	r6, r14
 byte rcode;
 byte pktsize;
 byte maxpktsize = devtable[ addr ].epinfo[ ep ].MaxPktSize; 
    2d96:	c6 2f       	mov	r28, r22
    2d98:	d0 e0       	ldi	r29, 0x00	; 0
    2d9a:	87 e0       	ldi	r24, 0x07	; 7
    2d9c:	48 9f       	mul	r20, r24
    2d9e:	70 01       	movw	r14, r0
    2da0:	11 24       	eor	r1, r1
    2da2:	fe 01       	movw	r30, r28
    2da4:	ee 0f       	add	r30, r30
    2da6:	ff 1f       	adc	r31, r31
    2da8:	ec 0f       	add	r30, r28
    2daa:	fd 1f       	adc	r31, r29
    2dac:	ef 50       	subi	r30, 0x0F	; 15
    2dae:	fa 4f       	sbci	r31, 0xFA	; 250
    2db0:	01 90       	ld	r0, Z+
    2db2:	f0 81       	ld	r31, Z
    2db4:	e0 2d       	mov	r30, r0
    2db6:	ee 0d       	add	r30, r14
    2db8:	ff 1d       	adc	r31, r15
    2dba:	42 80       	ldd	r4, Z+2	; 0x02
 unsigned int xfrlen = 0;
    regWr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
    2dbc:	88 ee       	ldi	r24, 0xE8	; 232
    2dbe:	66 81       	ldd	r22, Z+6	; 0x06
    2dc0:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
byte UsbHost::inTransfer( byte addr, byte ep, unsigned int nbytes, char* data, unsigned int nak_limit )
{
 byte rcode;
 byte pktsize;
 byte maxpktsize = devtable[ addr ].epinfo[ ep ].MaxPktSize; 
 unsigned int xfrlen = 0;
    2dc4:	00 e0       	ldi	r16, 0x00	; 0
    2dc6:	10 e0       	ldi	r17, 0x00	; 0
    regWr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
    while( 1 ) { // use a 'return' to exit this loop
        rcode = dispatchPkt( tokIN, ep, nak_limit );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
    2dc8:	8d 2d       	mov	r24, r13
    2dca:	9c 2d       	mov	r25, r12
    2dcc:	60 e0       	ldi	r22, 0x00	; 0
    2dce:	45 2d       	mov	r20, r5
    2dd0:	93 01       	movw	r18, r6
    2dd2:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <_ZN7UsbHost11dispatchPktEhhj>
    2dd6:	a8 2e       	mov	r10, r24
        if( rcode ) {
    2dd8:	88 23       	and	r24, r24
    2dda:	09 f0       	breq	.+2      	; 0x2dde <_ZN7UsbHost10inTransferEhhjPcj+0x78>
    2ddc:	41 c0       	rjmp	.+130    	; 0x2e60 <_ZN7UsbHost10inTransferEhhjPcj+0xfa>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
        }
        /* check for RCVDAVIRQ and generate error if not present */ 
        /* the only case when absense of RCVDAVIRQ makes sense is when toggle error occured. Need to add handling for that */
        if(( regRd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
    2dde:	8d 2d       	mov	r24, r13
    2de0:	9c 2d       	mov	r25, r12
    2de2:	68 ec       	ldi	r22, 0xC8	; 200
    2de4:	0e 94 41 13 	call	0x2682	; 0x2682 <_ZN8MAX3421E5regRdEh>
    2de8:	82 ff       	sbrs	r24, 2
    2dea:	38 c0       	rjmp	.+112    	; 0x2e5c <_ZN7UsbHost10inTransferEhhjPcj+0xf6>
            return ( 0xf0 );                            //receive error
        }
        pktsize = regRd( rRCVBC );                      //number of received bytes
    2dec:	8d 2d       	mov	r24, r13
    2dee:	9c 2d       	mov	r25, r12
    2df0:	60 e3       	ldi	r22, 0x30	; 48
    2df2:	0e 94 41 13 	call	0x2682	; 0x2682 <_ZN8MAX3421E5regRdEh>
    2df6:	b8 2e       	mov	r11, r24
        data = bytesRd( rRCVFIFO, pktsize, data );
    2df8:	8d 2d       	mov	r24, r13
    2dfa:	9c 2d       	mov	r25, r12
    2dfc:	68 e0       	ldi	r22, 0x08	; 8
    2dfe:	4b 2d       	mov	r20, r11
    2e00:	94 01       	movw	r18, r8
    2e02:	0e 94 56 13 	call	0x26ac	; 0x26ac <_ZN8MAX3421E7bytesRdEhhPc>
    2e06:	4c 01       	movw	r8, r24
        regWr( rHIRQ, bmRCVDAVIRQ );                    // Clear the IRQ & free the buffer
    2e08:	88 ec       	ldi	r24, 0xC8	; 200
    2e0a:	64 e0       	ldi	r22, 0x04	; 4
    2e0c:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {      // have we transferred 'nbytes' bytes?
    2e10:	b4 14       	cp	r11, r4
    2e12:	28 f0       	brcs	.+10     	; 0x2e1e <_ZN7UsbHost10inTransferEhhjPcj+0xb8>
            return ( 0xf0 );                            //receive error
        }
        pktsize = regRd( rRCVBC );                      //number of received bytes
        data = bytesRd( rRCVFIFO, pktsize, data );
        regWr( rHIRQ, bmRCVDAVIRQ );                    // Clear the IRQ & free the buffer
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
    2e14:	0b 0d       	add	r16, r11
    2e16:	11 1d       	adc	r17, r1
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {      // have we transferred 'nbytes' bytes?
    2e18:	02 15       	cp	r16, r2
    2e1a:	13 05       	cpc	r17, r3
    2e1c:	a8 f2       	brcs	.-86     	; 0x2dc8 <_ZN7UsbHost10inTransferEhhjPcj+0x62>
            if( regRd( rHRSL ) & bmRCVTOGRD ) {                     //save toggle value
    2e1e:	8d 2d       	mov	r24, r13
    2e20:	9c 2d       	mov	r25, r12
    2e22:	68 ef       	ldi	r22, 0xF8	; 248
    2e24:	0e 94 41 13 	call	0x2682	; 0x2682 <_ZN8MAX3421E5regRdEh>
    2e28:	9e 01       	movw	r18, r28
    2e2a:	22 0f       	add	r18, r18
    2e2c:	33 1f       	adc	r19, r19
    2e2e:	84 ff       	sbrs	r24, 4
    2e30:	0a c0       	rjmp	.+20     	; 0x2e46 <_ZN7UsbHost10inTransferEhhjPcj+0xe0>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
    2e32:	c2 0f       	add	r28, r18
    2e34:	d3 1f       	adc	r29, r19
    2e36:	cf 50       	subi	r28, 0x0F	; 15
    2e38:	da 4f       	sbci	r29, 0xFA	; 250
    2e3a:	e8 81       	ld	r30, Y
    2e3c:	f9 81       	ldd	r31, Y+1	; 0x01
    2e3e:	ee 0d       	add	r30, r14
    2e40:	ff 1d       	adc	r31, r15
    2e42:	80 e2       	ldi	r24, 0x20	; 32
    2e44:	09 c0       	rjmp	.+18     	; 0x2e58 <_ZN7UsbHost10inTransferEhhjPcj+0xf2>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
    2e46:	c2 0f       	add	r28, r18
    2e48:	d3 1f       	adc	r29, r19
    2e4a:	cf 50       	subi	r28, 0x0F	; 15
    2e4c:	da 4f       	sbci	r29, 0xFA	; 250
    2e4e:	e8 81       	ld	r30, Y
    2e50:	f9 81       	ldd	r31, Y+1	; 0x01
    2e52:	ee 0d       	add	r30, r14
    2e54:	ff 1d       	adc	r31, r15
    2e56:	80 e1       	ldi	r24, 0x10	; 16
    2e58:	86 83       	std	Z+6, r24	; 0x06
    2e5a:	02 c0       	rjmp	.+4      	; 0x2e60 <_ZN7UsbHost10inTransferEhhjPcj+0xfa>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
        }
        /* check for RCVDAVIRQ and generate error if not present */ 
        /* the only case when absense of RCVDAVIRQ makes sense is when toggle error occured. Need to add handling for that */
        if(( regRd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
            return ( 0xf0 );                            //receive error
    2e5c:	b0 ef       	ldi	r27, 0xF0	; 240
    2e5e:	ab 2e       	mov	r10, r27
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
            }
            return( 0 );
        }
  }//while( 1 )
}
    2e60:	8a 2d       	mov	r24, r10
    2e62:	df 91       	pop	r29
    2e64:	cf 91       	pop	r28
    2e66:	1f 91       	pop	r17
    2e68:	0f 91       	pop	r16
    2e6a:	ff 90       	pop	r15
    2e6c:	ef 90       	pop	r14
    2e6e:	df 90       	pop	r13
    2e70:	cf 90       	pop	r12
    2e72:	bf 90       	pop	r11
    2e74:	af 90       	pop	r10
    2e76:	9f 90       	pop	r9
    2e78:	8f 90       	pop	r8
    2e7a:	7f 90       	pop	r7
    2e7c:	6f 90       	pop	r6
    2e7e:	5f 90       	pop	r5
    2e80:	4f 90       	pop	r4
    2e82:	3f 90       	pop	r3
    2e84:	2f 90       	pop	r2
    2e86:	08 95       	ret

00002e88 <_ZN7UsbHost8ctrlDataEhhjPchj>:
    }
    return( rcode );
}
/* Control transfer with data stage. Stages 2 and 3 of control transfer. Assumes preipheral address is set and setup packet has been sent */
byte UsbHost::ctrlData( byte addr, byte ep, unsigned int nbytes, char* dataptr, boolean direction, unsigned int nak_limit )
{
    2e88:	cf 92       	push	r12
    2e8a:	df 92       	push	r13
    2e8c:	ef 92       	push	r14
    2e8e:	ff 92       	push	r15
    2e90:	0f 93       	push	r16
    2e92:	1f 93       	push	r17
    2e94:	cf 93       	push	r28
    2e96:	df 93       	push	r29
    2e98:	5e 2d       	mov	r21, r14
    2e9a:	76 01       	movw	r14, r12
    2e9c:	c6 2f       	mov	r28, r22
    2e9e:	d0 e0       	ldi	r29, 0x00	; 0
    2ea0:	a4 2f       	mov	r26, r20
    2ea2:	b0 e0       	ldi	r27, 0x00	; 0
 byte rcode;
  if( direction ) {                      //IN transfer
    2ea4:	55 23       	and	r21, r21
    2ea6:	c9 f0       	breq	.+50     	; 0x2eda <_ZN7UsbHost8ctrlDataEhhjPchj+0x52>
    devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
    2ea8:	fe 01       	movw	r30, r28
    2eaa:	ee 0f       	add	r30, r30
    2eac:	ff 1f       	adc	r31, r31
    2eae:	ec 0f       	add	r30, r28
    2eb0:	fd 1f       	adc	r31, r29
    2eb2:	ef 50       	subi	r30, 0x0F	; 15
    2eb4:	fa 4f       	sbci	r31, 0xFA	; 250
    2eb6:	ed 01       	movw	r28, r26
    2eb8:	53 e0       	ldi	r21, 0x03	; 3
    2eba:	cc 0f       	add	r28, r28
    2ebc:	dd 1f       	adc	r29, r29
    2ebe:	5a 95       	dec	r21
    2ec0:	e1 f7       	brne	.-8      	; 0x2eba <_ZN7UsbHost8ctrlDataEhhjPchj+0x32>
    2ec2:	ca 1b       	sub	r28, r26
    2ec4:	db 0b       	sbc	r29, r27
    2ec6:	01 90       	ld	r0, Z+
    2ec8:	f0 81       	ld	r31, Z
    2eca:	e0 2d       	mov	r30, r0
    2ecc:	ec 0f       	add	r30, r28
    2ece:	fd 1f       	adc	r31, r29
    2ed0:	50 e2       	ldi	r21, 0x20	; 32
    2ed2:	56 83       	std	Z+6, r21	; 0x06
    rcode = inTransfer( addr, ep, nbytes, dataptr, nak_limit );
    2ed4:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <_ZN7UsbHost10inTransferEhhjPcj>
    return( rcode );
    2ed8:	18 c0       	rjmp	.+48     	; 0x2f0a <_ZN7UsbHost8ctrlDataEhhjPchj+0x82>
  }
  else {              //OUT transfer
    devtable[ addr ].epinfo[ ep ].sndToggle = bmSNDTOG1;
    2eda:	fe 01       	movw	r30, r28
    2edc:	ee 0f       	add	r30, r30
    2ede:	ff 1f       	adc	r31, r31
    2ee0:	ec 0f       	add	r30, r28
    2ee2:	fd 1f       	adc	r31, r29
    2ee4:	ef 50       	subi	r30, 0x0F	; 15
    2ee6:	fa 4f       	sbci	r31, 0xFA	; 250
    2ee8:	ed 01       	movw	r28, r26
    2eea:	53 e0       	ldi	r21, 0x03	; 3
    2eec:	cc 0f       	add	r28, r28
    2eee:	dd 1f       	adc	r29, r29
    2ef0:	5a 95       	dec	r21
    2ef2:	e1 f7       	brne	.-8      	; 0x2eec <_ZN7UsbHost8ctrlDataEhhjPchj+0x64>
    2ef4:	ca 1b       	sub	r28, r26
    2ef6:	db 0b       	sbc	r29, r27
    2ef8:	01 90       	ld	r0, Z+
    2efa:	f0 81       	ld	r31, Z
    2efc:	e0 2d       	mov	r30, r0
    2efe:	ec 0f       	add	r30, r28
    2f00:	fd 1f       	adc	r31, r29
    2f02:	50 e8       	ldi	r21, 0x80	; 128
    2f04:	55 83       	std	Z+5, r21	; 0x05
    rcode = outTransfer( addr, ep, nbytes, dataptr, nak_limit );
    2f06:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN7UsbHost11outTransferEhhjPcj>
    return( rcode );
  }    
}
    2f0a:	df 91       	pop	r29
    2f0c:	cf 91       	pop	r28
    2f0e:	1f 91       	pop	r17
    2f10:	0f 91       	pop	r16
    2f12:	ff 90       	pop	r15
    2f14:	ef 90       	pop	r14
    2f16:	df 90       	pop	r13
    2f18:	cf 90       	pop	r12
    2f1a:	08 95       	ret

00002f1c <_ZN7UsbHost10ctrlStatusEhhj>:
    return( rcode );
}
/* Control transfer with status stage and no data stage */
/* Assumed peripheral address is already set */
byte UsbHost::ctrlStatus( byte ep, boolean direction, unsigned int nak_limit )
{
    2f1c:	56 2f       	mov	r21, r22
  byte rcode;
    if( direction ) { //GET
    2f1e:	44 23       	and	r20, r20
    2f20:	29 f0       	breq	.+10     	; 0x2f2c <_ZN7UsbHost10ctrlStatusEhhj+0x10>
        rcode = dispatchPkt( tokOUTHS, ep, nak_limit );
    2f22:	60 ea       	ldi	r22, 0xA0	; 160
    2f24:	45 2f       	mov	r20, r21
    2f26:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <_ZN7UsbHost11dispatchPktEhhj>
    2f2a:	08 95       	ret
    }
    else {
        rcode = dispatchPkt( tokINHS, ep, nak_limit );
    2f2c:	60 e8       	ldi	r22, 0x80	; 128
    2f2e:	45 2f       	mov	r20, r21
    2f30:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <_ZN7UsbHost11dispatchPktEhhj>
    }
    return( rcode );
}
    2f34:	08 95       	ret

00002f36 <_ZN7UsbHost7ctrlReqEhhhhhhjjPcj>:
/* depending on request. Actual requests are defined as inlines                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
byte UsbHost::ctrlReq( byte addr, byte ep, byte bmReqType, byte bRequest, byte wValLo, byte wValHi, unsigned int wInd, unsigned int nbytes, char* dataptr, unsigned int nak_limit )
{
    2f36:	3f 92       	push	r3
    2f38:	4f 92       	push	r4
    2f3a:	5f 92       	push	r5
    2f3c:	6f 92       	push	r6
    2f3e:	7f 92       	push	r7
    2f40:	8f 92       	push	r8
    2f42:	9f 92       	push	r9
    2f44:	af 92       	push	r10
    2f46:	bf 92       	push	r11
    2f48:	cf 92       	push	r12
    2f4a:	df 92       	push	r13
    2f4c:	ef 92       	push	r14
    2f4e:	ff 92       	push	r15
    2f50:	0f 93       	push	r16
    2f52:	1f 93       	push	r17
    2f54:	df 93       	push	r29
    2f56:	cf 93       	push	r28
    2f58:	cd b7       	in	r28, 0x3d	; 61
    2f5a:	de b7       	in	r29, 0x3e	; 62
    2f5c:	28 97       	sbiw	r28, 0x08	; 8
    2f5e:	0f b6       	in	r0, 0x3f	; 63
    2f60:	f8 94       	cli
    2f62:	de bf       	out	0x3e, r29	; 62
    2f64:	0f be       	out	0x3f, r0	; 63
    2f66:	cd bf       	out	0x3d, r28	; 61
    2f68:	3c 01       	movw	r6, r24
    2f6a:	16 2f       	mov	r17, r22
    2f6c:	34 2e       	mov	r3, r20
    2f6e:	f2 2e       	mov	r15, r18
    2f70:	4d 8c       	ldd	r4, Y+29	; 0x1d
    2f72:	5e 8c       	ldd	r5, Y+30	; 0x1e
 boolean direction = false;     //request direction, IN or OUT
 byte rcode;   
 SETUP_PKT setup_pkt;

  regWr( rPERADDR, addr );                    //set peripheral address
    2f74:	80 ee       	ldi	r24, 0xE0	; 224
    2f76:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
  if( bmReqType & 0x80 ) {
    direction = true;                       //determine request direction
  }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
    2f7a:	f9 82       	std	Y+1, r15	; 0x01
    setup_pkt.bRequest = bRequest;
    2f7c:	0a 83       	std	Y+2, r16	; 0x02
    setup_pkt.wVal_u.wValueLo = wValLo;
    2f7e:	eb 82       	std	Y+3, r14	; 0x03
    setup_pkt.wVal_u.wValueHi = wValHi;
    2f80:	cc 82       	std	Y+4, r12	; 0x04
    setup_pkt.wIndex = wInd;
    2f82:	be 82       	std	Y+6, r11	; 0x06
    2f84:	ad 82       	std	Y+5, r10	; 0x05
    setup_pkt.wLength = nbytes;
    2f86:	98 86       	std	Y+8, r9	; 0x08
    2f88:	8f 82       	std	Y+7, r8	; 0x07
    bytesWr( rSUDFIFO, 8, ( char *)&setup_pkt );    //transfer to setup packet FIFO
    2f8a:	c3 01       	movw	r24, r6
    2f8c:	60 e2       	ldi	r22, 0x20	; 32
    2f8e:	48 e0       	ldi	r20, 0x08	; 8
    2f90:	9e 01       	movw	r18, r28
    2f92:	2f 5f       	subi	r18, 0xFF	; 255
    2f94:	3f 4f       	sbci	r19, 0xFF	; 255
    2f96:	0e 94 10 13 	call	0x2620	; 0x2620 <_ZN8MAX3421E7bytesWrEhhPc>
    rcode = dispatchPkt( tokSETUP, ep, nak_limit );            //dispatch packet
    2f9a:	c3 01       	movw	r24, r6
    2f9c:	60 e1       	ldi	r22, 0x10	; 16
    2f9e:	43 2d       	mov	r20, r3
    2fa0:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2fa2:	38 a1       	ldd	r19, Y+32	; 0x20
    2fa4:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <_ZN7UsbHost11dispatchPktEhhj>
    2fa8:	08 2f       	mov	r16, r24
    //Serial.println("Setup packet");   //DEBUG
    if( rcode ) {                                   //return HRSLT if not zero
    2faa:	88 23       	and	r24, r24
    2fac:	29 f0       	breq	.+10     	; 0x2fb8 <_ZN7UsbHost7ctrlReqEhhhhhhjjPcj+0x82>
        Serial.print("Setup packet error: ");
    2fae:	87 e6       	ldi	r24, 0x67	; 103
    2fb0:	95 e0       	ldi	r25, 0x05	; 5
    2fb2:	62 e2       	ldi	r22, 0x22	; 34
    2fb4:	72 e0       	ldi	r23, 0x02	; 2
    2fb6:	18 c0       	rjmp	.+48     	; 0x2fe8 <_ZN7UsbHost7ctrlReqEhhhhhhjjPcj+0xb2>
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
byte UsbHost::ctrlReq( byte addr, byte ep, byte bmReqType, byte bRequest, byte wValLo, byte wValHi, unsigned int wInd, unsigned int nbytes, char* dataptr, unsigned int nak_limit )
{
 boolean direction = false;     //request direction, IN or OUT
    2fb8:	ff 1c       	adc	r15, r15
    2fba:	ff 24       	eor	r15, r15
    2fbc:	ff 1c       	adc	r15, r15
        Serial.print("Setup packet error: ");
        Serial.print( rcode, HEX );                                          
        return( rcode );
    }
    //Serial.println( direction, HEX ); 
    if( dataptr != NULL ) {                         //data stage, if present
    2fbe:	41 14       	cp	r4, r1
    2fc0:	51 04       	cpc	r5, r1
    2fc2:	e1 f0       	breq	.+56     	; 0x2ffc <_ZN7UsbHost7ctrlReqEhhhhhhjjPcj+0xc6>
        rcode = ctrlData( addr, ep, nbytes, dataptr, direction );
    2fc4:	c3 01       	movw	r24, r6
    2fc6:	61 2f       	mov	r22, r17
    2fc8:	43 2d       	mov	r20, r3
    2fca:	94 01       	movw	r18, r8
    2fcc:	82 01       	movw	r16, r4
    2fce:	ef 2c       	mov	r14, r15
    2fd0:	c1 2c       	mov	r12, r1
    2fd2:	ed e7       	ldi	r30, 0x7D	; 125
    2fd4:	de 2e       	mov	r13, r30
    2fd6:	0e 94 44 17 	call	0x2e88	; 0x2e88 <_ZN7UsbHost8ctrlDataEhhjPchj>
    2fda:	08 2f       	mov	r16, r24
    }
    if( rcode ) {   //return error
    2fdc:	88 23       	and	r24, r24
    2fde:	71 f0       	breq	.+28     	; 0x2ffc <_ZN7UsbHost7ctrlReqEhhhhhhjjPcj+0xc6>
        Serial.print("Data packet error: ");
    2fe0:	87 e6       	ldi	r24, 0x67	; 103
    2fe2:	95 e0       	ldi	r25, 0x05	; 5
    2fe4:	67 e3       	ldi	r22, 0x37	; 55
    2fe6:	72 e0       	ldi	r23, 0x02	; 2
    2fe8:	0e 94 15 0c 	call	0x182a	; 0x182a <_ZN5Print5printEPKc>
        Serial.print( rcode, HEX );                                          
    2fec:	87 e6       	ldi	r24, 0x67	; 103
    2fee:	95 e0       	ldi	r25, 0x05	; 5
    2ff0:	60 2f       	mov	r22, r16
    2ff2:	40 e1       	ldi	r20, 0x10	; 16
    2ff4:	50 e0       	ldi	r21, 0x00	; 0
    2ff6:	0e 94 c4 0c 	call	0x1988	; 0x1988 <_ZN5Print5printEhi>
        return( rcode );
    2ffa:	08 c0       	rjmp	.+16     	; 0x300c <_ZN7UsbHost7ctrlReqEhhhhhhjjPcj+0xd6>
    }
    rcode = ctrlStatus( ep, direction );                //status stage
    2ffc:	c3 01       	movw	r24, r6
    2ffe:	63 2d       	mov	r22, r3
    3000:	4f 2d       	mov	r20, r15
    3002:	20 e0       	ldi	r18, 0x00	; 0
    3004:	3d e7       	ldi	r19, 0x7D	; 125
    3006:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <_ZN7UsbHost10ctrlStatusEhhj>
    300a:	08 2f       	mov	r16, r24
    return( rcode );
}
    300c:	80 2f       	mov	r24, r16
    300e:	28 96       	adiw	r28, 0x08	; 8
    3010:	0f b6       	in	r0, 0x3f	; 63
    3012:	f8 94       	cli
    3014:	de bf       	out	0x3e, r29	; 62
    3016:	0f be       	out	0x3f, r0	; 63
    3018:	cd bf       	out	0x3d, r28	; 61
    301a:	cf 91       	pop	r28
    301c:	df 91       	pop	r29
    301e:	1f 91       	pop	r17
    3020:	0f 91       	pop	r16
    3022:	ff 90       	pop	r15
    3024:	ef 90       	pop	r14
    3026:	df 90       	pop	r13
    3028:	cf 90       	pop	r12
    302a:	bf 90       	pop	r11
    302c:	af 90       	pop	r10
    302e:	9f 90       	pop	r9
    3030:	8f 90       	pop	r8
    3032:	7f 90       	pop	r7
    3034:	6f 90       	pop	r6
    3036:	5f 90       	pop	r5
    3038:	4f 90       	pop	r4
    303a:	3f 90       	pop	r3
    303c:	08 95       	ret

0000303e <_ZN7UsbHost7setAddrEhhhj>:
//get string descriptor
inline byte UsbHost::getStrDescr( byte addr, byte ep, unsigned int nbytes, byte index, unsigned int langid, char* dataptr, unsigned int nak_limit ) {
    return( ctrlReq( addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, nbytes, dataptr, nak_limit ));
}
//set address 
inline byte UsbHost::setAddr( byte oldaddr, byte ep, byte newaddr, unsigned int nak_limit ) {
    303e:	8f 92       	push	r8
    3040:	9f 92       	push	r9
    3042:	af 92       	push	r10
    3044:	bf 92       	push	r11
    3046:	cf 92       	push	r12
    3048:	ef 92       	push	r14
    304a:	0f 93       	push	r16
    304c:	1f 93       	push	r17
    304e:	e2 2e       	mov	r14, r18
    return( ctrlReq( oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, NULL, nak_limit ));
    3050:	00 d0       	rcall	.+0      	; 0x3052 <_ZN7UsbHost7setAddrEhhhj+0x14>
    3052:	0f 92       	push	r0
    3054:	ed b7       	in	r30, 0x3d	; 61
    3056:	fe b7       	in	r31, 0x3e	; 62
    3058:	12 82       	std	Z+2, r1	; 0x02
    305a:	11 82       	std	Z+1, r1	; 0x01
    305c:	14 83       	std	Z+4, r17	; 0x04
    305e:	03 83       	std	Z+3, r16	; 0x03
    3060:	20 e0       	ldi	r18, 0x00	; 0
    3062:	05 e0       	ldi	r16, 0x05	; 5
    3064:	cc 24       	eor	r12, r12
    3066:	aa 24       	eor	r10, r10
    3068:	bb 24       	eor	r11, r11
    306a:	88 24       	eor	r8, r8
    306c:	99 24       	eor	r9, r9
    306e:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <_ZN7UsbHost7ctrlReqEhhhhhhjjPcj>
    3072:	0f 90       	pop	r0
    3074:	0f 90       	pop	r0
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
}
    307a:	1f 91       	pop	r17
    307c:	0f 91       	pop	r16
    307e:	ef 90       	pop	r14
    3080:	cf 90       	pop	r12
    3082:	bf 90       	pop	r11
    3084:	af 90       	pop	r10
    3086:	9f 90       	pop	r9
    3088:	8f 90       	pop	r8
    308a:	08 95       	ret

0000308c <_ZN7UsbHost4TaskEv>:
  }//while( timeout > millis() 
  return( rcode );
}
/* USB main task. Performs enumeration/cleanup */
void UsbHost::Task( void )      //USB state machine
{
    308c:	ef 92       	push	r14
    308e:	ff 92       	push	r15
    3090:	0f 93       	push	r16
    3092:	1f 93       	push	r17
    3094:	df 93       	push	r29
    3096:	cf 93       	push	r28
    3098:	cd b7       	in	r28, 0x3d	; 61
    309a:	de b7       	in	r29, 0x3e	; 62
    309c:	63 97       	sbiw	r28, 0x13	; 19
    309e:	0f b6       	in	r0, 0x3f	; 63
    30a0:	f8 94       	cli
    30a2:	de bf       	out	0x3e, r29	; 62
    30a4:	0f be       	out	0x3f, r0	; 63
    30a6:	cd bf       	out	0x3d, r28	; 61
    30a8:	18 2f       	mov	r17, r24
    30aa:	e9 2e       	mov	r14, r25
  static byte tmpaddr; 
  byte tmpdata;
  static unsigned long delay = 0;
  USB_DEVICE_DESCRIPTOR buf;
  /**/
    tmpdata = getVbusState();
    30ac:	0e 94 f5 12 	call	0x25ea	; 0x25ea <_ZN8MAX3421E12getVbusStateEv>
//
//    Serial.print("\n");
    /**/
    /* modify USB task state if Vbus changed */

    switch( tmpdata ) {
    30b0:	81 30       	cpi	r24, 0x01	; 1
    30b2:	29 f0       	breq	.+10     	; 0x30be <_ZN7UsbHost4TaskEv+0x32>
    30b4:	81 30       	cpi	r24, 0x01	; 1
    30b6:	28 f0       	brcs	.+10     	; 0x30c2 <_ZN7UsbHost4TaskEv+0x36>
    30b8:	84 30       	cpi	r24, 0x04	; 4
    30ba:	00 f5       	brcc	.+64     	; 0x30fc <_ZN7UsbHost4TaskEv+0x70>
    30bc:	09 c0       	rjmp	.+18     	; 0x30d0 <_ZN7UsbHost4TaskEv+0x44>
        case SE1:   //illegal state
            usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
    30be:	83 e1       	ldi	r24, 0x13	; 19
    30c0:	1b c0       	rjmp	.+54     	; 0x30f8 <_ZN7UsbHost4TaskEv+0x6c>
            break;
        case SE0:   //disconnected
            if(( usb_task_state & USB_STATE_MASK ) != USB_STATE_DETACHED ) {
    30c2:	80 91 01 06 	lds	r24, 0x0601
    30c6:	80 7f       	andi	r24, 0xF0	; 240
    30c8:	80 31       	cpi	r24, 0x10	; 16
    30ca:	c1 f0       	breq	.+48     	; 0x30fc <_ZN7UsbHost4TaskEv+0x70>
                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
    30cc:	81 e1       	ldi	r24, 0x11	; 17
    30ce:	14 c0       	rjmp	.+40     	; 0x30f8 <_ZN7UsbHost4TaskEv+0x6c>
            }
            break;
        case FSHOST:    //attached
        case LSHOST:
            if(( usb_task_state & USB_STATE_MASK ) == USB_STATE_DETACHED ) {
    30d0:	80 91 01 06 	lds	r24, 0x0601
    30d4:	80 7f       	andi	r24, 0xF0	; 240
    30d6:	80 31       	cpi	r24, 0x10	; 16
    30d8:	89 f4       	brne	.+34     	; 0x30fc <_ZN7UsbHost4TaskEv+0x70>
                delay = millis() + USB_SETTLE_DELAY;
    30da:	0e 94 95 04 	call	0x92a	; 0x92a <millis>
    30de:	68 53       	subi	r22, 0x38	; 56
    30e0:	7f 4f       	sbci	r23, 0xFF	; 255
    30e2:	8f 4f       	sbci	r24, 0xFF	; 255
    30e4:	9f 4f       	sbci	r25, 0xFF	; 255
    30e6:	60 93 03 06 	sts	0x0603, r22
    30ea:	70 93 04 06 	sts	0x0604, r23
    30ee:	80 93 05 06 	sts	0x0605, r24
    30f2:	90 93 06 06 	sts	0x0606, r25
                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
    30f6:	80 e2       	ldi	r24, 0x20	; 32
    30f8:	80 93 01 06 	sts	0x0601, r24
            }
            break;
        }// switch( tmpdata
    //Serial.print("USB task state: ");
    //Serial.println( usb_task_state, HEX );
    switch( usb_task_state ) {
    30fc:	50 91 01 06 	lds	r21, 0x0601
    3100:	50 34       	cpi	r21, 0x40	; 64
    3102:	c9 f1       	breq	.+114    	; 0x3176 <_ZN7UsbHost4TaskEv+0xea>
    3104:	51 34       	cpi	r21, 0x41	; 65
    3106:	40 f4       	brcc	.+16     	; 0x3118 <_ZN7UsbHost4TaskEv+0x8c>
    3108:	50 32       	cpi	r21, 0x20	; 32
    310a:	e9 f0       	breq	.+58     	; 0x3146 <_ZN7UsbHost4TaskEv+0xba>
    310c:	50 33       	cpi	r21, 0x30	; 48
    310e:	69 f1       	breq	.+90     	; 0x316a <_ZN7UsbHost4TaskEv+0xde>
    3110:	51 31       	cpi	r21, 0x11	; 17
    3112:	09 f0       	breq	.+2      	; 0x3116 <_ZN7UsbHost4TaskEv+0x8a>
    3114:	bb c0       	rjmp	.+374    	; 0x328c <_ZN7UsbHost4TaskEv+0x200>
    3116:	11 c0       	rjmp	.+34     	; 0x313a <_ZN7UsbHost4TaskEv+0xae>
    3118:	50 36       	cpi	r21, 0x60	; 96
    311a:	09 f4       	brne	.+2      	; 0x311e <_ZN7UsbHost4TaskEv+0x92>
    311c:	68 c0       	rjmp	.+208    	; 0x31ee <_ZN7UsbHost4TaskEv+0x162>
    311e:	50 37       	cpi	r21, 0x70	; 112
    3120:	21 f0       	breq	.+8      	; 0x312a <_ZN7UsbHost4TaskEv+0x9e>
    3122:	50 35       	cpi	r21, 0x50	; 80
    3124:	09 f0       	breq	.+2      	; 0x3128 <_ZN7UsbHost4TaskEv+0x9c>
    3126:	b2 c0       	rjmp	.+356    	; 0x328c <_ZN7UsbHost4TaskEv+0x200>
    3128:	49 c0       	rjmp	.+146    	; 0x31bc <_ZN7UsbHost4TaskEv+0x130>
                usb_task_state = USB_STATE_ERROR;
            }
            break;
        case USB_STATE_ADDRESSING:
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
                if( devtable[ i ].epinfo == NULL ) {
    312a:	80 91 f4 05 	lds	r24, 0x05F4
    312e:	90 91 f5 05 	lds	r25, 0x05F5
    3132:	00 97       	sbiw	r24, 0x00	; 0
    3134:	09 f0       	breq	.+2      	; 0x3138 <_ZN7UsbHost4TaskEv+0xac>
    3136:	a0 c0       	rjmp	.+320    	; 0x3278 <_ZN7UsbHost4TaskEv+0x1ec>
    3138:	80 c0       	rjmp	.+256    	; 0x323a <_ZN7UsbHost4TaskEv+0x1ae>
        }// switch( tmpdata
    //Serial.print("USB task state: ");
    //Serial.println( usb_task_state, HEX );
    switch( usb_task_state ) {
        case USB_DETACHED_SUBSTATE_INITIALIZE:
            init();
    313a:	81 2f       	mov	r24, r17
    313c:	9e 2d       	mov	r25, r14
    313e:	0e 94 40 14 	call	0x2880	; 0x2880 <_ZN7UsbHost4initEv>
            usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
    3142:	82 e1       	ldi	r24, 0x12	; 18
    3144:	a1 c0       	rjmp	.+322    	; 0x3288 <_ZN7UsbHost4TaskEv+0x1fc>
        case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE:     //just sit here
            break;
        case USB_DETACHED_SUBSTATE_ILLEGAL:             //just sit here
            break;
        case USB_ATTACHED_SUBSTATE_SETTLE:              //setlle time for just attached device                  
            if( delay < millis() ) {
    3146:	e0 90 03 06 	lds	r14, 0x0603
    314a:	f0 90 04 06 	lds	r15, 0x0604
    314e:	00 91 05 06 	lds	r16, 0x0605
    3152:	10 91 06 06 	lds	r17, 0x0606
    3156:	0e 94 95 04 	call	0x92a	; 0x92a <millis>
    315a:	e6 16       	cp	r14, r22
    315c:	f7 06       	cpc	r15, r23
    315e:	08 07       	cpc	r16, r24
    3160:	19 07       	cpc	r17, r25
    3162:	08 f0       	brcs	.+2      	; 0x3166 <_ZN7UsbHost4TaskEv+0xda>
    3164:	93 c0       	rjmp	.+294    	; 0x328c <_ZN7UsbHost4TaskEv+0x200>
                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
    3166:	80 e3       	ldi	r24, 0x30	; 48
    3168:	8f c0       	rjmp	.+286    	; 0x3288 <_ZN7UsbHost4TaskEv+0x1fc>
            }
            break;
        case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
            regWr( rHCTL, bmBUSRST );                   //issue bus reset
    316a:	88 ee       	ldi	r24, 0xE8	; 232
    316c:	61 e0       	ldi	r22, 0x01	; 1
    316e:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
            usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
    3172:	80 e4       	ldi	r24, 0x40	; 64
    3174:	89 c0       	rjmp	.+274    	; 0x3288 <_ZN7UsbHost4TaskEv+0x1fc>
            break;
        case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
            if(( regRd( rHCTL ) & bmBUSRST ) == 0 ) {
    3176:	81 2f       	mov	r24, r17
    3178:	9e 2d       	mov	r25, r14
    317a:	68 ee       	ldi	r22, 0xE8	; 232
    317c:	0e 94 41 13 	call	0x2682	; 0x2682 <_ZN8MAX3421E5regRdEh>
    3180:	80 fd       	sbrc	r24, 0
    3182:	84 c0       	rjmp	.+264    	; 0x328c <_ZN7UsbHost4TaskEv+0x200>
                tmpdata = regRd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
    3184:	81 2f       	mov	r24, r17
    3186:	9e 2d       	mov	r25, r14
    3188:	68 ed       	ldi	r22, 0xD8	; 216
    318a:	0e 94 41 13 	call	0x2682	; 0x2682 <_ZN8MAX3421E5regRdEh>
    318e:	68 2f       	mov	r22, r24
    3190:	68 60       	ori	r22, 0x08	; 8
                regWr( rMODE, tmpdata );
    3192:	88 ed       	ldi	r24, 0xD8	; 216
    3194:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN8MAX3421E5regWrEhh>
//                  regWr( rMODE, bmSOFKAENAB );
                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
    3198:	80 e5       	ldi	r24, 0x50	; 80
    319a:	80 93 01 06 	sts	0x0601, r24
                delay = millis() + 20; //20ms wait after reset per USB spec
    319e:	0e 94 95 04 	call	0x92a	; 0x92a <millis>
    31a2:	6c 5e       	subi	r22, 0xEC	; 236
    31a4:	7f 4f       	sbci	r23, 0xFF	; 255
    31a6:	8f 4f       	sbci	r24, 0xFF	; 255
    31a8:	9f 4f       	sbci	r25, 0xFF	; 255
    31aa:	60 93 03 06 	sts	0x0603, r22
    31ae:	70 93 04 06 	sts	0x0604, r23
    31b2:	80 93 05 06 	sts	0x0605, r24
    31b6:	90 93 06 06 	sts	0x0606, r25
    31ba:	68 c0       	rjmp	.+208    	; 0x328c <_ZN7UsbHost4TaskEv+0x200>
            }
            break;
        case USB_ATTACHED_SUBSTATE_WAIT_SOF:  //todo: change check order
            if( regRd( rHIRQ ) & bmFRAMEIRQ ) {                         //when first SOF received we can continue
    31bc:	81 2f       	mov	r24, r17
    31be:	9e 2d       	mov	r25, r14
    31c0:	68 ec       	ldi	r22, 0xC8	; 200
    31c2:	0e 94 41 13 	call	0x2682	; 0x2682 <_ZN8MAX3421E5regRdEh>
    31c6:	86 ff       	sbrs	r24, 6
    31c8:	61 c0       	rjmp	.+194    	; 0x328c <_ZN7UsbHost4TaskEv+0x200>
              if( delay < millis() ) {                                    //20ms passed
    31ca:	e0 90 03 06 	lds	r14, 0x0603
    31ce:	f0 90 04 06 	lds	r15, 0x0604
    31d2:	00 91 05 06 	lds	r16, 0x0605
    31d6:	10 91 06 06 	lds	r17, 0x0606
    31da:	0e 94 95 04 	call	0x92a	; 0x92a <millis>
    31de:	e6 16       	cp	r14, r22
    31e0:	f7 06       	cpc	r15, r23
    31e2:	08 07       	cpc	r16, r24
    31e4:	19 07       	cpc	r17, r25
    31e6:	08 f0       	brcs	.+2      	; 0x31ea <_ZN7UsbHost4TaskEv+0x15e>
    31e8:	51 c0       	rjmp	.+162    	; 0x328c <_ZN7UsbHost4TaskEv+0x200>
                usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
    31ea:	80 e6       	ldi	r24, 0x60	; 96
    31ec:	4d c0       	rjmp	.+154    	; 0x3288 <_ZN7UsbHost4TaskEv+0x1fc>
              }
            }
            break;
        case USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE:
            // toggle( BPNT_0 );
            devtable[ 0 ].epinfo->MaxPktSize = 8;   //set max.packet size to min.allowed
    31ee:	e0 91 f1 05 	lds	r30, 0x05F1
    31f2:	f0 91 f2 05 	lds	r31, 0x05F2
    31f6:	88 e0       	ldi	r24, 0x08	; 8
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	93 83       	std	Z+3, r25	; 0x03
    31fc:	82 83       	std	Z+2, r24	; 0x02
            rcode = getDevDescr( 0, 0, 8, ( char* )&buf );
    31fe:	81 2f       	mov	r24, r17
    3200:	9e 2d       	mov	r25, r14
    3202:	60 e0       	ldi	r22, 0x00	; 0
    3204:	40 e0       	ldi	r20, 0x00	; 0
    3206:	28 e0       	ldi	r18, 0x08	; 8
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	8e 01       	movw	r16, r28
    320c:	0f 5f       	subi	r16, 0xFF	; 255
    320e:	1f 4f       	sbci	r17, 0xFF	; 255
    3210:	e1 2c       	mov	r14, r1
    3212:	fd e7       	ldi	r31, 0x7D	; 125
    3214:	ff 2e       	mov	r15, r31
    3216:	5b 8b       	std	Y+19, r21	; 0x13
    3218:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <_ZN7UsbHost11getDevDescrEhhjPcj>
            if( rcode == 0 ) {
    321c:	5b 89       	ldd	r21, Y+19	; 0x13
    321e:	88 23       	and	r24, r24
    3220:	49 f4       	brne	.+18     	; 0x3234 <_ZN7UsbHost4TaskEv+0x1a8>
                devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
    3222:	e0 91 f1 05 	lds	r30, 0x05F1
    3226:	f0 91 f2 05 	lds	r31, 0x05F2
    322a:	88 85       	ldd	r24, Y+8	; 0x08
    322c:	82 83       	std	Z+2, r24	; 0x02
    322e:	13 82       	std	Z+3, r1	; 0x03
                usb_task_state = USB_STATE_ADDRESSING;
    3230:	80 e7       	ldi	r24, 0x70	; 112
    3232:	2a c0       	rjmp	.+84     	; 0x3288 <_ZN7UsbHost4TaskEv+0x1fc>
            }
            else {
                usb_error = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
    3234:	50 93 02 06 	sts	0x0602, r21
    3238:	26 c0       	rjmp	.+76     	; 0x3286 <_ZN7UsbHost4TaskEv+0x1fa>
            }
            break;
        case USB_STATE_ADDRESSING:
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
                if( devtable[ i ].epinfo == NULL ) {
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
    323a:	20 91 f1 05 	lds	r18, 0x05F1
    323e:	30 91 f2 05 	lds	r19, 0x05F2
    3242:	30 93 f5 05 	sts	0x05F5, r19
    3246:	20 93 f4 05 	sts	0x05F4, r18
                                                                        //temporary record
                                                                        //until plugged with real device endpoint structure
                    rcode = setAddr( 0, 0, i );
    324a:	81 2f       	mov	r24, r17
    324c:	9e 2d       	mov	r25, r14
    324e:	60 e0       	ldi	r22, 0x00	; 0
    3250:	40 e0       	ldi	r20, 0x00	; 0
    3252:	21 e0       	ldi	r18, 0x01	; 1
    3254:	00 e0       	ldi	r16, 0x00	; 0
    3256:	1d e7       	ldi	r17, 0x7D	; 125
    3258:	5b 8b       	std	Y+19, r21	; 0x13
    325a:	0e 94 1f 18 	call	0x303e	; 0x303e <_ZN7UsbHost7setAddrEhhhj>
                    if( rcode == 0 ) {
    325e:	5b 89       	ldd	r21, Y+19	; 0x13
    3260:	88 23       	and	r24, r24
    3262:	29 f4       	brne	.+10     	; 0x326e <_ZN7UsbHost4TaskEv+0x1e2>
                        tmpaddr = i;
    3264:	81 e0       	ldi	r24, 0x01	; 1
    3266:	80 93 07 06 	sts	0x0607, r24
                        usb_task_state = USB_STATE_CONFIGURING;
    326a:	80 e8       	ldi	r24, 0x80	; 128
    326c:	03 c0       	rjmp	.+6      	; 0x3274 <_ZN7UsbHost4TaskEv+0x1e8>
                    }
                    else {
                        usb_error = USB_STATE_ADDRESSING;          //set address error
    326e:	50 93 02 06 	sts	0x0602, r21
                        usb_task_state = USB_STATE_ERROR;
    3272:	80 ea       	ldi	r24, 0xA0	; 160
    3274:	80 93 01 06 	sts	0x0601, r24
                    }
                    break;  //break if address assigned or error occured during address assignment attempt                      
                }
            }//for( i = 1; i < USB_NUMDEVICES; i++
            if( usb_task_state == USB_STATE_ADDRESSING ) {     //no vacant place in devtable
    3278:	80 91 01 06 	lds	r24, 0x0601
    327c:	80 37       	cpi	r24, 0x70	; 112
    327e:	31 f4       	brne	.+12     	; 0x328c <_ZN7UsbHost4TaskEv+0x200>
                usb_error = 0xfe;
    3280:	8e ef       	ldi	r24, 0xFE	; 254
    3282:	80 93 02 06 	sts	0x0602, r24
                usb_task_state = USB_STATE_ERROR;
    3286:	80 ea       	ldi	r24, 0xA0	; 160
    3288:	80 93 01 06 	sts	0x0601, r24
        case USB_STATE_RUNNING:
            break;
        case USB_STATE_ERROR:
            break;
    }// switch( usb_task_state
}    
    328c:	63 96       	adiw	r28, 0x13	; 19
    328e:	0f b6       	in	r0, 0x3f	; 63
    3290:	f8 94       	cli
    3292:	de bf       	out	0x3e, r29	; 62
    3294:	0f be       	out	0x3f, r0	; 63
    3296:	cd bf       	out	0x3d, r28	; 61
    3298:	cf 91       	pop	r28
    329a:	df 91       	pop	r29
    329c:	1f 91       	pop	r17
    329e:	0f 91       	pop	r16
    32a0:	ff 90       	pop	r15
    32a2:	ef 90       	pop	r14
    32a4:	08 95       	ret

000032a6 <_ZN7StepperC1Eiii>:

/*
 * two-wire constructor.
 * Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2)
    32a6:	cf 93       	push	r28
    32a8:	df 93       	push	r29
    32aa:	ec 01       	movw	r28, r24
    32ac:	84 2f       	mov	r24, r20
{
  this->step_number = 0;      // which step the motor is on
    32ae:	1d 86       	std	Y+13, r1	; 0x0d
    32b0:	1c 86       	std	Y+12, r1	; 0x0c
  this->speed = 0;        // the motor speed, in revolutions per minute
    32b2:	1b 82       	std	Y+3, r1	; 0x03
    32b4:	1a 82       	std	Y+2, r1	; 0x02
  this->direction = 0;      // motor direction
    32b6:	19 82       	std	Y+1, r1	; 0x01
    32b8:	18 82       	st	Y, r1
  this->last_step_time = 0;    // time stamp in ms of the last step taken
    32ba:	1e 8a       	std	Y+22, r1	; 0x16
    32bc:	1f 8a       	std	Y+23, r1	; 0x17
    32be:	18 8e       	std	Y+24, r1	; 0x18
    32c0:	19 8e       	std	Y+25, r1	; 0x19
  this->number_of_steps = number_of_steps;    // total number of steps for this motor
    32c2:	79 87       	std	Y+9, r23	; 0x09
    32c4:	68 87       	std	Y+8, r22	; 0x08
  
  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
    32c6:	4e 87       	std	Y+14, r20	; 0x0e
    32c8:	5f 87       	std	Y+15, r21	; 0x0f
  this->motor_pin_2 = motor_pin_2;
    32ca:	39 8b       	std	Y+17, r19	; 0x11
    32cc:	28 8b       	std	Y+16, r18	; 0x10

  // setup the pins on the microcontroller:
  pinMode(this->motor_pin_1, OUTPUT);
    32ce:	61 e0       	ldi	r22, 0x01	; 1
    32d0:	0e 94 e6 06 	call	0xdcc	; 0xdcc <pinMode>
  pinMode(this->motor_pin_2, OUTPUT);
    32d4:	88 89       	ldd	r24, Y+16	; 0x10
    32d6:	61 e0       	ldi	r22, 0x01	; 1
    32d8:	0e 94 e6 06 	call	0xdcc	; 0xdcc <pinMode>
  
  // When there are only 2 pins, set the other two to 0:
  this->motor_pin_3 = 0;
    32dc:	1b 8a       	std	Y+19, r1	; 0x13
    32de:	1a 8a       	std	Y+18, r1	; 0x12
  this->motor_pin_4 = 0;
    32e0:	1d 8a       	std	Y+21, r1	; 0x15
    32e2:	1c 8a       	std	Y+20, r1	; 0x14
  
  // pin_count is used by the stepMotor() method:
  this->pin_count = 2;
    32e4:	82 e0       	ldi	r24, 0x02	; 2
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	9b 87       	std	Y+11, r25	; 0x0b
    32ea:	8a 87       	std	Y+10, r24	; 0x0a
}
    32ec:	df 91       	pop	r29
    32ee:	cf 91       	pop	r28
    32f0:	08 95       	ret

000032f2 <_ZN7Stepper8setSpeedEl>:
/*
  Sets the speed in revs per minute

*/
void Stepper::setSpeed(long whatSpeed)
{
    32f2:	ef 92       	push	r14
    32f4:	ff 92       	push	r15
    32f6:	0f 93       	push	r16
    32f8:	1f 93       	push	r17
    32fa:	cf 93       	push	r28
    32fc:	df 93       	push	r29
    32fe:	ec 01       	movw	r28, r24
    3300:	7a 01       	movw	r14, r20
    3302:	8b 01       	movw	r16, r22
  this->step_delay = 60L * 1000L / this->number_of_steps / whatSpeed;
    3304:	28 85       	ldd	r18, Y+8	; 0x08
    3306:	39 85       	ldd	r19, Y+9	; 0x09
    3308:	44 27       	eor	r20, r20
    330a:	37 fd       	sbrc	r19, 7
    330c:	40 95       	com	r20
    330e:	54 2f       	mov	r21, r20
    3310:	60 e6       	ldi	r22, 0x60	; 96
    3312:	7a ee       	ldi	r23, 0xEA	; 234
    3314:	80 e0       	ldi	r24, 0x00	; 0
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__divmodsi4>
    331c:	ca 01       	movw	r24, r20
    331e:	b9 01       	movw	r22, r18
    3320:	a8 01       	movw	r20, r16
    3322:	97 01       	movw	r18, r14
    3324:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__divmodsi4>
    3328:	2c 83       	std	Y+4, r18	; 0x04
    332a:	3d 83       	std	Y+5, r19	; 0x05
    332c:	4e 83       	std	Y+6, r20	; 0x06
    332e:	5f 83       	std	Y+7, r21	; 0x07
}
    3330:	df 91       	pop	r29
    3332:	cf 91       	pop	r28
    3334:	1f 91       	pop	r17
    3336:	0f 91       	pop	r16
    3338:	ff 90       	pop	r15
    333a:	ef 90       	pop	r14
    333c:	08 95       	ret

0000333e <setup>:
//void sendMessage(const char*);
void readSerial();
void step(signed long steps);

//The setup function is called once at startup of the sketch
void setup() {
    333e:	0f 93       	push	r16
    3340:	1f 93       	push	r17
    3342:	cf 93       	push	r28
    3344:	df 93       	push	r29
	acc.begin();
    3346:	88 e0       	ldi	r24, 0x08	; 8
    3348:	96 e0       	ldi	r25, 0x06	; 6
    334a:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <_ZN16AndroidAccessory5beginEv>
Serial.begin(9600);
    334e:	87 e6       	ldi	r24, 0x67	; 103
    3350:	95 e0       	ldi	r25, 0x05	; 5
    3352:	40 e8       	ldi	r20, 0x80	; 128
    3354:	55 e2       	ldi	r21, 0x25	; 37
    3356:	60 e0       	ldi	r22, 0x00	; 0
    3358:	70 e0       	ldi	r23, 0x00	; 0
    335a:	0e 94 11 0a 	call	0x1422	; 0x1422 <_ZN14HardwareSerial5beginEm>
for (int i = 1; i<=PINS; i++) {
    335e:	c1 e0       	ldi	r28, 0x01	; 1
    3360:	d0 e0       	ldi	r29, 0x00	; 0
pinMode(i, OUTPUT);
    3362:	8c 2f       	mov	r24, r28
    3364:	61 e0       	ldi	r22, 0x01	; 1
    3366:	0e 94 e6 06 	call	0xdcc	; 0xdcc <pinMode>

//The setup function is called once at startup of the sketch
void setup() {
	acc.begin();
Serial.begin(9600);
for (int i = 1; i<=PINS; i++) {
    336a:	21 96       	adiw	r28, 0x01	; 1
    336c:	c9 30       	cpi	r28, 0x09	; 9
    336e:	d1 05       	cpc	r29, r1
    3370:	c1 f7       	brne	.-16     	; 0x3362 <setup+0x24>
pinMode(i, OUTPUT);
}
pinMode(13, OUTPUT);
    3372:	8d e0       	ldi	r24, 0x0D	; 13
    3374:	61 e0       	ldi	r22, 0x01	; 1
    3376:	0e 94 e6 06 	call	0xdcc	; 0xdcc <pinMode>

#ifdef MOREPINS
	engine1 = new Stepper(STEPS, 1, 2, 3, 4);
	engine2 = new Stepper(STEPS, 5, 6, 7, 8);
#else
	engine1 = new Stepper(STEPS, 1, 2);
    337a:	8a e1       	ldi	r24, 0x1A	; 26
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <_Znwj>
    3382:	8c 01       	movw	r16, r24
    3384:	64 ef       	ldi	r22, 0xF4	; 244
    3386:	71 e0       	ldi	r23, 0x01	; 1
    3388:	41 e0       	ldi	r20, 0x01	; 1
    338a:	50 e0       	ldi	r21, 0x00	; 0
    338c:	22 e0       	ldi	r18, 0x02	; 2
    338e:	30 e0       	ldi	r19, 0x00	; 0
    3390:	0e 94 53 19 	call	0x32a6	; 0x32a6 <_ZN7StepperC1Eiii>
    3394:	00 93 a3 07 	sts	0x07A3, r16
    3398:	10 93 a4 07 	sts	0x07A4, r17
	engine2 = new Stepper(STEPS, 3, 4);
    339c:	8a e1       	ldi	r24, 0x1A	; 26
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <_Znwj>
    33a4:	8c 01       	movw	r16, r24
    33a6:	64 ef       	ldi	r22, 0xF4	; 244
    33a8:	71 e0       	ldi	r23, 0x01	; 1
    33aa:	43 e0       	ldi	r20, 0x03	; 3
    33ac:	50 e0       	ldi	r21, 0x00	; 0
    33ae:	24 e0       	ldi	r18, 0x04	; 4
    33b0:	30 e0       	ldi	r19, 0x00	; 0
    33b2:	0e 94 53 19 	call	0x32a6	; 0x32a6 <_ZN7StepperC1Eiii>
    33b6:	00 93 a5 07 	sts	0x07A5, r16
    33ba:	10 93 a6 07 	sts	0x07A6, r17
#endif
engine1->setSpeed(100);
    33be:	80 91 a3 07 	lds	r24, 0x07A3
    33c2:	90 91 a4 07 	lds	r25, 0x07A4
    33c6:	44 e6       	ldi	r20, 0x64	; 100
    33c8:	50 e0       	ldi	r21, 0x00	; 0
    33ca:	60 e0       	ldi	r22, 0x00	; 0
    33cc:	70 e0       	ldi	r23, 0x00	; 0
    33ce:	0e 94 79 19 	call	0x32f2	; 0x32f2 <_ZN7Stepper8setSpeedEl>
engine2->setSpeed(100);
    33d2:	80 91 a5 07 	lds	r24, 0x07A5
    33d6:	90 91 a6 07 	lds	r25, 0x07A6
    33da:	44 e6       	ldi	r20, 0x64	; 100
    33dc:	50 e0       	ldi	r21, 0x00	; 0
    33de:	60 e0       	ldi	r22, 0x00	; 0
    33e0:	70 e0       	ldi	r23, 0x00	; 0
    33e2:	0e 94 79 19 	call	0x32f2	; 0x32f2 <_ZN7Stepper8setSpeedEl>
}
    33e6:	df 91       	pop	r29
    33e8:	cf 91       	pop	r28
    33ea:	1f 91       	pop	r17
    33ec:	0f 91       	pop	r16
    33ee:	08 95       	ret

000033f0 <_Z10readSerialv>:

void readSerial() {
    33f0:	df 93       	push	r29
    33f2:	cf 93       	push	r28
    33f4:	00 d0       	rcall	.+0      	; 0x33f6 <_Z10readSerialv+0x6>
    33f6:	cd b7       	in	r28, 0x3d	; 61
    33f8:	de b7       	in	r29, 0x3e	; 62
	if (!acc.isConnected() || false) {
    33fa:	88 e0       	ldi	r24, 0x08	; 8
    33fc:	96 e0       	ldi	r25, 0x06	; 6
    33fe:	0e 94 86 11 	call	0x230c	; 0x230c <_ZN16AndroidAccessory11isConnectedEv>
    3402:	88 23       	and	r24, r24
    3404:	09 f0       	breq	.+2      	; 0x3408 <_Z10readSerialv+0x18>
    3406:	42 c0       	rjmp	.+132    	; 0x348c <_Z10readSerialv+0x9c>
		Serial.println(!acc.isConnected() ? "Not connected!" : "No data incoming!");
    3408:	88 e0       	ldi	r24, 0x08	; 8
    340a:	96 e0       	ldi	r25, 0x06	; 6
    340c:	0e 94 86 11 	call	0x230c	; 0x230c <_ZN16AndroidAccessory11isConnectedEv>
    3410:	88 23       	and	r24, r24
    3412:	19 f4       	brne	.+6      	; 0x341a <_Z10readSerialv+0x2a>
    3414:	6b e4       	ldi	r22, 0x4B	; 75
    3416:	72 e0       	ldi	r23, 0x02	; 2
    3418:	02 c0       	rjmp	.+4      	; 0x341e <_Z10readSerialv+0x2e>
    341a:	6a e5       	ldi	r22, 0x5A	; 90
    341c:	72 e0       	ldi	r23, 0x02	; 2
    341e:	87 e6       	ldi	r24, 0x67	; 103
    3420:	95 e0       	ldi	r25, 0x05	; 5
    3422:	0e 94 48 0c 	call	0x1890	; 0x1890 <_ZN5Print7printlnEPKc>
		delay(200);
    3426:	68 ec       	ldi	r22, 0xC8	; 200
    3428:	70 e0       	ldi	r23, 0x00	; 0
    342a:	80 e0       	ldi	r24, 0x00	; 0
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	0e 94 c9 04 	call	0x992	; 0x992 <delay>
		return;
    3432:	4f c0       	rjmp	.+158    	; 0x34d2 <_Z10readSerialv+0xe2>
	}
char inBuffer[3] = {255, 255, 255};
Serial.println("Reading!");
acc.readBytes(inBuffer, 3);
Serial.println("Done reading.");
if ((255 == inBuffer[0]) || (255 == inBuffer[1]) || (255 == inBuffer[2])) {
    3434:	8a 81       	ldd	r24, Y+2	; 0x02
    3436:	8f 3f       	cpi	r24, 0xFF	; 255
    3438:	19 f0       	breq	.+6      	; 0x3440 <_Z10readSerialv+0x50>
    343a:	8b 81       	ldd	r24, Y+3	; 0x03
    343c:	8f 3f       	cpi	r24, 0xFF	; 255
    343e:	39 f4       	brne	.+14     	; 0x344e <_Z10readSerialv+0x5e>
	//delete inBuffer;
	Serial.println("Null msg!");
    3440:	87 e6       	ldi	r24, 0x67	; 103
    3442:	95 e0       	ldi	r25, 0x05	; 5
    3444:	68 e7       	ldi	r22, 0x78	; 120
    3446:	72 e0       	ldi	r23, 0x02	; 2
    3448:	0e 94 48 0c 	call	0x1890	; 0x1890 <_ZN5Print7printlnEPKc>
	return;
    344c:	42 c0       	rjmp	.+132    	; 0x34d2 <_Z10readSerialv+0xe2>
}
Serial.println("Not null!");
    344e:	87 e6       	ldi	r24, 0x67	; 103
    3450:	95 e0       	ldi	r25, 0x05	; 5
    3452:	62 e8       	ldi	r22, 0x82	; 130
    3454:	72 e0       	ldi	r23, 0x02	; 2
    3456:	0e 94 48 0c 	call	0x1890	; 0x1890 <_ZN5Print7printlnEPKc>
on = inBuffer[0];
    345a:	89 81       	ldd	r24, Y+1	; 0x01
    345c:	80 93 01 03 	sts	0x0301, r24
reverse = inBuffer[1];
    3460:	9a 81       	ldd	r25, Y+2	; 0x02
    3462:	90 93 a1 07 	sts	0x07A1, r25
rpm = inBuffer[2];
    3466:	9b 81       	ldd	r25, Y+3	; 0x03
    3468:	90 93 a2 07 	sts	0x07A2, r25
Serial.println(!on ? "ON!" : "OFF! :(");
    346c:	88 23       	and	r24, r24
    346e:	19 f4       	brne	.+6      	; 0x3476 <_Z10readSerialv+0x86>
    3470:	6c e6       	ldi	r22, 0x6C	; 108
    3472:	72 e0       	ldi	r23, 0x02	; 2
    3474:	02 c0       	rjmp	.+4      	; 0x347a <_Z10readSerialv+0x8a>
    3476:	60 e7       	ldi	r22, 0x70	; 112
    3478:	72 e0       	ldi	r23, 0x02	; 2
    347a:	87 e6       	ldi	r24, 0x67	; 103
    347c:	95 e0       	ldi	r25, 0x05	; 5
    347e:	0e 94 48 0c 	call	0x1890	; 0x1890 <_ZN5Print7printlnEPKc>
delete inBuffer;
    3482:	ce 01       	movw	r24, r28
    3484:	01 96       	adiw	r24, 0x01	; 1
    3486:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <_ZdlPv>
    348a:	23 c0       	rjmp	.+70     	; 0x34d2 <_Z10readSerialv+0xe2>
	if (!acc.isConnected() || false) {
		Serial.println(!acc.isConnected() ? "Not connected!" : "No data incoming!");
		delay(200);
		return;
	}
char inBuffer[3] = {255, 255, 255};
    348c:	de 01       	movw	r26, r28
    348e:	11 96       	adiw	r26, 0x01	; 1
    3490:	ea e2       	ldi	r30, 0x2A	; 42
    3492:	f3 e0       	ldi	r31, 0x03	; 3
    3494:	83 e0       	ldi	r24, 0x03	; 3
    3496:	01 90       	ld	r0, Z+
    3498:	0d 92       	st	X+, r0
    349a:	81 50       	subi	r24, 0x01	; 1
    349c:	e1 f7       	brne	.-8      	; 0x3496 <_Z10readSerialv+0xa6>
Serial.println("Reading!");
    349e:	87 e6       	ldi	r24, 0x67	; 103
    34a0:	95 e0       	ldi	r25, 0x05	; 5
    34a2:	6c e8       	ldi	r22, 0x8C	; 140
    34a4:	72 e0       	ldi	r23, 0x02	; 2
    34a6:	0e 94 48 0c 	call	0x1890	; 0x1890 <_ZN5Print7printlnEPKc>
acc.readBytes(inBuffer, 3);
    34aa:	88 e0       	ldi	r24, 0x08	; 8
    34ac:	96 e0       	ldi	r25, 0x06	; 6
    34ae:	be 01       	movw	r22, r28
    34b0:	6f 5f       	subi	r22, 0xFF	; 255
    34b2:	7f 4f       	sbci	r23, 0xFF	; 255
    34b4:	43 e0       	ldi	r20, 0x03	; 3
    34b6:	50 e0       	ldi	r21, 0x00	; 0
    34b8:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <_ZN6Stream9readBytesEPcj>
Serial.println("Done reading.");
    34bc:	87 e6       	ldi	r24, 0x67	; 103
    34be:	95 e0       	ldi	r25, 0x05	; 5
    34c0:	65 e9       	ldi	r22, 0x95	; 149
    34c2:	72 e0       	ldi	r23, 0x02	; 2
    34c4:	0e 94 48 0c 	call	0x1890	; 0x1890 <_ZN5Print7printlnEPKc>
if ((255 == inBuffer[0]) || (255 == inBuffer[1]) || (255 == inBuffer[2])) {
    34c8:	89 81       	ldd	r24, Y+1	; 0x01
    34ca:	8f 3f       	cpi	r24, 0xFF	; 255
    34cc:	09 f0       	breq	.+2      	; 0x34d0 <_Z10readSerialv+0xe0>
    34ce:	b2 cf       	rjmp	.-156    	; 0x3434 <_Z10readSerialv+0x44>
    34d0:	b7 cf       	rjmp	.-146    	; 0x3440 <_Z10readSerialv+0x50>
on = inBuffer[0];
reverse = inBuffer[1];
rpm = inBuffer[2];
Serial.println(!on ? "ON!" : "OFF! :(");
delete inBuffer;
}
    34d2:	0f 90       	pop	r0
    34d4:	0f 90       	pop	r0
    34d6:	0f 90       	pop	r0
    34d8:	cf 91       	pop	r28
    34da:	df 91       	pop	r29
    34dc:	08 95       	ret

000034de <loop>:


// The loop function is called in an endless loop
void loop() {
	readSerial();
    34de:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <_Z10readSerialv>

	//double stepSpeed = readSpeed();
	if (on){
    34e2:	80 91 01 03 	lds	r24, 0x0301
    34e6:	88 23       	and	r24, r24
    34e8:	81 f0       	breq	.+32     	; 0x350a <loop+0x2c>
		analogWrite(13, (reverse ? 255 / rpm : rpm));
    34ea:	80 91 a1 07 	lds	r24, 0x07A1
    34ee:	60 91 a2 07 	lds	r22, 0x07A2
    34f2:	88 23       	and	r24, r24
    34f4:	31 f0       	breq	.+12     	; 0x3502 <loop+0x24>
    34f6:	8f ef       	ldi	r24, 0xFF	; 255
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	70 e0       	ldi	r23, 0x00	; 0
    34fc:	0e 94 a7 1a 	call	0x354e	; 0x354e <__divmodhi4>
    3500:	01 c0       	rjmp	.+2      	; 0x3504 <loop+0x26>
    3502:	70 e0       	ldi	r23, 0x00	; 0
    3504:	8d e0       	ldi	r24, 0x0D	; 13
    3506:	0e 94 92 05 	call	0xb24	; 0xb24 <analogWrite>
    350a:	08 95       	ret

0000350c <_GLOBAL__I_acc>:

}*/

void step(signed long steps) {

}
    350c:	cf 92       	push	r12
    350e:	df 92       	push	r13
    3510:	ef 92       	push	r14
    3512:	ff 92       	push	r15
    3514:	0f 93       	push	r16
    3516:	1f 93       	push	r17
AndroidAccessory acc("Google, Inc.",
             "DemoKit",
             "DemoKit Arduino Board",
             "1.0",
             "http://www.android.com",
             "0000000012345678");
    3518:	88 e0       	ldi	r24, 0x08	; 8
    351a:	96 e0       	ldi	r25, 0x06	; 6
    351c:	63 ea       	ldi	r22, 0xA3	; 163
    351e:	72 e0       	ldi	r23, 0x02	; 2
    3520:	40 eb       	ldi	r20, 0xB0	; 176
    3522:	52 e0       	ldi	r21, 0x02	; 2
    3524:	28 eb       	ldi	r18, 0xB8	; 184
    3526:	32 e0       	ldi	r19, 0x02	; 2
    3528:	0e ec       	ldi	r16, 0xCE	; 206
    352a:	12 e0       	ldi	r17, 0x02	; 2
    352c:	f2 ed       	ldi	r31, 0xD2	; 210
    352e:	ef 2e       	mov	r14, r31
    3530:	f2 e0       	ldi	r31, 0x02	; 2
    3532:	ff 2e       	mov	r15, r31
    3534:	e9 ee       	ldi	r30, 0xE9	; 233
    3536:	ce 2e       	mov	r12, r30
    3538:	e2 e0       	ldi	r30, 0x02	; 2
    353a:	de 2e       	mov	r13, r30
    353c:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <_ZN16AndroidAccessoryC1EPKcS1_S1_S1_S1_S1_>

}*/

void step(signed long steps) {

}
    3540:	1f 91       	pop	r17
    3542:	0f 91       	pop	r16
    3544:	ff 90       	pop	r15
    3546:	ef 90       	pop	r14
    3548:	df 90       	pop	r13
    354a:	cf 90       	pop	r12
    354c:	08 95       	ret

0000354e <__divmodhi4>:
    354e:	97 fb       	bst	r25, 7
    3550:	09 2e       	mov	r0, r25
    3552:	07 26       	eor	r0, r23
    3554:	0a d0       	rcall	.+20     	; 0x356a <__divmodhi4_neg1>
    3556:	77 fd       	sbrc	r23, 7
    3558:	04 d0       	rcall	.+8      	; 0x3562 <__divmodhi4_neg2>
    355a:	49 d0       	rcall	.+146    	; 0x35ee <__udivmodhi4>
    355c:	06 d0       	rcall	.+12     	; 0x356a <__divmodhi4_neg1>
    355e:	00 20       	and	r0, r0
    3560:	1a f4       	brpl	.+6      	; 0x3568 <__divmodhi4_exit>

00003562 <__divmodhi4_neg2>:
    3562:	70 95       	com	r23
    3564:	61 95       	neg	r22
    3566:	7f 4f       	sbci	r23, 0xFF	; 255

00003568 <__divmodhi4_exit>:
    3568:	08 95       	ret

0000356a <__divmodhi4_neg1>:
    356a:	f6 f7       	brtc	.-4      	; 0x3568 <__divmodhi4_exit>
    356c:	90 95       	com	r25
    356e:	81 95       	neg	r24
    3570:	9f 4f       	sbci	r25, 0xFF	; 255
    3572:	08 95       	ret

00003574 <__udivmodsi4>:
    3574:	a1 e2       	ldi	r26, 0x21	; 33
    3576:	1a 2e       	mov	r1, r26
    3578:	aa 1b       	sub	r26, r26
    357a:	bb 1b       	sub	r27, r27
    357c:	fd 01       	movw	r30, r26
    357e:	0d c0       	rjmp	.+26     	; 0x359a <__udivmodsi4_ep>

00003580 <__udivmodsi4_loop>:
    3580:	aa 1f       	adc	r26, r26
    3582:	bb 1f       	adc	r27, r27
    3584:	ee 1f       	adc	r30, r30
    3586:	ff 1f       	adc	r31, r31
    3588:	a2 17       	cp	r26, r18
    358a:	b3 07       	cpc	r27, r19
    358c:	e4 07       	cpc	r30, r20
    358e:	f5 07       	cpc	r31, r21
    3590:	20 f0       	brcs	.+8      	; 0x359a <__udivmodsi4_ep>
    3592:	a2 1b       	sub	r26, r18
    3594:	b3 0b       	sbc	r27, r19
    3596:	e4 0b       	sbc	r30, r20
    3598:	f5 0b       	sbc	r31, r21

0000359a <__udivmodsi4_ep>:
    359a:	66 1f       	adc	r22, r22
    359c:	77 1f       	adc	r23, r23
    359e:	88 1f       	adc	r24, r24
    35a0:	99 1f       	adc	r25, r25
    35a2:	1a 94       	dec	r1
    35a4:	69 f7       	brne	.-38     	; 0x3580 <__udivmodsi4_loop>
    35a6:	60 95       	com	r22
    35a8:	70 95       	com	r23
    35aa:	80 95       	com	r24
    35ac:	90 95       	com	r25
    35ae:	9b 01       	movw	r18, r22
    35b0:	ac 01       	movw	r20, r24
    35b2:	bd 01       	movw	r22, r26
    35b4:	cf 01       	movw	r24, r30
    35b6:	08 95       	ret

000035b8 <__divmodsi4>:
    35b8:	97 fb       	bst	r25, 7
    35ba:	09 2e       	mov	r0, r25
    35bc:	05 26       	eor	r0, r21
    35be:	0e d0       	rcall	.+28     	; 0x35dc <__divmodsi4_neg1>
    35c0:	57 fd       	sbrc	r21, 7
    35c2:	04 d0       	rcall	.+8      	; 0x35cc <__divmodsi4_neg2>
    35c4:	d7 df       	rcall	.-82     	; 0x3574 <__udivmodsi4>
    35c6:	0a d0       	rcall	.+20     	; 0x35dc <__divmodsi4_neg1>
    35c8:	00 1c       	adc	r0, r0
    35ca:	38 f4       	brcc	.+14     	; 0x35da <__divmodsi4_exit>

000035cc <__divmodsi4_neg2>:
    35cc:	50 95       	com	r21
    35ce:	40 95       	com	r20
    35d0:	30 95       	com	r19
    35d2:	21 95       	neg	r18
    35d4:	3f 4f       	sbci	r19, 0xFF	; 255
    35d6:	4f 4f       	sbci	r20, 0xFF	; 255
    35d8:	5f 4f       	sbci	r21, 0xFF	; 255

000035da <__divmodsi4_exit>:
    35da:	08 95       	ret

000035dc <__divmodsi4_neg1>:
    35dc:	f6 f7       	brtc	.-4      	; 0x35da <__divmodsi4_exit>
    35de:	90 95       	com	r25
    35e0:	80 95       	com	r24
    35e2:	70 95       	com	r23
    35e4:	61 95       	neg	r22
    35e6:	7f 4f       	sbci	r23, 0xFF	; 255
    35e8:	8f 4f       	sbci	r24, 0xFF	; 255
    35ea:	9f 4f       	sbci	r25, 0xFF	; 255
    35ec:	08 95       	ret

000035ee <__udivmodhi4>:
    35ee:	aa 1b       	sub	r26, r26
    35f0:	bb 1b       	sub	r27, r27
    35f2:	51 e1       	ldi	r21, 0x11	; 17
    35f4:	07 c0       	rjmp	.+14     	; 0x3604 <__udivmodhi4_ep>

000035f6 <__udivmodhi4_loop>:
    35f6:	aa 1f       	adc	r26, r26
    35f8:	bb 1f       	adc	r27, r27
    35fa:	a6 17       	cp	r26, r22
    35fc:	b7 07       	cpc	r27, r23
    35fe:	10 f0       	brcs	.+4      	; 0x3604 <__udivmodhi4_ep>
    3600:	a6 1b       	sub	r26, r22
    3602:	b7 0b       	sbc	r27, r23

00003604 <__udivmodhi4_ep>:
    3604:	88 1f       	adc	r24, r24
    3606:	99 1f       	adc	r25, r25
    3608:	5a 95       	dec	r21
    360a:	a9 f7       	brne	.-22     	; 0x35f6 <__udivmodhi4_loop>
    360c:	80 95       	com	r24
    360e:	90 95       	com	r25
    3610:	bc 01       	movw	r22, r24
    3612:	cd 01       	movw	r24, r26
    3614:	08 95       	ret

00003616 <__tablejump_elpm__>:
    3616:	07 90       	elpm	r0, Z+
    3618:	f6 91       	elpm	r31, Z+
    361a:	e0 2d       	mov	r30, r0
    361c:	19 94       	eijmp

0000361e <malloc>:
    361e:	cf 93       	push	r28
    3620:	df 93       	push	r29
    3622:	82 30       	cpi	r24, 0x02	; 2
    3624:	91 05       	cpc	r25, r1
    3626:	10 f4       	brcc	.+4      	; 0x362c <malloc+0xe>
    3628:	82 e0       	ldi	r24, 0x02	; 2
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	e0 91 a9 07 	lds	r30, 0x07A9
    3630:	f0 91 aa 07 	lds	r31, 0x07AA
    3634:	40 e0       	ldi	r20, 0x00	; 0
    3636:	50 e0       	ldi	r21, 0x00	; 0
    3638:	20 e0       	ldi	r18, 0x00	; 0
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	26 c0       	rjmp	.+76     	; 0x368a <malloc+0x6c>
    363e:	60 81       	ld	r22, Z
    3640:	71 81       	ldd	r23, Z+1	; 0x01
    3642:	68 17       	cp	r22, r24
    3644:	79 07       	cpc	r23, r25
    3646:	e0 f0       	brcs	.+56     	; 0x3680 <malloc+0x62>
    3648:	68 17       	cp	r22, r24
    364a:	79 07       	cpc	r23, r25
    364c:	81 f4       	brne	.+32     	; 0x366e <malloc+0x50>
    364e:	82 81       	ldd	r24, Z+2	; 0x02
    3650:	93 81       	ldd	r25, Z+3	; 0x03
    3652:	21 15       	cp	r18, r1
    3654:	31 05       	cpc	r19, r1
    3656:	31 f0       	breq	.+12     	; 0x3664 <malloc+0x46>
    3658:	d9 01       	movw	r26, r18
    365a:	13 96       	adiw	r26, 0x03	; 3
    365c:	9c 93       	st	X, r25
    365e:	8e 93       	st	-X, r24
    3660:	12 97       	sbiw	r26, 0x02	; 2
    3662:	2b c0       	rjmp	.+86     	; 0x36ba <malloc+0x9c>
    3664:	90 93 aa 07 	sts	0x07AA, r25
    3668:	80 93 a9 07 	sts	0x07A9, r24
    366c:	26 c0       	rjmp	.+76     	; 0x36ba <malloc+0x9c>
    366e:	41 15       	cp	r20, r1
    3670:	51 05       	cpc	r21, r1
    3672:	19 f0       	breq	.+6      	; 0x367a <malloc+0x5c>
    3674:	64 17       	cp	r22, r20
    3676:	75 07       	cpc	r23, r21
    3678:	18 f4       	brcc	.+6      	; 0x3680 <malloc+0x62>
    367a:	ab 01       	movw	r20, r22
    367c:	e9 01       	movw	r28, r18
    367e:	df 01       	movw	r26, r30
    3680:	9f 01       	movw	r18, r30
    3682:	72 81       	ldd	r23, Z+2	; 0x02
    3684:	63 81       	ldd	r22, Z+3	; 0x03
    3686:	e7 2f       	mov	r30, r23
    3688:	f6 2f       	mov	r31, r22
    368a:	30 97       	sbiw	r30, 0x00	; 0
    368c:	c1 f6       	brne	.-80     	; 0x363e <malloc+0x20>
    368e:	41 15       	cp	r20, r1
    3690:	51 05       	cpc	r21, r1
    3692:	01 f1       	breq	.+64     	; 0x36d4 <malloc+0xb6>
    3694:	48 1b       	sub	r20, r24
    3696:	59 0b       	sbc	r21, r25
    3698:	44 30       	cpi	r20, 0x04	; 4
    369a:	51 05       	cpc	r21, r1
    369c:	80 f4       	brcc	.+32     	; 0x36be <malloc+0xa0>
    369e:	12 96       	adiw	r26, 0x02	; 2
    36a0:	8d 91       	ld	r24, X+
    36a2:	9c 91       	ld	r25, X
    36a4:	13 97       	sbiw	r26, 0x03	; 3
    36a6:	20 97       	sbiw	r28, 0x00	; 0
    36a8:	19 f0       	breq	.+6      	; 0x36b0 <malloc+0x92>
    36aa:	9b 83       	std	Y+3, r25	; 0x03
    36ac:	8a 83       	std	Y+2, r24	; 0x02
    36ae:	04 c0       	rjmp	.+8      	; 0x36b8 <malloc+0x9a>
    36b0:	90 93 aa 07 	sts	0x07AA, r25
    36b4:	80 93 a9 07 	sts	0x07A9, r24
    36b8:	fd 01       	movw	r30, r26
    36ba:	32 96       	adiw	r30, 0x02	; 2
    36bc:	46 c0       	rjmp	.+140    	; 0x374a <malloc+0x12c>
    36be:	fd 01       	movw	r30, r26
    36c0:	e4 0f       	add	r30, r20
    36c2:	f5 1f       	adc	r31, r21
    36c4:	81 93       	st	Z+, r24
    36c6:	91 93       	st	Z+, r25
    36c8:	42 50       	subi	r20, 0x02	; 2
    36ca:	50 40       	sbci	r21, 0x00	; 0
    36cc:	11 96       	adiw	r26, 0x01	; 1
    36ce:	5c 93       	st	X, r21
    36d0:	4e 93       	st	-X, r20
    36d2:	3b c0       	rjmp	.+118    	; 0x374a <malloc+0x12c>
    36d4:	20 91 a7 07 	lds	r18, 0x07A7
    36d8:	30 91 a8 07 	lds	r19, 0x07A8
    36dc:	21 15       	cp	r18, r1
    36de:	31 05       	cpc	r19, r1
    36e0:	41 f4       	brne	.+16     	; 0x36f2 <malloc+0xd4>
    36e2:	20 91 fc 02 	lds	r18, 0x02FC
    36e6:	30 91 fd 02 	lds	r19, 0x02FD
    36ea:	30 93 a8 07 	sts	0x07A8, r19
    36ee:	20 93 a7 07 	sts	0x07A7, r18
    36f2:	20 91 fe 02 	lds	r18, 0x02FE
    36f6:	30 91 ff 02 	lds	r19, 0x02FF
    36fa:	21 15       	cp	r18, r1
    36fc:	31 05       	cpc	r19, r1
    36fe:	41 f4       	brne	.+16     	; 0x3710 <malloc+0xf2>
    3700:	2d b7       	in	r18, 0x3d	; 61
    3702:	3e b7       	in	r19, 0x3e	; 62
    3704:	40 91 fa 02 	lds	r20, 0x02FA
    3708:	50 91 fb 02 	lds	r21, 0x02FB
    370c:	24 1b       	sub	r18, r20
    370e:	35 0b       	sbc	r19, r21
    3710:	e0 91 a7 07 	lds	r30, 0x07A7
    3714:	f0 91 a8 07 	lds	r31, 0x07A8
    3718:	e2 17       	cp	r30, r18
    371a:	f3 07       	cpc	r31, r19
    371c:	a0 f4       	brcc	.+40     	; 0x3746 <malloc+0x128>
    371e:	2e 1b       	sub	r18, r30
    3720:	3f 0b       	sbc	r19, r31
    3722:	28 17       	cp	r18, r24
    3724:	39 07       	cpc	r19, r25
    3726:	78 f0       	brcs	.+30     	; 0x3746 <malloc+0x128>
    3728:	ac 01       	movw	r20, r24
    372a:	4e 5f       	subi	r20, 0xFE	; 254
    372c:	5f 4f       	sbci	r21, 0xFF	; 255
    372e:	24 17       	cp	r18, r20
    3730:	35 07       	cpc	r19, r21
    3732:	48 f0       	brcs	.+18     	; 0x3746 <malloc+0x128>
    3734:	4e 0f       	add	r20, r30
    3736:	5f 1f       	adc	r21, r31
    3738:	50 93 a8 07 	sts	0x07A8, r21
    373c:	40 93 a7 07 	sts	0x07A7, r20
    3740:	81 93       	st	Z+, r24
    3742:	91 93       	st	Z+, r25
    3744:	02 c0       	rjmp	.+4      	; 0x374a <malloc+0x12c>
    3746:	e0 e0       	ldi	r30, 0x00	; 0
    3748:	f0 e0       	ldi	r31, 0x00	; 0
    374a:	cf 01       	movw	r24, r30
    374c:	df 91       	pop	r29
    374e:	cf 91       	pop	r28
    3750:	08 95       	ret

00003752 <free>:
    3752:	cf 93       	push	r28
    3754:	df 93       	push	r29
    3756:	00 97       	sbiw	r24, 0x00	; 0
    3758:	09 f4       	brne	.+2      	; 0x375c <free+0xa>
    375a:	91 c0       	rjmp	.+290    	; 0x387e <free+0x12c>
    375c:	fc 01       	movw	r30, r24
    375e:	32 97       	sbiw	r30, 0x02	; 2
    3760:	13 82       	std	Z+3, r1	; 0x03
    3762:	12 82       	std	Z+2, r1	; 0x02
    3764:	60 91 a9 07 	lds	r22, 0x07A9
    3768:	70 91 aa 07 	lds	r23, 0x07AA
    376c:	61 15       	cp	r22, r1
    376e:	71 05       	cpc	r23, r1
    3770:	81 f4       	brne	.+32     	; 0x3792 <free+0x40>
    3772:	20 81       	ld	r18, Z
    3774:	31 81       	ldd	r19, Z+1	; 0x01
    3776:	28 0f       	add	r18, r24
    3778:	39 1f       	adc	r19, r25
    377a:	80 91 a7 07 	lds	r24, 0x07A7
    377e:	90 91 a8 07 	lds	r25, 0x07A8
    3782:	82 17       	cp	r24, r18
    3784:	93 07       	cpc	r25, r19
    3786:	99 f5       	brne	.+102    	; 0x37ee <free+0x9c>
    3788:	f0 93 a8 07 	sts	0x07A8, r31
    378c:	e0 93 a7 07 	sts	0x07A7, r30
    3790:	76 c0       	rjmp	.+236    	; 0x387e <free+0x12c>
    3792:	db 01       	movw	r26, r22
    3794:	80 e0       	ldi	r24, 0x00	; 0
    3796:	90 e0       	ldi	r25, 0x00	; 0
    3798:	02 c0       	rjmp	.+4      	; 0x379e <free+0x4c>
    379a:	cd 01       	movw	r24, r26
    379c:	d9 01       	movw	r26, r18
    379e:	ae 17       	cp	r26, r30
    37a0:	bf 07       	cpc	r27, r31
    37a2:	48 f4       	brcc	.+18     	; 0x37b6 <free+0x64>
    37a4:	12 96       	adiw	r26, 0x02	; 2
    37a6:	2d 91       	ld	r18, X+
    37a8:	3c 91       	ld	r19, X
    37aa:	13 97       	sbiw	r26, 0x03	; 3
    37ac:	21 15       	cp	r18, r1
    37ae:	31 05       	cpc	r19, r1
    37b0:	a1 f7       	brne	.-24     	; 0x379a <free+0x48>
    37b2:	cd 01       	movw	r24, r26
    37b4:	21 c0       	rjmp	.+66     	; 0x37f8 <free+0xa6>
    37b6:	b3 83       	std	Z+3, r27	; 0x03
    37b8:	a2 83       	std	Z+2, r26	; 0x02
    37ba:	ef 01       	movw	r28, r30
    37bc:	49 91       	ld	r20, Y+
    37be:	59 91       	ld	r21, Y+
    37c0:	9e 01       	movw	r18, r28
    37c2:	24 0f       	add	r18, r20
    37c4:	35 1f       	adc	r19, r21
    37c6:	a2 17       	cp	r26, r18
    37c8:	b3 07       	cpc	r27, r19
    37ca:	79 f4       	brne	.+30     	; 0x37ea <free+0x98>
    37cc:	2d 91       	ld	r18, X+
    37ce:	3c 91       	ld	r19, X
    37d0:	11 97       	sbiw	r26, 0x01	; 1
    37d2:	24 0f       	add	r18, r20
    37d4:	35 1f       	adc	r19, r21
    37d6:	2e 5f       	subi	r18, 0xFE	; 254
    37d8:	3f 4f       	sbci	r19, 0xFF	; 255
    37da:	31 83       	std	Z+1, r19	; 0x01
    37dc:	20 83       	st	Z, r18
    37de:	12 96       	adiw	r26, 0x02	; 2
    37e0:	2d 91       	ld	r18, X+
    37e2:	3c 91       	ld	r19, X
    37e4:	13 97       	sbiw	r26, 0x03	; 3
    37e6:	33 83       	std	Z+3, r19	; 0x03
    37e8:	22 83       	std	Z+2, r18	; 0x02
    37ea:	00 97       	sbiw	r24, 0x00	; 0
    37ec:	29 f4       	brne	.+10     	; 0x37f8 <free+0xa6>
    37ee:	f0 93 aa 07 	sts	0x07AA, r31
    37f2:	e0 93 a9 07 	sts	0x07A9, r30
    37f6:	43 c0       	rjmp	.+134    	; 0x387e <free+0x12c>
    37f8:	dc 01       	movw	r26, r24
    37fa:	13 96       	adiw	r26, 0x03	; 3
    37fc:	fc 93       	st	X, r31
    37fe:	ee 93       	st	-X, r30
    3800:	12 97       	sbiw	r26, 0x02	; 2
    3802:	4d 91       	ld	r20, X+
    3804:	5d 91       	ld	r21, X+
    3806:	a4 0f       	add	r26, r20
    3808:	b5 1f       	adc	r27, r21
    380a:	ea 17       	cp	r30, r26
    380c:	fb 07       	cpc	r31, r27
    380e:	69 f4       	brne	.+26     	; 0x382a <free+0xd8>
    3810:	20 81       	ld	r18, Z
    3812:	31 81       	ldd	r19, Z+1	; 0x01
    3814:	24 0f       	add	r18, r20
    3816:	35 1f       	adc	r19, r21
    3818:	2e 5f       	subi	r18, 0xFE	; 254
    381a:	3f 4f       	sbci	r19, 0xFF	; 255
    381c:	ec 01       	movw	r28, r24
    381e:	39 83       	std	Y+1, r19	; 0x01
    3820:	28 83       	st	Y, r18
    3822:	22 81       	ldd	r18, Z+2	; 0x02
    3824:	33 81       	ldd	r19, Z+3	; 0x03
    3826:	3b 83       	std	Y+3, r19	; 0x03
    3828:	2a 83       	std	Y+2, r18	; 0x02
    382a:	e0 e0       	ldi	r30, 0x00	; 0
    382c:	f0 e0       	ldi	r31, 0x00	; 0
    382e:	02 c0       	rjmp	.+4      	; 0x3834 <free+0xe2>
    3830:	fb 01       	movw	r30, r22
    3832:	bc 01       	movw	r22, r24
    3834:	db 01       	movw	r26, r22
    3836:	12 96       	adiw	r26, 0x02	; 2
    3838:	8d 91       	ld	r24, X+
    383a:	9c 91       	ld	r25, X
    383c:	13 97       	sbiw	r26, 0x03	; 3
    383e:	00 97       	sbiw	r24, 0x00	; 0
    3840:	b9 f7       	brne	.-18     	; 0x3830 <free+0xde>
    3842:	9b 01       	movw	r18, r22
    3844:	2e 5f       	subi	r18, 0xFE	; 254
    3846:	3f 4f       	sbci	r19, 0xFF	; 255
    3848:	8d 91       	ld	r24, X+
    384a:	9c 91       	ld	r25, X
    384c:	11 97       	sbiw	r26, 0x01	; 1
    384e:	82 0f       	add	r24, r18
    3850:	93 1f       	adc	r25, r19
    3852:	40 91 a7 07 	lds	r20, 0x07A7
    3856:	50 91 a8 07 	lds	r21, 0x07A8
    385a:	48 17       	cp	r20, r24
    385c:	59 07       	cpc	r21, r25
    385e:	79 f4       	brne	.+30     	; 0x387e <free+0x12c>
    3860:	30 97       	sbiw	r30, 0x00	; 0
    3862:	29 f4       	brne	.+10     	; 0x386e <free+0x11c>
    3864:	10 92 aa 07 	sts	0x07AA, r1
    3868:	10 92 a9 07 	sts	0x07A9, r1
    386c:	02 c0       	rjmp	.+4      	; 0x3872 <free+0x120>
    386e:	13 82       	std	Z+3, r1	; 0x03
    3870:	12 82       	std	Z+2, r1	; 0x02
    3872:	22 50       	subi	r18, 0x02	; 2
    3874:	30 40       	sbci	r19, 0x00	; 0
    3876:	30 93 a8 07 	sts	0x07A8, r19
    387a:	20 93 a7 07 	sts	0x07A7, r18
    387e:	df 91       	pop	r29
    3880:	cf 91       	pop	r28
    3882:	08 95       	ret

00003884 <_exit>:
    3884:	f8 94       	cli

00003886 <__stop_program>:
    3886:	ff cf       	rjmp	.-2      	; 0x3886 <__stop_program>
